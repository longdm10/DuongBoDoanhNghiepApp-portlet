/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbo.dao.motcua.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai;
import vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThaiModel;
import vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThaiSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MotCuaAnhXaTrangThai service. Represents a row in the &quot;motcua_anhxatrangthai&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThaiModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MotCuaAnhXaTrangThaiImpl}.
 * </p>
 *
 * @author win_64
 * @see MotCuaAnhXaTrangThaiImpl
 * @see vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai
 * @see vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThaiModel
 * @generated
 */
@JSON(strict = true)
public class MotCuaAnhXaTrangThaiModelImpl extends BaseModelImpl<MotCuaAnhXaTrangThai>
	implements MotCuaAnhXaTrangThaiModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mot cua anh xa trang thai model instance should use the {@link vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai} interface instead.
	 */
	public static final String TABLE_NAME = "motcua_anhxatrangthai";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "mattcanbo", Types.VARCHAR },
			{ "mattdoanhnghiep", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table motcua_anhxatrangthai (id LONG not null primary key,mattcanbo VARCHAR(75) null,mattdoanhnghiep VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table motcua_anhxatrangthai";
	public static final String ORDER_BY_JPQL = " ORDER BY motCuaAnhXaTrangThai.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY motcua_anhxatrangthai.id ASC";
	public static final String DATA_SOURCE = "tthcDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai"),
			true);
	public static long MATTCANBO_COLUMN_BITMASK = 1L;
	public static long MATTDOANHNGHIEP_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MotCuaAnhXaTrangThai toModel(
		MotCuaAnhXaTrangThaiSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MotCuaAnhXaTrangThai model = new MotCuaAnhXaTrangThaiImpl();

		model.setId(soapModel.getId());
		model.setMaTTCanBo(soapModel.getMaTTCanBo());
		model.setMaTTDoanhNghiep(soapModel.getMaTTDoanhNghiep());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MotCuaAnhXaTrangThai> toModels(
		MotCuaAnhXaTrangThaiSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MotCuaAnhXaTrangThai> models = new ArrayList<MotCuaAnhXaTrangThai>(soapModels.length);

		for (MotCuaAnhXaTrangThaiSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai"));

	public MotCuaAnhXaTrangThaiModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MotCuaAnhXaTrangThai.class;
	}

	@Override
	public String getModelClassName() {
		return MotCuaAnhXaTrangThai.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("maTTCanBo", getMaTTCanBo());
		attributes.put("maTTDoanhNghiep", getMaTTDoanhNghiep());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String maTTCanBo = (String)attributes.get("maTTCanBo");

		if (maTTCanBo != null) {
			setMaTTCanBo(maTTCanBo);
		}

		String maTTDoanhNghiep = (String)attributes.get("maTTDoanhNghiep");

		if (maTTDoanhNghiep != null) {
			setMaTTDoanhNghiep(maTTDoanhNghiep);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getMaTTCanBo() {
		if (_maTTCanBo == null) {
			return StringPool.BLANK;
		}
		else {
			return _maTTCanBo;
		}
	}

	@Override
	public void setMaTTCanBo(String maTTCanBo) {
		_columnBitmask |= MATTCANBO_COLUMN_BITMASK;

		if (_originalMaTTCanBo == null) {
			_originalMaTTCanBo = _maTTCanBo;
		}

		_maTTCanBo = maTTCanBo;
	}

	public String getOriginalMaTTCanBo() {
		return GetterUtil.getString(_originalMaTTCanBo);
	}

	@JSON
	@Override
	public String getMaTTDoanhNghiep() {
		if (_maTTDoanhNghiep == null) {
			return StringPool.BLANK;
		}
		else {
			return _maTTDoanhNghiep;
		}
	}

	@Override
	public void setMaTTDoanhNghiep(String maTTDoanhNghiep) {
		_columnBitmask |= MATTDOANHNGHIEP_COLUMN_BITMASK;

		if (_originalMaTTDoanhNghiep == null) {
			_originalMaTTDoanhNghiep = _maTTDoanhNghiep;
		}

		_maTTDoanhNghiep = maTTDoanhNghiep;
	}

	public String getOriginalMaTTDoanhNghiep() {
		return GetterUtil.getString(_originalMaTTDoanhNghiep);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MotCuaAnhXaTrangThai.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MotCuaAnhXaTrangThai toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MotCuaAnhXaTrangThai)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MotCuaAnhXaTrangThaiImpl motCuaAnhXaTrangThaiImpl = new MotCuaAnhXaTrangThaiImpl();

		motCuaAnhXaTrangThaiImpl.setId(getId());
		motCuaAnhXaTrangThaiImpl.setMaTTCanBo(getMaTTCanBo());
		motCuaAnhXaTrangThaiImpl.setMaTTDoanhNghiep(getMaTTDoanhNghiep());

		motCuaAnhXaTrangThaiImpl.resetOriginalValues();

		return motCuaAnhXaTrangThaiImpl;
	}

	@Override
	public int compareTo(MotCuaAnhXaTrangThai motCuaAnhXaTrangThai) {
		int value = 0;

		if (getId() < motCuaAnhXaTrangThai.getId()) {
			value = -1;
		}
		else if (getId() > motCuaAnhXaTrangThai.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MotCuaAnhXaTrangThai)) {
			return false;
		}

		MotCuaAnhXaTrangThai motCuaAnhXaTrangThai = (MotCuaAnhXaTrangThai)obj;

		long primaryKey = motCuaAnhXaTrangThai.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MotCuaAnhXaTrangThaiModelImpl motCuaAnhXaTrangThaiModelImpl = this;

		motCuaAnhXaTrangThaiModelImpl._originalMaTTCanBo = motCuaAnhXaTrangThaiModelImpl._maTTCanBo;

		motCuaAnhXaTrangThaiModelImpl._originalMaTTDoanhNghiep = motCuaAnhXaTrangThaiModelImpl._maTTDoanhNghiep;

		motCuaAnhXaTrangThaiModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MotCuaAnhXaTrangThai> toCacheModel() {
		MotCuaAnhXaTrangThaiCacheModel motCuaAnhXaTrangThaiCacheModel = new MotCuaAnhXaTrangThaiCacheModel();

		motCuaAnhXaTrangThaiCacheModel.id = getId();

		motCuaAnhXaTrangThaiCacheModel.maTTCanBo = getMaTTCanBo();

		String maTTCanBo = motCuaAnhXaTrangThaiCacheModel.maTTCanBo;

		if ((maTTCanBo != null) && (maTTCanBo.length() == 0)) {
			motCuaAnhXaTrangThaiCacheModel.maTTCanBo = null;
		}

		motCuaAnhXaTrangThaiCacheModel.maTTDoanhNghiep = getMaTTDoanhNghiep();

		String maTTDoanhNghiep = motCuaAnhXaTrangThaiCacheModel.maTTDoanhNghiep;

		if ((maTTDoanhNghiep != null) && (maTTDoanhNghiep.length() == 0)) {
			motCuaAnhXaTrangThaiCacheModel.maTTDoanhNghiep = null;
		}

		return motCuaAnhXaTrangThaiCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", maTTCanBo=");
		sb.append(getMaTTCanBo());
		sb.append(", maTTDoanhNghiep=");
		sb.append(getMaTTDoanhNghiep());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbo.dao.motcua.model.MotCuaAnhXaTrangThai");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maTTCanBo</column-name><column-value><![CDATA[");
		sb.append(getMaTTCanBo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maTTDoanhNghiep</column-name><column-value><![CDATA[");
		sb.append(getMaTTDoanhNghiep());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MotCuaAnhXaTrangThai.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MotCuaAnhXaTrangThai.class
		};
	private long _id;
	private String _maTTCanBo;
	private String _originalMaTTCanBo;
	private String _maTTDoanhNghiep;
	private String _originalMaTTDoanhNghiep;
	private long _columnBitmask;
	private MotCuaAnhXaTrangThai _escapedModel;
}