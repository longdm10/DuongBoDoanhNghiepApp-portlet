/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbo.dao.doanhnghiep.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import vn.dtt.duongbo.dao.doanhnghiep.model.DnDoanhNghiep;
import vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalService;
import vn.dtt.duongbo.dao.doanhnghiep.service.persistence.DnDoanhNghiepFinder;
import vn.dtt.duongbo.dao.doanhnghiep.service.persistence.DnDoanhNghiepPersistence;
import vn.dtt.duongbo.dao.doanhnghiep.service.persistence.DnDoanhNghiepUserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dn doanh nghiep local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link vn.dtt.duongbo.dao.doanhnghiep.service.impl.DnDoanhNghiepLocalServiceImpl}.
 * </p>
 *
 * @author win_64
 * @see vn.dtt.duongbo.dao.doanhnghiep.service.impl.DnDoanhNghiepLocalServiceImpl
 * @see vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalServiceUtil
 * @generated
 */
public abstract class DnDoanhNghiepLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DnDoanhNghiepLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalServiceUtil} to access the dn doanh nghiep local service.
	 */

	/**
	 * Adds the dn doanh nghiep to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dnDoanhNghiep the dn doanh nghiep
	 * @return the dn doanh nghiep that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DnDoanhNghiep addDnDoanhNghiep(DnDoanhNghiep dnDoanhNghiep)
		throws SystemException {
		dnDoanhNghiep.setNew(true);

		return dnDoanhNghiepPersistence.update(dnDoanhNghiep);
	}

	/**
	 * Creates a new dn doanh nghiep with the primary key. Does not add the dn doanh nghiep to the database.
	 *
	 * @param id the primary key for the new dn doanh nghiep
	 * @return the new dn doanh nghiep
	 */
	@Override
	public DnDoanhNghiep createDnDoanhNghiep(long id) {
		return dnDoanhNghiepPersistence.create(id);
	}

	/**
	 * Deletes the dn doanh nghiep with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the dn doanh nghiep
	 * @return the dn doanh nghiep that was removed
	 * @throws PortalException if a dn doanh nghiep with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DnDoanhNghiep deleteDnDoanhNghiep(long id)
		throws PortalException, SystemException {
		return dnDoanhNghiepPersistence.remove(id);
	}

	/**
	 * Deletes the dn doanh nghiep from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dnDoanhNghiep the dn doanh nghiep
	 * @return the dn doanh nghiep that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DnDoanhNghiep deleteDnDoanhNghiep(DnDoanhNghiep dnDoanhNghiep)
		throws SystemException {
		return dnDoanhNghiepPersistence.remove(dnDoanhNghiep);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DnDoanhNghiep.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return dnDoanhNghiepPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.duongbo.dao.doanhnghiep.model.impl.DnDoanhNghiepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return dnDoanhNghiepPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.duongbo.dao.doanhnghiep.model.impl.DnDoanhNghiepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return dnDoanhNghiepPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return dnDoanhNghiepPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return dnDoanhNghiepPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DnDoanhNghiep fetchDnDoanhNghiep(long id) throws SystemException {
		return dnDoanhNghiepPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the dn doanh nghiep with the primary key.
	 *
	 * @param id the primary key of the dn doanh nghiep
	 * @return the dn doanh nghiep
	 * @throws PortalException if a dn doanh nghiep with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public DnDoanhNghiep getDnDoanhNghiep(long id)
		throws PortalException, SystemException {
		return dnDoanhNghiepPersistence.findByPrimaryKey(id);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return dnDoanhNghiepPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dn doanh nghieps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link vn.dtt.duongbo.dao.doanhnghiep.model.impl.DnDoanhNghiepModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dn doanh nghieps
	 * @param end the upper bound of the range of dn doanh nghieps (not inclusive)
	 * @return the range of dn doanh nghieps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DnDoanhNghiep> getDnDoanhNghieps(int start, int end)
		throws SystemException {
		return dnDoanhNghiepPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dn doanh nghieps.
	 *
	 * @return the number of dn doanh nghieps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDnDoanhNghiepsCount() throws SystemException {
		return dnDoanhNghiepPersistence.countAll();
	}

	/**
	 * Updates the dn doanh nghiep in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dnDoanhNghiep the dn doanh nghiep
	 * @return the dn doanh nghiep that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DnDoanhNghiep updateDnDoanhNghiep(DnDoanhNghiep dnDoanhNghiep)
		throws SystemException {
		return dnDoanhNghiepPersistence.update(dnDoanhNghiep);
	}

	/**
	 * Returns the dn doanh nghiep local service.
	 *
	 * @return the dn doanh nghiep local service
	 */
	public vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalService getDnDoanhNghiepLocalService() {
		return dnDoanhNghiepLocalService;
	}

	/**
	 * Sets the dn doanh nghiep local service.
	 *
	 * @param dnDoanhNghiepLocalService the dn doanh nghiep local service
	 */
	public void setDnDoanhNghiepLocalService(
		vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalService dnDoanhNghiepLocalService) {
		this.dnDoanhNghiepLocalService = dnDoanhNghiepLocalService;
	}

	/**
	 * Returns the dn doanh nghiep persistence.
	 *
	 * @return the dn doanh nghiep persistence
	 */
	public DnDoanhNghiepPersistence getDnDoanhNghiepPersistence() {
		return dnDoanhNghiepPersistence;
	}

	/**
	 * Sets the dn doanh nghiep persistence.
	 *
	 * @param dnDoanhNghiepPersistence the dn doanh nghiep persistence
	 */
	public void setDnDoanhNghiepPersistence(
		DnDoanhNghiepPersistence dnDoanhNghiepPersistence) {
		this.dnDoanhNghiepPersistence = dnDoanhNghiepPersistence;
	}

	/**
	 * Returns the dn doanh nghiep finder.
	 *
	 * @return the dn doanh nghiep finder
	 */
	public DnDoanhNghiepFinder getDnDoanhNghiepFinder() {
		return dnDoanhNghiepFinder;
	}

	/**
	 * Sets the dn doanh nghiep finder.
	 *
	 * @param dnDoanhNghiepFinder the dn doanh nghiep finder
	 */
	public void setDnDoanhNghiepFinder(DnDoanhNghiepFinder dnDoanhNghiepFinder) {
		this.dnDoanhNghiepFinder = dnDoanhNghiepFinder;
	}

	/**
	 * Returns the dn doanh nghiep user local service.
	 *
	 * @return the dn doanh nghiep user local service
	 */
	public vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepUserLocalService getDnDoanhNghiepUserLocalService() {
		return dnDoanhNghiepUserLocalService;
	}

	/**
	 * Sets the dn doanh nghiep user local service.
	 *
	 * @param dnDoanhNghiepUserLocalService the dn doanh nghiep user local service
	 */
	public void setDnDoanhNghiepUserLocalService(
		vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepUserLocalService dnDoanhNghiepUserLocalService) {
		this.dnDoanhNghiepUserLocalService = dnDoanhNghiepUserLocalService;
	}

	/**
	 * Returns the dn doanh nghiep user persistence.
	 *
	 * @return the dn doanh nghiep user persistence
	 */
	public DnDoanhNghiepUserPersistence getDnDoanhNghiepUserPersistence() {
		return dnDoanhNghiepUserPersistence;
	}

	/**
	 * Sets the dn doanh nghiep user persistence.
	 *
	 * @param dnDoanhNghiepUserPersistence the dn doanh nghiep user persistence
	 */
	public void setDnDoanhNghiepUserPersistence(
		DnDoanhNghiepUserPersistence dnDoanhNghiepUserPersistence) {
		this.dnDoanhNghiepUserPersistence = dnDoanhNghiepUserPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("vn.dtt.duongbo.dao.doanhnghiep.model.DnDoanhNghiep",
			dnDoanhNghiepLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"vn.dtt.duongbo.dao.doanhnghiep.model.DnDoanhNghiep");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DnDoanhNghiep.class;
	}

	protected String getModelClassName() {
		return DnDoanhNghiep.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = dnDoanhNghiepPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalService.class)
	protected vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepLocalService dnDoanhNghiepLocalService;
	@BeanReference(type = DnDoanhNghiepPersistence.class)
	protected DnDoanhNghiepPersistence dnDoanhNghiepPersistence;
	@BeanReference(type = DnDoanhNghiepFinder.class)
	protected DnDoanhNghiepFinder dnDoanhNghiepFinder;
	@BeanReference(type = vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepUserLocalService.class)
	protected vn.dtt.duongbo.dao.doanhnghiep.service.DnDoanhNghiepUserLocalService dnDoanhNghiepUserLocalService;
	@BeanReference(type = DnDoanhNghiepUserPersistence.class)
	protected DnDoanhNghiepUserPersistence dnDoanhNghiepUserPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DnDoanhNghiepLocalServiceClpInvoker _clpInvoker = new DnDoanhNghiepLocalServiceClpInvoker();
}