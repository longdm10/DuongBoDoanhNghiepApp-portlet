/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.RmdcShip;
import vn.dtt.duongbien.dao.vrcb.model.RmdcShipModel;
import vn.dtt.duongbien.dao.vrcb.model.RmdcShipSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RmdcShip service. Represents a row in the &quot;dmdc_ship&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.RmdcShipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RmdcShipImpl}.
 * </p>
 *
 * @author longdm
 * @see RmdcShipImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.RmdcShip
 * @see vn.dtt.duongbien.dao.vrcb.model.RmdcShipModel
 * @generated
 */
@JSON(strict = true)
public class RmdcShipModelImpl extends BaseModelImpl<RmdcShip>
	implements RmdcShipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rmdc ship model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.RmdcShip} interface instead.
	 */
	public static final String TABLE_NAME = "dmdc_ship";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "shipid", Types.INTEGER },
			{ "shipname", Types.VARCHAR },
			{ "shiptypeid", Types.INTEGER },
			{ "shiptypecode", Types.VARCHAR },
			{ "imo", Types.VARCHAR },
			{ "callsign", Types.VARCHAR },
			{ "stateid", Types.VARCHAR },
			{ "statecode", Types.VARCHAR },
			{ "registrynumber", Types.VARCHAR },
			{ "registrydate", Types.TIMESTAMP },
			{ "registryportid", Types.INTEGER },
			{ "registryportcode", Types.VARCHAR },
			{ "gt", Types.DOUBLE },
			{ "nrt", Types.DOUBLE },
			{ "dwt", Types.DOUBLE },
			{ "shiplength", Types.DOUBLE },
			{ "shipwidth", Types.DOUBLE },
			{ "shipheight", Types.DOUBLE },
			{ "sailingspeed", Types.DOUBLE },
			{ "color", Types.VARCHAR },
			{ "bonecode", Types.VARCHAR },
			{ "machinecode", Types.VARCHAR },
			{ "shipagencyid", Types.INTEGER },
			{ "shipagencycode", Types.VARCHAR },
			{ "fishingboatregistration", Types.VARCHAR },
			{ "roleship", Types.INTEGER },
			{ "isdelete", Types.INTEGER },
			{ "markedasdelete", Types.INTEGER },
			{ "modifieddate", Types.TIMESTAMP },
			{ "requesteddate", Types.TIMESTAMP },
			{ "syncversion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table dmdc_ship (id LONG not null primary key,shipid INTEGER,shipname VARCHAR(75) null,shiptypeid INTEGER,shiptypecode VARCHAR(75) null,imo VARCHAR(75) null,callsign VARCHAR(75) null,stateid VARCHAR(75) null,statecode VARCHAR(75) null,registrynumber VARCHAR(75) null,registrydate DATE null,registryportid INTEGER,registryportcode VARCHAR(75) null,gt DOUBLE,nrt DOUBLE,dwt DOUBLE,shiplength DOUBLE,shipwidth DOUBLE,shipheight DOUBLE,sailingspeed DOUBLE,color VARCHAR(75) null,bonecode VARCHAR(75) null,machinecode VARCHAR(75) null,shipagencyid INTEGER,shipagencycode VARCHAR(75) null,fishingboatregistration VARCHAR(75) null,roleship INTEGER,isdelete INTEGER,markedasdelete INTEGER,modifieddate DATE null,requesteddate DATE null,syncversion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table dmdc_ship";
	public static final String ORDER_BY_JPQL = " ORDER BY rmdcShip.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dmdc_ship.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.RmdcShip"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.RmdcShip"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.RmdcShip"),
			true);
	public static long SHIPID_COLUMN_BITMASK = 1L;
	public static long SHIPTYPECODE_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static RmdcShip toModel(RmdcShipSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		RmdcShip model = new RmdcShipImpl();

		model.setId(soapModel.getId());
		model.setShipId(soapModel.getShipId());
		model.setShipName(soapModel.getShipName());
		model.setShipTypeId(soapModel.getShipTypeId());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setImo(soapModel.getImo());
		model.setCallSign(soapModel.getCallSign());
		model.setStateId(soapModel.getStateId());
		model.setStateCode(soapModel.getStateCode());
		model.setRegistryNumber(soapModel.getRegistryNumber());
		model.setRegistryDate(soapModel.getRegistryDate());
		model.setRegistryPortId(soapModel.getRegistryPortId());
		model.setRegistryPortCode(soapModel.getRegistryPortCode());
		model.setGt(soapModel.getGt());
		model.setNrt(soapModel.getNrt());
		model.setDwt(soapModel.getDwt());
		model.setLength(soapModel.getLength());
		model.setWidth(soapModel.getWidth());
		model.setHeight(soapModel.getHeight());
		model.setSailingSpeed(soapModel.getSailingSpeed());
		model.setColor(soapModel.getColor());
		model.setBoneCode(soapModel.getBoneCode());
		model.setMachineCode(soapModel.getMachineCode());
		model.setShipAgencyId(soapModel.getShipAgencyId());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setFishingBoatRegistration(soapModel.getFishingBoatRegistration());
		model.setRoleShip(soapModel.getRoleShip());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<RmdcShip> toModels(RmdcShipSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<RmdcShip> models = new ArrayList<RmdcShip>(soapModels.length);

		for (RmdcShipSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.RmdcShip"));

	public RmdcShipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RmdcShip.class;
	}

	@Override
	public String getModelClassName() {
		return RmdcShip.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("shipId", getShipId());
		attributes.put("shipName", getShipName());
		attributes.put("shipTypeId", getShipTypeId());
		attributes.put("shipTypeCode", getShipTypeCode());
		attributes.put("imo", getImo());
		attributes.put("callSign", getCallSign());
		attributes.put("stateId", getStateId());
		attributes.put("stateCode", getStateCode());
		attributes.put("registryNumber", getRegistryNumber());
		attributes.put("registryDate", getRegistryDate());
		attributes.put("registryPortId", getRegistryPortId());
		attributes.put("registryPortCode", getRegistryPortCode());
		attributes.put("gt", getGt());
		attributes.put("nrt", getNrt());
		attributes.put("dwt", getDwt());
		attributes.put("length", getLength());
		attributes.put("width", getWidth());
		attributes.put("height", getHeight());
		attributes.put("sailingSpeed", getSailingSpeed());
		attributes.put("color", getColor());
		attributes.put("boneCode", getBoneCode());
		attributes.put("machineCode", getMachineCode());
		attributes.put("shipAgencyId", getShipAgencyId());
		attributes.put("shipAgencyCode", getShipAgencyCode());
		attributes.put("fishingBoatRegistration", getFishingBoatRegistration());
		attributes.put("roleShip", getRoleShip());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Integer shipId = (Integer)attributes.get("shipId");

		if (shipId != null) {
			setShipId(shipId);
		}

		String shipName = (String)attributes.get("shipName");

		if (shipName != null) {
			setShipName(shipName);
		}

		Integer shipTypeId = (Integer)attributes.get("shipTypeId");

		if (shipTypeId != null) {
			setShipTypeId(shipTypeId);
		}

		String shipTypeCode = (String)attributes.get("shipTypeCode");

		if (shipTypeCode != null) {
			setShipTypeCode(shipTypeCode);
		}

		String imo = (String)attributes.get("imo");

		if (imo != null) {
			setImo(imo);
		}

		String callSign = (String)attributes.get("callSign");

		if (callSign != null) {
			setCallSign(callSign);
		}

		String stateId = (String)attributes.get("stateId");

		if (stateId != null) {
			setStateId(stateId);
		}

		String stateCode = (String)attributes.get("stateCode");

		if (stateCode != null) {
			setStateCode(stateCode);
		}

		String registryNumber = (String)attributes.get("registryNumber");

		if (registryNumber != null) {
			setRegistryNumber(registryNumber);
		}

		Date registryDate = (Date)attributes.get("registryDate");

		if (registryDate != null) {
			setRegistryDate(registryDate);
		}

		Integer registryPortId = (Integer)attributes.get("registryPortId");

		if (registryPortId != null) {
			setRegistryPortId(registryPortId);
		}

		String registryPortCode = (String)attributes.get("registryPortCode");

		if (registryPortCode != null) {
			setRegistryPortCode(registryPortCode);
		}

		Double gt = (Double)attributes.get("gt");

		if (gt != null) {
			setGt(gt);
		}

		Double nrt = (Double)attributes.get("nrt");

		if (nrt != null) {
			setNrt(nrt);
		}

		Double dwt = (Double)attributes.get("dwt");

		if (dwt != null) {
			setDwt(dwt);
		}

		Double length = (Double)attributes.get("length");

		if (length != null) {
			setLength(length);
		}

		Double width = (Double)attributes.get("width");

		if (width != null) {
			setWidth(width);
		}

		Double height = (Double)attributes.get("height");

		if (height != null) {
			setHeight(height);
		}

		Double sailingSpeed = (Double)attributes.get("sailingSpeed");

		if (sailingSpeed != null) {
			setSailingSpeed(sailingSpeed);
		}

		String color = (String)attributes.get("color");

		if (color != null) {
			setColor(color);
		}

		String boneCode = (String)attributes.get("boneCode");

		if (boneCode != null) {
			setBoneCode(boneCode);
		}

		String machineCode = (String)attributes.get("machineCode");

		if (machineCode != null) {
			setMachineCode(machineCode);
		}

		Integer shipAgencyId = (Integer)attributes.get("shipAgencyId");

		if (shipAgencyId != null) {
			setShipAgencyId(shipAgencyId);
		}

		String shipAgencyCode = (String)attributes.get("shipAgencyCode");

		if (shipAgencyCode != null) {
			setShipAgencyCode(shipAgencyCode);
		}

		String fishingBoatRegistration = (String)attributes.get(
				"fishingBoatRegistration");

		if (fishingBoatRegistration != null) {
			setFishingBoatRegistration(fishingBoatRegistration);
		}

		Integer roleShip = (Integer)attributes.get("roleShip");

		if (roleShip != null) {
			setRoleShip(roleShip);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public int getShipId() {
		return _shipId;
	}

	@Override
	public void setShipId(int shipId) {
		_columnBitmask |= SHIPID_COLUMN_BITMASK;

		if (!_setOriginalShipId) {
			_setOriginalShipId = true;

			_originalShipId = _shipId;
		}

		_shipId = shipId;
	}

	public int getOriginalShipId() {
		return _originalShipId;
	}

	@JSON
	@Override
	public String getShipName() {
		if (_shipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipName;
		}
	}

	@Override
	public void setShipName(String shipName) {
		_shipName = shipName;
	}

	@JSON
	@Override
	public int getShipTypeId() {
		return _shipTypeId;
	}

	@Override
	public void setShipTypeId(int shipTypeId) {
		_shipTypeId = shipTypeId;
	}

	@JSON
	@Override
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	@Override
	public void setShipTypeCode(String shipTypeCode) {
		_columnBitmask |= SHIPTYPECODE_COLUMN_BITMASK;

		if (_originalShipTypeCode == null) {
			_originalShipTypeCode = _shipTypeCode;
		}

		_shipTypeCode = shipTypeCode;
	}

	public String getOriginalShipTypeCode() {
		return GetterUtil.getString(_originalShipTypeCode);
	}

	@JSON
	@Override
	public String getImo() {
		if (_imo == null) {
			return StringPool.BLANK;
		}
		else {
			return _imo;
		}
	}

	@Override
	public void setImo(String imo) {
		_imo = imo;
	}

	@JSON
	@Override
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	@Override
	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	@Override
	public String getStateId() {
		if (_stateId == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateId;
		}
	}

	@Override
	public void setStateId(String stateId) {
		_stateId = stateId;
	}

	@JSON
	@Override
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	@Override
	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	@Override
	public String getRegistryNumber() {
		if (_registryNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _registryNumber;
		}
	}

	@Override
	public void setRegistryNumber(String registryNumber) {
		_registryNumber = registryNumber;
	}

	@JSON
	@Override
	public Date getRegistryDate() {
		return _registryDate;
	}

	@Override
	public void setRegistryDate(Date registryDate) {
		_registryDate = registryDate;
	}

	@JSON
	@Override
	public int getRegistryPortId() {
		return _registryPortId;
	}

	@Override
	public void setRegistryPortId(int registryPortId) {
		_registryPortId = registryPortId;
	}

	@JSON
	@Override
	public String getRegistryPortCode() {
		if (_registryPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _registryPortCode;
		}
	}

	@Override
	public void setRegistryPortCode(String registryPortCode) {
		_registryPortCode = registryPortCode;
	}

	@JSON
	@Override
	public double getGt() {
		return _gt;
	}

	@Override
	public void setGt(double gt) {
		_gt = gt;
	}

	@JSON
	@Override
	public double getNrt() {
		return _nrt;
	}

	@Override
	public void setNrt(double nrt) {
		_nrt = nrt;
	}

	@JSON
	@Override
	public double getDwt() {
		return _dwt;
	}

	@Override
	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	@Override
	public double getLength() {
		return _length;
	}

	@Override
	public void setLength(double length) {
		_length = length;
	}

	@JSON
	@Override
	public double getWidth() {
		return _width;
	}

	@Override
	public void setWidth(double width) {
		_width = width;
	}

	@JSON
	@Override
	public double getHeight() {
		return _height;
	}

	@Override
	public void setHeight(double height) {
		_height = height;
	}

	@JSON
	@Override
	public double getSailingSpeed() {
		return _sailingSpeed;
	}

	@Override
	public void setSailingSpeed(double sailingSpeed) {
		_sailingSpeed = sailingSpeed;
	}

	@JSON
	@Override
	public String getColor() {
		if (_color == null) {
			return StringPool.BLANK;
		}
		else {
			return _color;
		}
	}

	@Override
	public void setColor(String color) {
		_color = color;
	}

	@JSON
	@Override
	public String getBoneCode() {
		if (_boneCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _boneCode;
		}
	}

	@Override
	public void setBoneCode(String boneCode) {
		_boneCode = boneCode;
	}

	@JSON
	@Override
	public String getMachineCode() {
		if (_machineCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _machineCode;
		}
	}

	@Override
	public void setMachineCode(String machineCode) {
		_machineCode = machineCode;
	}

	@JSON
	@Override
	public int getShipAgencyId() {
		return _shipAgencyId;
	}

	@Override
	public void setShipAgencyId(int shipAgencyId) {
		_shipAgencyId = shipAgencyId;
	}

	@JSON
	@Override
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	@Override
	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	@Override
	public String getFishingBoatRegistration() {
		if (_fishingBoatRegistration == null) {
			return StringPool.BLANK;
		}
		else {
			return _fishingBoatRegistration;
		}
	}

	@Override
	public void setFishingBoatRegistration(String fishingBoatRegistration) {
		_fishingBoatRegistration = fishingBoatRegistration;
	}

	@JSON
	@Override
	public int getRoleShip() {
		return _roleShip;
	}

	@Override
	public void setRoleShip(int roleShip) {
		_roleShip = roleShip;
	}

	@JSON
	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RmdcShip.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RmdcShip toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RmdcShip)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RmdcShipImpl rmdcShipImpl = new RmdcShipImpl();

		rmdcShipImpl.setId(getId());
		rmdcShipImpl.setShipId(getShipId());
		rmdcShipImpl.setShipName(getShipName());
		rmdcShipImpl.setShipTypeId(getShipTypeId());
		rmdcShipImpl.setShipTypeCode(getShipTypeCode());
		rmdcShipImpl.setImo(getImo());
		rmdcShipImpl.setCallSign(getCallSign());
		rmdcShipImpl.setStateId(getStateId());
		rmdcShipImpl.setStateCode(getStateCode());
		rmdcShipImpl.setRegistryNumber(getRegistryNumber());
		rmdcShipImpl.setRegistryDate(getRegistryDate());
		rmdcShipImpl.setRegistryPortId(getRegistryPortId());
		rmdcShipImpl.setRegistryPortCode(getRegistryPortCode());
		rmdcShipImpl.setGt(getGt());
		rmdcShipImpl.setNrt(getNrt());
		rmdcShipImpl.setDwt(getDwt());
		rmdcShipImpl.setLength(getLength());
		rmdcShipImpl.setWidth(getWidth());
		rmdcShipImpl.setHeight(getHeight());
		rmdcShipImpl.setSailingSpeed(getSailingSpeed());
		rmdcShipImpl.setColor(getColor());
		rmdcShipImpl.setBoneCode(getBoneCode());
		rmdcShipImpl.setMachineCode(getMachineCode());
		rmdcShipImpl.setShipAgencyId(getShipAgencyId());
		rmdcShipImpl.setShipAgencyCode(getShipAgencyCode());
		rmdcShipImpl.setFishingBoatRegistration(getFishingBoatRegistration());
		rmdcShipImpl.setRoleShip(getRoleShip());
		rmdcShipImpl.setIsDelete(getIsDelete());
		rmdcShipImpl.setMarkedAsDelete(getMarkedAsDelete());
		rmdcShipImpl.setModifiedDate(getModifiedDate());
		rmdcShipImpl.setRequestedDate(getRequestedDate());
		rmdcShipImpl.setSyncVersion(getSyncVersion());

		rmdcShipImpl.resetOriginalValues();

		return rmdcShipImpl;
	}

	@Override
	public int compareTo(RmdcShip rmdcShip) {
		int value = 0;

		if (getId() < rmdcShip.getId()) {
			value = -1;
		}
		else if (getId() > rmdcShip.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RmdcShip)) {
			return false;
		}

		RmdcShip rmdcShip = (RmdcShip)obj;

		long primaryKey = rmdcShip.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RmdcShipModelImpl rmdcShipModelImpl = this;

		rmdcShipModelImpl._originalShipId = rmdcShipModelImpl._shipId;

		rmdcShipModelImpl._setOriginalShipId = false;

		rmdcShipModelImpl._originalShipTypeCode = rmdcShipModelImpl._shipTypeCode;

		rmdcShipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RmdcShip> toCacheModel() {
		RmdcShipCacheModel rmdcShipCacheModel = new RmdcShipCacheModel();

		rmdcShipCacheModel.id = getId();

		rmdcShipCacheModel.shipId = getShipId();

		rmdcShipCacheModel.shipName = getShipName();

		String shipName = rmdcShipCacheModel.shipName;

		if ((shipName != null) && (shipName.length() == 0)) {
			rmdcShipCacheModel.shipName = null;
		}

		rmdcShipCacheModel.shipTypeId = getShipTypeId();

		rmdcShipCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = rmdcShipCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			rmdcShipCacheModel.shipTypeCode = null;
		}

		rmdcShipCacheModel.imo = getImo();

		String imo = rmdcShipCacheModel.imo;

		if ((imo != null) && (imo.length() == 0)) {
			rmdcShipCacheModel.imo = null;
		}

		rmdcShipCacheModel.callSign = getCallSign();

		String callSign = rmdcShipCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			rmdcShipCacheModel.callSign = null;
		}

		rmdcShipCacheModel.stateId = getStateId();

		String stateId = rmdcShipCacheModel.stateId;

		if ((stateId != null) && (stateId.length() == 0)) {
			rmdcShipCacheModel.stateId = null;
		}

		rmdcShipCacheModel.stateCode = getStateCode();

		String stateCode = rmdcShipCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			rmdcShipCacheModel.stateCode = null;
		}

		rmdcShipCacheModel.registryNumber = getRegistryNumber();

		String registryNumber = rmdcShipCacheModel.registryNumber;

		if ((registryNumber != null) && (registryNumber.length() == 0)) {
			rmdcShipCacheModel.registryNumber = null;
		}

		Date registryDate = getRegistryDate();

		if (registryDate != null) {
			rmdcShipCacheModel.registryDate = registryDate.getTime();
		}
		else {
			rmdcShipCacheModel.registryDate = Long.MIN_VALUE;
		}

		rmdcShipCacheModel.registryPortId = getRegistryPortId();

		rmdcShipCacheModel.registryPortCode = getRegistryPortCode();

		String registryPortCode = rmdcShipCacheModel.registryPortCode;

		if ((registryPortCode != null) && (registryPortCode.length() == 0)) {
			rmdcShipCacheModel.registryPortCode = null;
		}

		rmdcShipCacheModel.gt = getGt();

		rmdcShipCacheModel.nrt = getNrt();

		rmdcShipCacheModel.dwt = getDwt();

		rmdcShipCacheModel.length = getLength();

		rmdcShipCacheModel.width = getWidth();

		rmdcShipCacheModel.height = getHeight();

		rmdcShipCacheModel.sailingSpeed = getSailingSpeed();

		rmdcShipCacheModel.color = getColor();

		String color = rmdcShipCacheModel.color;

		if ((color != null) && (color.length() == 0)) {
			rmdcShipCacheModel.color = null;
		}

		rmdcShipCacheModel.boneCode = getBoneCode();

		String boneCode = rmdcShipCacheModel.boneCode;

		if ((boneCode != null) && (boneCode.length() == 0)) {
			rmdcShipCacheModel.boneCode = null;
		}

		rmdcShipCacheModel.machineCode = getMachineCode();

		String machineCode = rmdcShipCacheModel.machineCode;

		if ((machineCode != null) && (machineCode.length() == 0)) {
			rmdcShipCacheModel.machineCode = null;
		}

		rmdcShipCacheModel.shipAgencyId = getShipAgencyId();

		rmdcShipCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = rmdcShipCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			rmdcShipCacheModel.shipAgencyCode = null;
		}

		rmdcShipCacheModel.fishingBoatRegistration = getFishingBoatRegistration();

		String fishingBoatRegistration = rmdcShipCacheModel.fishingBoatRegistration;

		if ((fishingBoatRegistration != null) &&
				(fishingBoatRegistration.length() == 0)) {
			rmdcShipCacheModel.fishingBoatRegistration = null;
		}

		rmdcShipCacheModel.roleShip = getRoleShip();

		rmdcShipCacheModel.isDelete = getIsDelete();

		rmdcShipCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rmdcShipCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rmdcShipCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			rmdcShipCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			rmdcShipCacheModel.requestedDate = Long.MIN_VALUE;
		}

		rmdcShipCacheModel.syncVersion = getSyncVersion();

		String syncVersion = rmdcShipCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			rmdcShipCacheModel.syncVersion = null;
		}

		return rmdcShipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", shipId=");
		sb.append(getShipId());
		sb.append(", shipName=");
		sb.append(getShipName());
		sb.append(", shipTypeId=");
		sb.append(getShipTypeId());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", imo=");
		sb.append(getImo());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", stateId=");
		sb.append(getStateId());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", registryNumber=");
		sb.append(getRegistryNumber());
		sb.append(", registryDate=");
		sb.append(getRegistryDate());
		sb.append(", registryPortId=");
		sb.append(getRegistryPortId());
		sb.append(", registryPortCode=");
		sb.append(getRegistryPortCode());
		sb.append(", gt=");
		sb.append(getGt());
		sb.append(", nrt=");
		sb.append(getNrt());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", length=");
		sb.append(getLength());
		sb.append(", width=");
		sb.append(getWidth());
		sb.append(", height=");
		sb.append(getHeight());
		sb.append(", sailingSpeed=");
		sb.append(getSailingSpeed());
		sb.append(", color=");
		sb.append(getColor());
		sb.append(", boneCode=");
		sb.append(getBoneCode());
		sb.append(", machineCode=");
		sb.append(getMachineCode());
		sb.append(", shipAgencyId=");
		sb.append(getShipAgencyId());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", fishingBoatRegistration=");
		sb.append(getFishingBoatRegistration());
		sb.append(", roleShip=");
		sb.append(getRoleShip());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.RmdcShip");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipId</column-name><column-value><![CDATA[");
		sb.append(getShipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipName</column-name><column-value><![CDATA[");
		sb.append(getShipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeId</column-name><column-value><![CDATA[");
		sb.append(getShipTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imo</column-name><column-value><![CDATA[");
		sb.append(getImo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateId</column-name><column-value><![CDATA[");
		sb.append(getStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryNumber</column-name><column-value><![CDATA[");
		sb.append(getRegistryNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryDate</column-name><column-value><![CDATA[");
		sb.append(getRegistryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryPortId</column-name><column-value><![CDATA[");
		sb.append(getRegistryPortId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registryPortCode</column-name><column-value><![CDATA[");
		sb.append(getRegistryPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gt</column-name><column-value><![CDATA[");
		sb.append(getGt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nrt</column-name><column-value><![CDATA[");
		sb.append(getNrt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>length</column-name><column-value><![CDATA[");
		sb.append(getLength());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>width</column-name><column-value><![CDATA[");
		sb.append(getWidth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>height</column-name><column-value><![CDATA[");
		sb.append(getHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sailingSpeed</column-name><column-value><![CDATA[");
		sb.append(getSailingSpeed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>color</column-name><column-value><![CDATA[");
		sb.append(getColor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>boneCode</column-name><column-value><![CDATA[");
		sb.append(getBoneCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>machineCode</column-name><column-value><![CDATA[");
		sb.append(getMachineCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyId</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fishingBoatRegistration</column-name><column-value><![CDATA[");
		sb.append(getFishingBoatRegistration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleShip</column-name><column-value><![CDATA[");
		sb.append(getRoleShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RmdcShip.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RmdcShip.class
		};
	private long _id;
	private int _shipId;
	private int _originalShipId;
	private boolean _setOriginalShipId;
	private String _shipName;
	private int _shipTypeId;
	private String _shipTypeCode;
	private String _originalShipTypeCode;
	private String _imo;
	private String _callSign;
	private String _stateId;
	private String _stateCode;
	private String _registryNumber;
	private Date _registryDate;
	private int _registryPortId;
	private String _registryPortCode;
	private double _gt;
	private double _nrt;
	private double _dwt;
	private double _length;
	private double _width;
	private double _height;
	private double _sailingSpeed;
	private String _color;
	private String _boneCode;
	private String _machineCode;
	private int _shipAgencyId;
	private String _shipAgencyCode;
	private String _fishingBoatRegistration;
	private int _roleShip;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private RmdcShip _escapedModel;
}