/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.ResultCertificate;
import vn.dtt.duongbien.dao.vrcb.model.ResultCertificateModel;
import vn.dtt.duongbien.dao.vrcb.model.ResultCertificateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ResultCertificate service. Represents a row in the &quot;result_certificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.ResultCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResultCertificateImpl}.
 * </p>
 *
 * @author longdm
 * @see ResultCertificateImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.ResultCertificate
 * @see vn.dtt.duongbien.dao.vrcb.model.ResultCertificateModel
 * @generated
 */
@JSON(strict = true)
public class ResultCertificateModelImpl extends BaseModelImpl<ResultCertificate>
	implements ResultCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a result certificate model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.ResultCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "result_certificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "MaritimeCode", Types.VARCHAR },
			{ "CertificateCode", Types.VARCHAR },
			{ "CertificateOrder", Types.INTEGER },
			{ "CertificateNo", Types.VARCHAR },
			{ "CertificateIssueDate", Types.TIMESTAMP },
			{ "CertificateExpiredDate", Types.TIMESTAMP },
			{ "ExaminationDate", Types.TIMESTAMP },
			{ "ApprovalName", Types.VARCHAR },
			{ "IsExamined", Types.INTEGER },
			{ "mandatory", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table result_certificate (ID LONG not null primary key,DocumentName LONG,DocumentYear INTEGER,MaritimeCode VARCHAR(75) null,CertificateCode VARCHAR(75) null,CertificateOrder INTEGER,CertificateNo VARCHAR(75) null,CertificateIssueDate DATE null,CertificateExpiredDate DATE null,ExaminationDate DATE null,ApprovalName VARCHAR(75) null,IsExamined INTEGER,mandatory INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table result_certificate";
	public static final String ORDER_BY_JPQL = " ORDER BY resultCertificate.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY result_certificate.ID DESC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultCertificate"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultCertificate"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultCertificate"),
			true);
	public static long CERTIFICATECODE_COLUMN_BITMASK = 1L;
	public static long DOCUMENTNAME_COLUMN_BITMASK = 2L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 4L;
	public static long MARITIMECODE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ResultCertificate toModel(ResultCertificateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ResultCertificate model = new ResultCertificateImpl();

		model.setId(soapModel.getId());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setMaritimeCode(soapModel.getMaritimeCode());
		model.setCertificateCode(soapModel.getCertificateCode());
		model.setCertificateOrder(soapModel.getCertificateOrder());
		model.setCertificateNo(soapModel.getCertificateNo());
		model.setCertificateIssueDate(soapModel.getCertificateIssueDate());
		model.setCertificateExpiredDate(soapModel.getCertificateExpiredDate());
		model.setExaminationDate(soapModel.getExaminationDate());
		model.setApprovalName(soapModel.getApprovalName());
		model.setIsExamined(soapModel.getIsExamined());
		model.setMandatory(soapModel.getMandatory());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ResultCertificate> toModels(
		ResultCertificateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ResultCertificate> models = new ArrayList<ResultCertificate>(soapModels.length);

		for (ResultCertificateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.ResultCertificate"));

	public ResultCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ResultCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return ResultCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("maritimeCode", getMaritimeCode());
		attributes.put("certificateCode", getCertificateCode());
		attributes.put("certificateOrder", getCertificateOrder());
		attributes.put("certificateNo", getCertificateNo());
		attributes.put("certificateIssueDate", getCertificateIssueDate());
		attributes.put("certificateExpiredDate", getCertificateExpiredDate());
		attributes.put("examinationDate", getExaminationDate());
		attributes.put("approvalName", getApprovalName());
		attributes.put("isExamined", getIsExamined());
		attributes.put("mandatory", getMandatory());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String maritimeCode = (String)attributes.get("maritimeCode");

		if (maritimeCode != null) {
			setMaritimeCode(maritimeCode);
		}

		String certificateCode = (String)attributes.get("certificateCode");

		if (certificateCode != null) {
			setCertificateCode(certificateCode);
		}

		Integer certificateOrder = (Integer)attributes.get("certificateOrder");

		if (certificateOrder != null) {
			setCertificateOrder(certificateOrder);
		}

		String certificateNo = (String)attributes.get("certificateNo");

		if (certificateNo != null) {
			setCertificateNo(certificateNo);
		}

		Date certificateIssueDate = (Date)attributes.get("certificateIssueDate");

		if (certificateIssueDate != null) {
			setCertificateIssueDate(certificateIssueDate);
		}

		Date certificateExpiredDate = (Date)attributes.get(
				"certificateExpiredDate");

		if (certificateExpiredDate != null) {
			setCertificateExpiredDate(certificateExpiredDate);
		}

		Date examinationDate = (Date)attributes.get("examinationDate");

		if (examinationDate != null) {
			setExaminationDate(examinationDate);
		}

		String approvalName = (String)attributes.get("approvalName");

		if (approvalName != null) {
			setApprovalName(approvalName);
		}

		Integer isExamined = (Integer)attributes.get("isExamined");

		if (isExamined != null) {
			setIsExamined(isExamined);
		}

		Integer mandatory = (Integer)attributes.get("mandatory");

		if (mandatory != null) {
			setMandatory(mandatory);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getMaritimeCode() {
		if (_maritimeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritimeCode;
		}
	}

	@Override
	public void setMaritimeCode(String maritimeCode) {
		_columnBitmask |= MARITIMECODE_COLUMN_BITMASK;

		if (_originalMaritimeCode == null) {
			_originalMaritimeCode = _maritimeCode;
		}

		_maritimeCode = maritimeCode;
	}

	public String getOriginalMaritimeCode() {
		return GetterUtil.getString(_originalMaritimeCode);
	}

	@JSON
	@Override
	public String getCertificateCode() {
		if (_certificateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateCode;
		}
	}

	@Override
	public void setCertificateCode(String certificateCode) {
		_columnBitmask |= CERTIFICATECODE_COLUMN_BITMASK;

		if (_originalCertificateCode == null) {
			_originalCertificateCode = _certificateCode;
		}

		_certificateCode = certificateCode;
	}

	public String getOriginalCertificateCode() {
		return GetterUtil.getString(_originalCertificateCode);
	}

	@JSON
	@Override
	public int getCertificateOrder() {
		return _certificateOrder;
	}

	@Override
	public void setCertificateOrder(int certificateOrder) {
		_certificateOrder = certificateOrder;
	}

	@JSON
	@Override
	public String getCertificateNo() {
		if (_certificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNo;
		}
	}

	@Override
	public void setCertificateNo(String certificateNo) {
		_certificateNo = certificateNo;
	}

	@JSON
	@Override
	public Date getCertificateIssueDate() {
		return _certificateIssueDate;
	}

	@Override
	public void setCertificateIssueDate(Date certificateIssueDate) {
		_certificateIssueDate = certificateIssueDate;
	}

	@JSON
	@Override
	public Date getCertificateExpiredDate() {
		return _certificateExpiredDate;
	}

	@Override
	public void setCertificateExpiredDate(Date certificateExpiredDate) {
		_certificateExpiredDate = certificateExpiredDate;
	}

	@JSON
	@Override
	public Date getExaminationDate() {
		return _examinationDate;
	}

	@Override
	public void setExaminationDate(Date examinationDate) {
		_examinationDate = examinationDate;
	}

	@JSON
	@Override
	public String getApprovalName() {
		if (_approvalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvalName;
		}
	}

	@Override
	public void setApprovalName(String approvalName) {
		_approvalName = approvalName;
	}

	@JSON
	@Override
	public int getIsExamined() {
		return _isExamined;
	}

	@Override
	public void setIsExamined(int isExamined) {
		_isExamined = isExamined;
	}

	@JSON
	@Override
	public int getMandatory() {
		return _mandatory;
	}

	@Override
	public void setMandatory(int mandatory) {
		_mandatory = mandatory;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ResultCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ResultCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ResultCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResultCertificateImpl resultCertificateImpl = new ResultCertificateImpl();

		resultCertificateImpl.setId(getId());
		resultCertificateImpl.setDocumentName(getDocumentName());
		resultCertificateImpl.setDocumentYear(getDocumentYear());
		resultCertificateImpl.setMaritimeCode(getMaritimeCode());
		resultCertificateImpl.setCertificateCode(getCertificateCode());
		resultCertificateImpl.setCertificateOrder(getCertificateOrder());
		resultCertificateImpl.setCertificateNo(getCertificateNo());
		resultCertificateImpl.setCertificateIssueDate(getCertificateIssueDate());
		resultCertificateImpl.setCertificateExpiredDate(getCertificateExpiredDate());
		resultCertificateImpl.setExaminationDate(getExaminationDate());
		resultCertificateImpl.setApprovalName(getApprovalName());
		resultCertificateImpl.setIsExamined(getIsExamined());
		resultCertificateImpl.setMandatory(getMandatory());

		resultCertificateImpl.resetOriginalValues();

		return resultCertificateImpl;
	}

	@Override
	public int compareTo(ResultCertificate resultCertificate) {
		int value = 0;

		if (getId() < resultCertificate.getId()) {
			value = -1;
		}
		else if (getId() > resultCertificate.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ResultCertificate)) {
			return false;
		}

		ResultCertificate resultCertificate = (ResultCertificate)obj;

		long primaryKey = resultCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ResultCertificateModelImpl resultCertificateModelImpl = this;

		resultCertificateModelImpl._originalDocumentName = resultCertificateModelImpl._documentName;

		resultCertificateModelImpl._setOriginalDocumentName = false;

		resultCertificateModelImpl._originalDocumentYear = resultCertificateModelImpl._documentYear;

		resultCertificateModelImpl._setOriginalDocumentYear = false;

		resultCertificateModelImpl._originalMaritimeCode = resultCertificateModelImpl._maritimeCode;

		resultCertificateModelImpl._originalCertificateCode = resultCertificateModelImpl._certificateCode;

		resultCertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ResultCertificate> toCacheModel() {
		ResultCertificateCacheModel resultCertificateCacheModel = new ResultCertificateCacheModel();

		resultCertificateCacheModel.id = getId();

		resultCertificateCacheModel.documentName = getDocumentName();

		resultCertificateCacheModel.documentYear = getDocumentYear();

		resultCertificateCacheModel.maritimeCode = getMaritimeCode();

		String maritimeCode = resultCertificateCacheModel.maritimeCode;

		if ((maritimeCode != null) && (maritimeCode.length() == 0)) {
			resultCertificateCacheModel.maritimeCode = null;
		}

		resultCertificateCacheModel.certificateCode = getCertificateCode();

		String certificateCode = resultCertificateCacheModel.certificateCode;

		if ((certificateCode != null) && (certificateCode.length() == 0)) {
			resultCertificateCacheModel.certificateCode = null;
		}

		resultCertificateCacheModel.certificateOrder = getCertificateOrder();

		resultCertificateCacheModel.certificateNo = getCertificateNo();

		String certificateNo = resultCertificateCacheModel.certificateNo;

		if ((certificateNo != null) && (certificateNo.length() == 0)) {
			resultCertificateCacheModel.certificateNo = null;
		}

		Date certificateIssueDate = getCertificateIssueDate();

		if (certificateIssueDate != null) {
			resultCertificateCacheModel.certificateIssueDate = certificateIssueDate.getTime();
		}
		else {
			resultCertificateCacheModel.certificateIssueDate = Long.MIN_VALUE;
		}

		Date certificateExpiredDate = getCertificateExpiredDate();

		if (certificateExpiredDate != null) {
			resultCertificateCacheModel.certificateExpiredDate = certificateExpiredDate.getTime();
		}
		else {
			resultCertificateCacheModel.certificateExpiredDate = Long.MIN_VALUE;
		}

		Date examinationDate = getExaminationDate();

		if (examinationDate != null) {
			resultCertificateCacheModel.examinationDate = examinationDate.getTime();
		}
		else {
			resultCertificateCacheModel.examinationDate = Long.MIN_VALUE;
		}

		resultCertificateCacheModel.approvalName = getApprovalName();

		String approvalName = resultCertificateCacheModel.approvalName;

		if ((approvalName != null) && (approvalName.length() == 0)) {
			resultCertificateCacheModel.approvalName = null;
		}

		resultCertificateCacheModel.isExamined = getIsExamined();

		resultCertificateCacheModel.mandatory = getMandatory();

		return resultCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", maritimeCode=");
		sb.append(getMaritimeCode());
		sb.append(", certificateCode=");
		sb.append(getCertificateCode());
		sb.append(", certificateOrder=");
		sb.append(getCertificateOrder());
		sb.append(", certificateNo=");
		sb.append(getCertificateNo());
		sb.append(", certificateIssueDate=");
		sb.append(getCertificateIssueDate());
		sb.append(", certificateExpiredDate=");
		sb.append(getCertificateExpiredDate());
		sb.append(", examinationDate=");
		sb.append(getExaminationDate());
		sb.append(", approvalName=");
		sb.append(getApprovalName());
		sb.append(", isExamined=");
		sb.append(getIsExamined());
		sb.append(", mandatory=");
		sb.append(getMandatory());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.ResultCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritimeCode</column-name><column-value><![CDATA[");
		sb.append(getMaritimeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateCode</column-name><column-value><![CDATA[");
		sb.append(getCertificateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOrder</column-name><column-value><![CDATA[");
		sb.append(getCertificateOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateIssueDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateExpiredDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateExpiredDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examinationDate</column-name><column-value><![CDATA[");
		sb.append(getExaminationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalName</column-name><column-value><![CDATA[");
		sb.append(getApprovalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isExamined</column-name><column-value><![CDATA[");
		sb.append(getIsExamined());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mandatory</column-name><column-value><![CDATA[");
		sb.append(getMandatory());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ResultCertificate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ResultCertificate.class
		};
	private long _id;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _maritimeCode;
	private String _originalMaritimeCode;
	private String _certificateCode;
	private String _originalCertificateCode;
	private int _certificateOrder;
	private String _certificateNo;
	private Date _certificateIssueDate;
	private Date _certificateExpiredDate;
	private Date _examinationDate;
	private String _approvalName;
	private int _isExamined;
	private int _mandatory;
	private long _columnBitmask;
	private ResultCertificate _escapedModel;
}