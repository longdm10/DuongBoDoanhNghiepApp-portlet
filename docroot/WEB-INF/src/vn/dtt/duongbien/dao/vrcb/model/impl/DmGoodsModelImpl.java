/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.dtt.duongbien.dao.vrcb.model.DmGoods;
import vn.dtt.duongbien.dao.vrcb.model.DmGoodsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmGoods service. Represents a row in the &quot;DM_GOODS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.DmGoodsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGoodsImpl}.
 * </p>
 *
 * @author longdm
 * @see DmGoodsImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.DmGoods
 * @see vn.dtt.duongbien.dao.vrcb.model.DmGoodsModel
 * @generated
 */
public class DmGoodsModelImpl extends BaseModelImpl<DmGoods>
	implements DmGoodsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm goods model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.DmGoods} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GOODS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "GoodsItemCode", Types.VARCHAR },
			{ "GoodsItemName", Types.VARCHAR },
			{ "GoodsItemNameVN", Types.VARCHAR },
			{ "GoodsItemOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GOODS (id INTEGER not null primary key,GoodsItemCode VARCHAR(75) null,GoodsItemName VARCHAR(75) null,GoodsItemNameVN VARCHAR(75) null,GoodsItemOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GOODS";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGoods.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GOODS.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmGoods"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmGoods"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.DmGoods"),
			true);
	public static long GOODSITEMCODE_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.DmGoods"));

	public DmGoodsModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmGoods.class;
	}

	@Override
	public String getModelClassName() {
		return DmGoods.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("goodsItemCode", getGoodsItemCode());
		attributes.put("goodsItemName", getGoodsItemName());
		attributes.put("goodsItemNameVN", getGoodsItemNameVN());
		attributes.put("goodsItemOrder", getGoodsItemOrder());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String goodsItemCode = (String)attributes.get("goodsItemCode");

		if (goodsItemCode != null) {
			setGoodsItemCode(goodsItemCode);
		}

		String goodsItemName = (String)attributes.get("goodsItemName");

		if (goodsItemName != null) {
			setGoodsItemName(goodsItemName);
		}

		String goodsItemNameVN = (String)attributes.get("goodsItemNameVN");

		if (goodsItemNameVN != null) {
			setGoodsItemNameVN(goodsItemNameVN);
		}

		Integer goodsItemOrder = (Integer)attributes.get("goodsItemOrder");

		if (goodsItemOrder != null) {
			setGoodsItemOrder(goodsItemOrder);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getGoodsItemCode() {
		if (_goodsItemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _goodsItemCode;
		}
	}

	@Override
	public void setGoodsItemCode(String goodsItemCode) {
		_columnBitmask |= GOODSITEMCODE_COLUMN_BITMASK;

		if (_originalGoodsItemCode == null) {
			_originalGoodsItemCode = _goodsItemCode;
		}

		_goodsItemCode = goodsItemCode;
	}

	public String getOriginalGoodsItemCode() {
		return GetterUtil.getString(_originalGoodsItemCode);
	}

	@Override
	public String getGoodsItemName() {
		if (_goodsItemName == null) {
			return StringPool.BLANK;
		}
		else {
			return _goodsItemName;
		}
	}

	@Override
	public void setGoodsItemName(String goodsItemName) {
		_goodsItemName = goodsItemName;
	}

	@Override
	public String getGoodsItemNameVN() {
		if (_goodsItemNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _goodsItemNameVN;
		}
	}

	@Override
	public void setGoodsItemNameVN(String goodsItemNameVN) {
		_goodsItemNameVN = goodsItemNameVN;
	}

	@Override
	public int getGoodsItemOrder() {
		return _goodsItemOrder;
	}

	@Override
	public void setGoodsItemOrder(int goodsItemOrder) {
		_goodsItemOrder = goodsItemOrder;
	}

	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmGoods toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmGoods)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmGoodsImpl dmGoodsImpl = new DmGoodsImpl();

		dmGoodsImpl.setId(getId());
		dmGoodsImpl.setGoodsItemCode(getGoodsItemCode());
		dmGoodsImpl.setGoodsItemName(getGoodsItemName());
		dmGoodsImpl.setGoodsItemNameVN(getGoodsItemNameVN());
		dmGoodsImpl.setGoodsItemOrder(getGoodsItemOrder());
		dmGoodsImpl.setIsDelete(getIsDelete());
		dmGoodsImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGoodsImpl.setModifiedDate(getModifiedDate());
		dmGoodsImpl.setRequestedDate(getRequestedDate());
		dmGoodsImpl.setSyncVersion(getSyncVersion());

		dmGoodsImpl.resetOriginalValues();

		return dmGoodsImpl;
	}

	@Override
	public int compareTo(DmGoods dmGoods) {
		int value = 0;

		if (getId() < dmGoods.getId()) {
			value = -1;
		}
		else if (getId() > dmGoods.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmGoods)) {
			return false;
		}

		DmGoods dmGoods = (DmGoods)obj;

		int primaryKey = dmGoods.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmGoodsModelImpl dmGoodsModelImpl = this;

		dmGoodsModelImpl._originalGoodsItemCode = dmGoodsModelImpl._goodsItemCode;

		dmGoodsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmGoods> toCacheModel() {
		DmGoodsCacheModel dmGoodsCacheModel = new DmGoodsCacheModel();

		dmGoodsCacheModel.id = getId();

		dmGoodsCacheModel.goodsItemCode = getGoodsItemCode();

		String goodsItemCode = dmGoodsCacheModel.goodsItemCode;

		if ((goodsItemCode != null) && (goodsItemCode.length() == 0)) {
			dmGoodsCacheModel.goodsItemCode = null;
		}

		dmGoodsCacheModel.goodsItemName = getGoodsItemName();

		String goodsItemName = dmGoodsCacheModel.goodsItemName;

		if ((goodsItemName != null) && (goodsItemName.length() == 0)) {
			dmGoodsCacheModel.goodsItemName = null;
		}

		dmGoodsCacheModel.goodsItemNameVN = getGoodsItemNameVN();

		String goodsItemNameVN = dmGoodsCacheModel.goodsItemNameVN;

		if ((goodsItemNameVN != null) && (goodsItemNameVN.length() == 0)) {
			dmGoodsCacheModel.goodsItemNameVN = null;
		}

		dmGoodsCacheModel.goodsItemOrder = getGoodsItemOrder();

		dmGoodsCacheModel.isDelete = getIsDelete();

		dmGoodsCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGoodsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGoodsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGoodsCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGoodsCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGoodsCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGoodsCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGoodsCacheModel.syncVersion = null;
		}

		return dmGoodsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", goodsItemCode=");
		sb.append(getGoodsItemCode());
		sb.append(", goodsItemName=");
		sb.append(getGoodsItemName());
		sb.append(", goodsItemNameVN=");
		sb.append(getGoodsItemNameVN());
		sb.append(", goodsItemOrder=");
		sb.append(getGoodsItemOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.DmGoods");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsItemCode</column-name><column-value><![CDATA[");
		sb.append(getGoodsItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsItemName</column-name><column-value><![CDATA[");
		sb.append(getGoodsItemName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsItemNameVN</column-name><column-value><![CDATA[");
		sb.append(getGoodsItemNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goodsItemOrder</column-name><column-value><![CDATA[");
		sb.append(getGoodsItemOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGoods.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmGoods.class
		};
	private int _id;
	private String _goodsItemCode;
	private String _originalGoodsItemCode;
	private String _goodsItemName;
	private String _goodsItemNameVN;
	private int _goodsItemOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private DmGoods _escapedModel;
}