/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative;
import vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentativeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmHistoryRepresentative service. Represents a row in the &quot;DM_HISTORY_REPRESENTATIVE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentativeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmHistoryRepresentativeImpl}.
 * </p>
 *
 * @author longdm
 * @see DmHistoryRepresentativeImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative
 * @see vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentativeModel
 * @generated
 */
public class DmHistoryRepresentativeModelImpl extends BaseModelImpl<DmHistoryRepresentative>
	implements DmHistoryRepresentativeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm history representative model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative} interface instead.
	 */
	public static final String TABLE_NAME = "DM_HISTORY_REPRESENTATIVE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "RepCode", Types.VARCHAR },
			{ "RepName", Types.VARCHAR },
			{ "RepNameVN", Types.VARCHAR },
			{ "RepOrder", Types.INTEGER },
			{ "MaritimeCode", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_HISTORY_REPRESENTATIVE (id INTEGER not null primary key,RepCode VARCHAR(75) null,RepName VARCHAR(75) null,RepNameVN VARCHAR(75) null,RepOrder INTEGER,MaritimeCode VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_HISTORY_REPRESENTATIVE";
	public static final String ORDER_BY_JPQL = " ORDER BY dmHistoryRepresentative.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_HISTORY_REPRESENTATIVE.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative"),
			true);
	public static long REPCODE_COLUMN_BITMASK = 1L;
	public static long SYNCVERSION_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative"));

	public DmHistoryRepresentativeModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmHistoryRepresentative.class;
	}

	@Override
	public String getModelClassName() {
		return DmHistoryRepresentative.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("repCode", getRepCode());
		attributes.put("repName", getRepName());
		attributes.put("repNameVN", getRepNameVN());
		attributes.put("repOrder", getRepOrder());
		attributes.put("maritimeCode", getMaritimeCode());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String repCode = (String)attributes.get("repCode");

		if (repCode != null) {
			setRepCode(repCode);
		}

		String repName = (String)attributes.get("repName");

		if (repName != null) {
			setRepName(repName);
		}

		String repNameVN = (String)attributes.get("repNameVN");

		if (repNameVN != null) {
			setRepNameVN(repNameVN);
		}

		Integer repOrder = (Integer)attributes.get("repOrder");

		if (repOrder != null) {
			setRepOrder(repOrder);
		}

		String maritimeCode = (String)attributes.get("maritimeCode");

		if (maritimeCode != null) {
			setMaritimeCode(maritimeCode);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getRepCode() {
		if (_repCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _repCode;
		}
	}

	@Override
	public void setRepCode(String repCode) {
		_columnBitmask |= REPCODE_COLUMN_BITMASK;

		if (_originalRepCode == null) {
			_originalRepCode = _repCode;
		}

		_repCode = repCode;
	}

	public String getOriginalRepCode() {
		return GetterUtil.getString(_originalRepCode);
	}

	@Override
	public String getRepName() {
		if (_repName == null) {
			return StringPool.BLANK;
		}
		else {
			return _repName;
		}
	}

	@Override
	public void setRepName(String repName) {
		_repName = repName;
	}

	@Override
	public String getRepNameVN() {
		if (_repNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _repNameVN;
		}
	}

	@Override
	public void setRepNameVN(String repNameVN) {
		_repNameVN = repNameVN;
	}

	@Override
	public int getRepOrder() {
		return _repOrder;
	}

	@Override
	public void setRepOrder(int repOrder) {
		_repOrder = repOrder;
	}

	@Override
	public String getMaritimeCode() {
		if (_maritimeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritimeCode;
		}
	}

	@Override
	public void setMaritimeCode(String maritimeCode) {
		_maritimeCode = maritimeCode;
	}

	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_columnBitmask |= SYNCVERSION_COLUMN_BITMASK;

		if (_originalSyncVersion == null) {
			_originalSyncVersion = _syncVersion;
		}

		_syncVersion = syncVersion;
	}

	public String getOriginalSyncVersion() {
		return GetterUtil.getString(_originalSyncVersion);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmHistoryRepresentative toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmHistoryRepresentative)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmHistoryRepresentativeImpl dmHistoryRepresentativeImpl = new DmHistoryRepresentativeImpl();

		dmHistoryRepresentativeImpl.setId(getId());
		dmHistoryRepresentativeImpl.setRepCode(getRepCode());
		dmHistoryRepresentativeImpl.setRepName(getRepName());
		dmHistoryRepresentativeImpl.setRepNameVN(getRepNameVN());
		dmHistoryRepresentativeImpl.setRepOrder(getRepOrder());
		dmHistoryRepresentativeImpl.setMaritimeCode(getMaritimeCode());
		dmHistoryRepresentativeImpl.setIsDelete(getIsDelete());
		dmHistoryRepresentativeImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmHistoryRepresentativeImpl.setModifiedDate(getModifiedDate());
		dmHistoryRepresentativeImpl.setRequestedDate(getRequestedDate());
		dmHistoryRepresentativeImpl.setSyncVersion(getSyncVersion());

		dmHistoryRepresentativeImpl.resetOriginalValues();

		return dmHistoryRepresentativeImpl;
	}

	@Override
	public int compareTo(DmHistoryRepresentative dmHistoryRepresentative) {
		int value = 0;

		if (getId() < dmHistoryRepresentative.getId()) {
			value = -1;
		}
		else if (getId() > dmHistoryRepresentative.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmHistoryRepresentative)) {
			return false;
		}

		DmHistoryRepresentative dmHistoryRepresentative = (DmHistoryRepresentative)obj;

		int primaryKey = dmHistoryRepresentative.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmHistoryRepresentativeModelImpl dmHistoryRepresentativeModelImpl = this;

		dmHistoryRepresentativeModelImpl._originalRepCode = dmHistoryRepresentativeModelImpl._repCode;

		dmHistoryRepresentativeModelImpl._originalSyncVersion = dmHistoryRepresentativeModelImpl._syncVersion;

		dmHistoryRepresentativeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmHistoryRepresentative> toCacheModel() {
		DmHistoryRepresentativeCacheModel dmHistoryRepresentativeCacheModel = new DmHistoryRepresentativeCacheModel();

		dmHistoryRepresentativeCacheModel.id = getId();

		dmHistoryRepresentativeCacheModel.repCode = getRepCode();

		String repCode = dmHistoryRepresentativeCacheModel.repCode;

		if ((repCode != null) && (repCode.length() == 0)) {
			dmHistoryRepresentativeCacheModel.repCode = null;
		}

		dmHistoryRepresentativeCacheModel.repName = getRepName();

		String repName = dmHistoryRepresentativeCacheModel.repName;

		if ((repName != null) && (repName.length() == 0)) {
			dmHistoryRepresentativeCacheModel.repName = null;
		}

		dmHistoryRepresentativeCacheModel.repNameVN = getRepNameVN();

		String repNameVN = dmHistoryRepresentativeCacheModel.repNameVN;

		if ((repNameVN != null) && (repNameVN.length() == 0)) {
			dmHistoryRepresentativeCacheModel.repNameVN = null;
		}

		dmHistoryRepresentativeCacheModel.repOrder = getRepOrder();

		dmHistoryRepresentativeCacheModel.maritimeCode = getMaritimeCode();

		String maritimeCode = dmHistoryRepresentativeCacheModel.maritimeCode;

		if ((maritimeCode != null) && (maritimeCode.length() == 0)) {
			dmHistoryRepresentativeCacheModel.maritimeCode = null;
		}

		dmHistoryRepresentativeCacheModel.isDelete = getIsDelete();

		dmHistoryRepresentativeCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmHistoryRepresentativeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmHistoryRepresentativeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmHistoryRepresentativeCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmHistoryRepresentativeCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmHistoryRepresentativeCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmHistoryRepresentativeCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmHistoryRepresentativeCacheModel.syncVersion = null;
		}

		return dmHistoryRepresentativeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", repCode=");
		sb.append(getRepCode());
		sb.append(", repName=");
		sb.append(getRepName());
		sb.append(", repNameVN=");
		sb.append(getRepNameVN());
		sb.append(", repOrder=");
		sb.append(getRepOrder());
		sb.append(", maritimeCode=");
		sb.append(getMaritimeCode());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.DmHistoryRepresentative");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repCode</column-name><column-value><![CDATA[");
		sb.append(getRepCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repName</column-name><column-value><![CDATA[");
		sb.append(getRepName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repNameVN</column-name><column-value><![CDATA[");
		sb.append(getRepNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repOrder</column-name><column-value><![CDATA[");
		sb.append(getRepOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritimeCode</column-name><column-value><![CDATA[");
		sb.append(getMaritimeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmHistoryRepresentative.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmHistoryRepresentative.class
		};
	private int _id;
	private String _repCode;
	private String _originalRepCode;
	private String _repName;
	private String _repNameVN;
	private int _repOrder;
	private String _maritimeCode;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private String _originalSyncVersion;
	private long _columnBitmask;
	private DmHistoryRepresentative _escapedModel;
}