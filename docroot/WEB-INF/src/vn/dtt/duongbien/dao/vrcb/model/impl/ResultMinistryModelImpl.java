/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.ResultMinistry;
import vn.dtt.duongbien.dao.vrcb.model.ResultMinistryModel;
import vn.dtt.duongbien.dao.vrcb.model.ResultMinistrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ResultMinistry service. Represents a row in the &quot;RESULT_MINISTRY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.ResultMinistryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ResultMinistryImpl}.
 * </p>
 *
 * @author longdm
 * @see ResultMinistryImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.ResultMinistry
 * @see vn.dtt.duongbien.dao.vrcb.model.ResultMinistryModel
 * @generated
 */
@JSON(strict = true)
public class ResultMinistryModelImpl extends BaseModelImpl<ResultMinistry>
	implements ResultMinistryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a result ministry model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.ResultMinistry} interface instead.
	 */
	public static final String TABLE_NAME = "RESULT_MINISTRY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.INTEGER },
			{ "DocumentYear", Types.INTEGER },
			{ "MinistryCode", Types.VARCHAR },
			{ "Organization", Types.VARCHAR },
			{ "Division", Types.VARCHAR },
			{ "OfficerName", Types.VARCHAR },
			{ "LatestDate", Types.TIMESTAMP },
			{ "BusinessTypeCode", Types.INTEGER },
			{ "Response", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table RESULT_MINISTRY (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName INTEGER,DocumentYear INTEGER,MinistryCode VARCHAR(75) null,Organization VARCHAR(75) null,Division VARCHAR(75) null,OfficerName VARCHAR(75) null,LatestDate DATE null,BusinessTypeCode INTEGER,Response VARCHAR(75) null,Remarks VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RESULT_MINISTRY";
	public static final String ORDER_BY_JPQL = " ORDER BY resultMinistry.id DESC";
	public static final String ORDER_BY_SQL = " ORDER BY RESULT_MINISTRY.ID DESC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultMinistry"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultMinistry"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.ResultMinistry"),
			true);
	public static long BUSINESSTYPECODE_COLUMN_BITMASK = 1L;
	public static long DOCUMENTNAME_COLUMN_BITMASK = 2L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 4L;
	public static long MINISTRYCODE_COLUMN_BITMASK = 8L;
	public static long REQUESTCODE_COLUMN_BITMASK = 16L;
	public static long ID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ResultMinistry toModel(ResultMinistrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ResultMinistry model = new ResultMinistryImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setMinistryCode(soapModel.getMinistryCode());
		model.setOrganization(soapModel.getOrganization());
		model.setDivision(soapModel.getDivision());
		model.setOfficerName(soapModel.getOfficerName());
		model.setLatestDate(soapModel.getLatestDate());
		model.setBusinessTypeCode(soapModel.getBusinessTypeCode());
		model.setResponse(soapModel.getResponse());
		model.setRemarks(soapModel.getRemarks());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ResultMinistry> toModels(ResultMinistrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ResultMinistry> models = new ArrayList<ResultMinistry>(soapModels.length);

		for (ResultMinistrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.ResultMinistry"));

	public ResultMinistryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ResultMinistry.class;
	}

	@Override
	public String getModelClassName() {
		return ResultMinistry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("requestState", getRequestState());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("ministryCode", getMinistryCode());
		attributes.put("organization", getOrganization());
		attributes.put("division", getDivision());
		attributes.put("officerName", getOfficerName());
		attributes.put("latestDate", getLatestDate());
		attributes.put("businessTypeCode", getBusinessTypeCode());
		attributes.put("response", getResponse());
		attributes.put("remarks", getRemarks());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		Integer documentName = (Integer)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String ministryCode = (String)attributes.get("ministryCode");

		if (ministryCode != null) {
			setMinistryCode(ministryCode);
		}

		String organization = (String)attributes.get("organization");

		if (organization != null) {
			setOrganization(organization);
		}

		String division = (String)attributes.get("division");

		if (division != null) {
			setDivision(division);
		}

		String officerName = (String)attributes.get("officerName");

		if (officerName != null) {
			setOfficerName(officerName);
		}

		Date latestDate = (Date)attributes.get("latestDate");

		if (latestDate != null) {
			setLatestDate(latestDate);
		}

		Integer businessTypeCode = (Integer)attributes.get("businessTypeCode");

		if (businessTypeCode != null) {
			setBusinessTypeCode(businessTypeCode);
		}

		String response = (String)attributes.get("response");

		if (response != null) {
			setResponse(response);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_requestState = requestState;
	}

	@JSON
	@Override
	public int getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(int documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public int getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getMinistryCode() {
		if (_ministryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ministryCode;
		}
	}

	@Override
	public void setMinistryCode(String ministryCode) {
		_columnBitmask |= MINISTRYCODE_COLUMN_BITMASK;

		if (_originalMinistryCode == null) {
			_originalMinistryCode = _ministryCode;
		}

		_ministryCode = ministryCode;
	}

	public String getOriginalMinistryCode() {
		return GetterUtil.getString(_originalMinistryCode);
	}

	@JSON
	@Override
	public String getOrganization() {
		if (_organization == null) {
			return StringPool.BLANK;
		}
		else {
			return _organization;
		}
	}

	@Override
	public void setOrganization(String organization) {
		_organization = organization;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return StringPool.BLANK;
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		_division = division;
	}

	@JSON
	@Override
	public String getOfficerName() {
		if (_officerName == null) {
			return StringPool.BLANK;
		}
		else {
			return _officerName;
		}
	}

	@Override
	public void setOfficerName(String officerName) {
		_officerName = officerName;
	}

	@JSON
	@Override
	public Date getLatestDate() {
		return _latestDate;
	}

	@Override
	public void setLatestDate(Date latestDate) {
		_latestDate = latestDate;
	}

	@JSON
	@Override
	public int getBusinessTypeCode() {
		return _businessTypeCode;
	}

	@Override
	public void setBusinessTypeCode(int businessTypeCode) {
		_columnBitmask |= BUSINESSTYPECODE_COLUMN_BITMASK;

		if (!_setOriginalBusinessTypeCode) {
			_setOriginalBusinessTypeCode = true;

			_originalBusinessTypeCode = _businessTypeCode;
		}

		_businessTypeCode = businessTypeCode;
	}

	public int getOriginalBusinessTypeCode() {
		return _originalBusinessTypeCode;
	}

	@JSON
	@Override
	public String getResponse() {
		if (_response == null) {
			return StringPool.BLANK;
		}
		else {
			return _response;
		}
	}

	@Override
	public void setResponse(String response) {
		_response = response;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ResultMinistry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ResultMinistry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ResultMinistry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ResultMinistryImpl resultMinistryImpl = new ResultMinistryImpl();

		resultMinistryImpl.setId(getId());
		resultMinistryImpl.setRequestCode(getRequestCode());
		resultMinistryImpl.setRequestState(getRequestState());
		resultMinistryImpl.setDocumentName(getDocumentName());
		resultMinistryImpl.setDocumentYear(getDocumentYear());
		resultMinistryImpl.setMinistryCode(getMinistryCode());
		resultMinistryImpl.setOrganization(getOrganization());
		resultMinistryImpl.setDivision(getDivision());
		resultMinistryImpl.setOfficerName(getOfficerName());
		resultMinistryImpl.setLatestDate(getLatestDate());
		resultMinistryImpl.setBusinessTypeCode(getBusinessTypeCode());
		resultMinistryImpl.setResponse(getResponse());
		resultMinistryImpl.setRemarks(getRemarks());

		resultMinistryImpl.resetOriginalValues();

		return resultMinistryImpl;
	}

	@Override
	public int compareTo(ResultMinistry resultMinistry) {
		int value = 0;

		if (getId() < resultMinistry.getId()) {
			value = -1;
		}
		else if (getId() > resultMinistry.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ResultMinistry)) {
			return false;
		}

		ResultMinistry resultMinistry = (ResultMinistry)obj;

		long primaryKey = resultMinistry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ResultMinistryModelImpl resultMinistryModelImpl = this;

		resultMinistryModelImpl._originalRequestCode = resultMinistryModelImpl._requestCode;

		resultMinistryModelImpl._originalDocumentName = resultMinistryModelImpl._documentName;

		resultMinistryModelImpl._setOriginalDocumentName = false;

		resultMinistryModelImpl._originalDocumentYear = resultMinistryModelImpl._documentYear;

		resultMinistryModelImpl._setOriginalDocumentYear = false;

		resultMinistryModelImpl._originalMinistryCode = resultMinistryModelImpl._ministryCode;

		resultMinistryModelImpl._originalBusinessTypeCode = resultMinistryModelImpl._businessTypeCode;

		resultMinistryModelImpl._setOriginalBusinessTypeCode = false;

		resultMinistryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ResultMinistry> toCacheModel() {
		ResultMinistryCacheModel resultMinistryCacheModel = new ResultMinistryCacheModel();

		resultMinistryCacheModel.id = getId();

		resultMinistryCacheModel.requestCode = getRequestCode();

		String requestCode = resultMinistryCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			resultMinistryCacheModel.requestCode = null;
		}

		resultMinistryCacheModel.requestState = getRequestState();

		resultMinistryCacheModel.documentName = getDocumentName();

		resultMinistryCacheModel.documentYear = getDocumentYear();

		resultMinistryCacheModel.ministryCode = getMinistryCode();

		String ministryCode = resultMinistryCacheModel.ministryCode;

		if ((ministryCode != null) && (ministryCode.length() == 0)) {
			resultMinistryCacheModel.ministryCode = null;
		}

		resultMinistryCacheModel.organization = getOrganization();

		String organization = resultMinistryCacheModel.organization;

		if ((organization != null) && (organization.length() == 0)) {
			resultMinistryCacheModel.organization = null;
		}

		resultMinistryCacheModel.division = getDivision();

		String division = resultMinistryCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			resultMinistryCacheModel.division = null;
		}

		resultMinistryCacheModel.officerName = getOfficerName();

		String officerName = resultMinistryCacheModel.officerName;

		if ((officerName != null) && (officerName.length() == 0)) {
			resultMinistryCacheModel.officerName = null;
		}

		Date latestDate = getLatestDate();

		if (latestDate != null) {
			resultMinistryCacheModel.latestDate = latestDate.getTime();
		}
		else {
			resultMinistryCacheModel.latestDate = Long.MIN_VALUE;
		}

		resultMinistryCacheModel.businessTypeCode = getBusinessTypeCode();

		resultMinistryCacheModel.response = getResponse();

		String response = resultMinistryCacheModel.response;

		if ((response != null) && (response.length() == 0)) {
			resultMinistryCacheModel.response = null;
		}

		resultMinistryCacheModel.remarks = getRemarks();

		String remarks = resultMinistryCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			resultMinistryCacheModel.remarks = null;
		}

		return resultMinistryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", ministryCode=");
		sb.append(getMinistryCode());
		sb.append(", organization=");
		sb.append(getOrganization());
		sb.append(", division=");
		sb.append(getDivision());
		sb.append(", officerName=");
		sb.append(getOfficerName());
		sb.append(", latestDate=");
		sb.append(getLatestDate());
		sb.append(", businessTypeCode=");
		sb.append(getBusinessTypeCode());
		sb.append(", response=");
		sb.append(getResponse());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.ResultMinistry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ministryCode</column-name><column-value><![CDATA[");
		sb.append(getMinistryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organization</column-name><column-value><![CDATA[");
		sb.append(getOrganization());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>division</column-name><column-value><![CDATA[");
		sb.append(getDivision());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>officerName</column-name><column-value><![CDATA[");
		sb.append(getOfficerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latestDate</column-name><column-value><![CDATA[");
		sb.append(getLatestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessTypeCode</column-name><column-value><![CDATA[");
		sb.append(getBusinessTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>response</column-name><column-value><![CDATA[");
		sb.append(getResponse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ResultMinistry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ResultMinistry.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _documentName;
	private int _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _ministryCode;
	private String _originalMinistryCode;
	private String _organization;
	private String _division;
	private String _officerName;
	private Date _latestDate;
	private int _businessTypeCode;
	private int _originalBusinessTypeCode;
	private boolean _setOriginalBusinessTypeCode;
	private String _response;
	private String _remarks;
	private long _columnBitmask;
	private ResultMinistry _escapedModel;
}