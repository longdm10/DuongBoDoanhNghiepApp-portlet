/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour;
import vn.dtt.duongbien.dao.vrcb.model.DmPortHarbourModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmPortHarbour service. Represents a row in the &quot;DM_PORT_HARBOUR&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.DmPortHarbourModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmPortHarbourImpl}.
 * </p>
 *
 * @author longdm
 * @see DmPortHarbourImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour
 * @see vn.dtt.duongbien.dao.vrcb.model.DmPortHarbourModel
 * @generated
 */
public class DmPortHarbourModelImpl extends BaseModelImpl<DmPortHarbour>
	implements DmPortHarbourModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm port harbour model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour} interface instead.
	 */
	public static final String TABLE_NAME = "DM_PORT_HARBOUR";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "PortHarbourName", Types.VARCHAR },
			{ "PortHarbourNameVN", Types.VARCHAR },
			{ "PortHarbourType", Types.INTEGER },
			{ "PortCode", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "Note", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_PORT_HARBOUR (id INTEGER not null primary key,PortHarbourCode VARCHAR(75) null,PortHarbourName VARCHAR(75) null,PortHarbourNameVN VARCHAR(75) null,PortHarbourType INTEGER,PortCode VARCHAR(75) null,PortRegionCode VARCHAR(75) null,Note VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_PORT_HARBOUR";
	public static final String ORDER_BY_JPQL = " ORDER BY dmPortHarbour.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_PORT_HARBOUR.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour"),
			true);
	public static long PORTHARBOURCODE_COLUMN_BITMASK = 1L;
	public static long PORTREGIONCODE_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour"));

	public DmPortHarbourModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmPortHarbour.class;
	}

	@Override
	public String getModelClassName() {
		return DmPortHarbour.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("portHarbourCode", getPortHarbourCode());
		attributes.put("portHarbourName", getPortHarbourName());
		attributes.put("portHarbourNameVN", getPortHarbourNameVN());
		attributes.put("portHarbourType", getPortHarbourType());
		attributes.put("portCode", getPortCode());
		attributes.put("portRegionCode", getPortRegionCode());
		attributes.put("note", getNote());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String portHarbourCode = (String)attributes.get("portHarbourCode");

		if (portHarbourCode != null) {
			setPortHarbourCode(portHarbourCode);
		}

		String portHarbourName = (String)attributes.get("portHarbourName");

		if (portHarbourName != null) {
			setPortHarbourName(portHarbourName);
		}

		String portHarbourNameVN = (String)attributes.get("portHarbourNameVN");

		if (portHarbourNameVN != null) {
			setPortHarbourNameVN(portHarbourNameVN);
		}

		Integer portHarbourType = (Integer)attributes.get("portHarbourType");

		if (portHarbourType != null) {
			setPortHarbourType(portHarbourType);
		}

		String portCode = (String)attributes.get("portCode");

		if (portCode != null) {
			setPortCode(portCode);
		}

		String portRegionCode = (String)attributes.get("portRegionCode");

		if (portRegionCode != null) {
			setPortRegionCode(portRegionCode);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	@Override
	public void setPortHarbourCode(String portHarbourCode) {
		_columnBitmask |= PORTHARBOURCODE_COLUMN_BITMASK;

		if (_originalPortHarbourCode == null) {
			_originalPortHarbourCode = _portHarbourCode;
		}

		_portHarbourCode = portHarbourCode;
	}

	public String getOriginalPortHarbourCode() {
		return GetterUtil.getString(_originalPortHarbourCode);
	}

	@Override
	public String getPortHarbourName() {
		if (_portHarbourName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourName;
		}
	}

	@Override
	public void setPortHarbourName(String portHarbourName) {
		_portHarbourName = portHarbourName;
	}

	@Override
	public String getPortHarbourNameVN() {
		if (_portHarbourNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourNameVN;
		}
	}

	@Override
	public void setPortHarbourNameVN(String portHarbourNameVN) {
		_portHarbourNameVN = portHarbourNameVN;
	}

	@Override
	public int getPortHarbourType() {
		return _portHarbourType;
	}

	@Override
	public void setPortHarbourType(int portHarbourType) {
		_portHarbourType = portHarbourType;
	}

	@Override
	public String getPortCode() {
		if (_portCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portCode;
		}
	}

	@Override
	public void setPortCode(String portCode) {
		_portCode = portCode;
	}

	@Override
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	@Override
	public void setPortRegionCode(String portRegionCode) {
		_columnBitmask |= PORTREGIONCODE_COLUMN_BITMASK;

		if (_originalPortRegionCode == null) {
			_originalPortRegionCode = _portRegionCode;
		}

		_portRegionCode = portRegionCode;
	}

	public String getOriginalPortRegionCode() {
		return GetterUtil.getString(_originalPortRegionCode);
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmPortHarbour toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmPortHarbour)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmPortHarbourImpl dmPortHarbourImpl = new DmPortHarbourImpl();

		dmPortHarbourImpl.setId(getId());
		dmPortHarbourImpl.setPortHarbourCode(getPortHarbourCode());
		dmPortHarbourImpl.setPortHarbourName(getPortHarbourName());
		dmPortHarbourImpl.setPortHarbourNameVN(getPortHarbourNameVN());
		dmPortHarbourImpl.setPortHarbourType(getPortHarbourType());
		dmPortHarbourImpl.setPortCode(getPortCode());
		dmPortHarbourImpl.setPortRegionCode(getPortRegionCode());
		dmPortHarbourImpl.setNote(getNote());
		dmPortHarbourImpl.setIsDelete(getIsDelete());
		dmPortHarbourImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmPortHarbourImpl.setModifiedDate(getModifiedDate());
		dmPortHarbourImpl.setRequestedDate(getRequestedDate());
		dmPortHarbourImpl.setSyncVersion(getSyncVersion());

		dmPortHarbourImpl.resetOriginalValues();

		return dmPortHarbourImpl;
	}

	@Override
	public int compareTo(DmPortHarbour dmPortHarbour) {
		int value = 0;

		if (getId() < dmPortHarbour.getId()) {
			value = -1;
		}
		else if (getId() > dmPortHarbour.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmPortHarbour)) {
			return false;
		}

		DmPortHarbour dmPortHarbour = (DmPortHarbour)obj;

		int primaryKey = dmPortHarbour.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmPortHarbourModelImpl dmPortHarbourModelImpl = this;

		dmPortHarbourModelImpl._originalPortHarbourCode = dmPortHarbourModelImpl._portHarbourCode;

		dmPortHarbourModelImpl._originalPortRegionCode = dmPortHarbourModelImpl._portRegionCode;

		dmPortHarbourModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmPortHarbour> toCacheModel() {
		DmPortHarbourCacheModel dmPortHarbourCacheModel = new DmPortHarbourCacheModel();

		dmPortHarbourCacheModel.id = getId();

		dmPortHarbourCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = dmPortHarbourCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			dmPortHarbourCacheModel.portHarbourCode = null;
		}

		dmPortHarbourCacheModel.portHarbourName = getPortHarbourName();

		String portHarbourName = dmPortHarbourCacheModel.portHarbourName;

		if ((portHarbourName != null) && (portHarbourName.length() == 0)) {
			dmPortHarbourCacheModel.portHarbourName = null;
		}

		dmPortHarbourCacheModel.portHarbourNameVN = getPortHarbourNameVN();

		String portHarbourNameVN = dmPortHarbourCacheModel.portHarbourNameVN;

		if ((portHarbourNameVN != null) && (portHarbourNameVN.length() == 0)) {
			dmPortHarbourCacheModel.portHarbourNameVN = null;
		}

		dmPortHarbourCacheModel.portHarbourType = getPortHarbourType();

		dmPortHarbourCacheModel.portCode = getPortCode();

		String portCode = dmPortHarbourCacheModel.portCode;

		if ((portCode != null) && (portCode.length() == 0)) {
			dmPortHarbourCacheModel.portCode = null;
		}

		dmPortHarbourCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = dmPortHarbourCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			dmPortHarbourCacheModel.portRegionCode = null;
		}

		dmPortHarbourCacheModel.note = getNote();

		String note = dmPortHarbourCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			dmPortHarbourCacheModel.note = null;
		}

		dmPortHarbourCacheModel.isDelete = getIsDelete();

		dmPortHarbourCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmPortHarbourCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmPortHarbourCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmPortHarbourCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmPortHarbourCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmPortHarbourCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmPortHarbourCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmPortHarbourCacheModel.syncVersion = null;
		}

		return dmPortHarbourCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", portHarbourName=");
		sb.append(getPortHarbourName());
		sb.append(", portHarbourNameVN=");
		sb.append(getPortHarbourNameVN());
		sb.append(", portHarbourType=");
		sb.append(getPortHarbourType());
		sb.append(", portCode=");
		sb.append(getPortCode());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.DmPortHarbour");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourName</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourNameVN</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourType</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portCode</column-name><column-value><![CDATA[");
		sb.append(getPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmPortHarbour.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmPortHarbour.class
		};
	private int _id;
	private String _portHarbourCode;
	private String _originalPortHarbourCode;
	private String _portHarbourName;
	private String _portHarbourNameVN;
	private int _portHarbourType;
	private String _portCode;
	private String _portRegionCode;
	private String _originalPortRegionCode;
	private String _note;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private DmPortHarbour _escapedModel;
}