/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder;
import vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrderModel;
import vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IssueShiftingOrder service. Represents a row in the &quot;ISSUE_SHIFTING_ORDER&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssueShiftingOrderImpl}.
 * </p>
 *
 * @author longdm
 * @see IssueShiftingOrderImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder
 * @see vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrderModel
 * @generated
 */
@JSON(strict = true)
public class IssueShiftingOrderModelImpl extends BaseModelImpl<IssueShiftingOrder>
	implements IssueShiftingOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue shifting order model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder} interface instead.
	 */
	public static final String TABLE_NAME = "ISSUE_SHIFTING_ORDER";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "NumberShiftingOrder", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "PortofAuthority", Types.VARCHAR },
			{ "NameOfShip", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "AnchoringPortCode", Types.VARCHAR },
			{ "AnchoringPortWharfCode", Types.VARCHAR },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "ShiftingPortWharfCode", Types.VARCHAR },
			{ "ShiftingDate", Types.TIMESTAMP },
			{ "ReasonToShift", Types.VARCHAR },
			{ "IssueDate", Types.TIMESTAMP },
			{ "DirectorOfMaritime", Types.VARCHAR },
			{ "CertificateNo", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "VersionNo", Types.VARCHAR },
			{ "IsApproval", Types.INTEGER },
			{ "ApprovalDate", Types.TIMESTAMP },
			{ "ApprovalName", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "IsCancel", Types.INTEGER },
			{ "CancelDate", Types.TIMESTAMP },
			{ "CancelName", Types.VARCHAR },
			{ "CancelNote", Types.VARCHAR },
			{ "Representative", Types.VARCHAR },
			{ "DigitalAttachedFile", Types.BIGINT },
			{ "SignDate", Types.TIMESTAMP },
			{ "SignName", Types.VARCHAR },
			{ "SignTitle", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "StampStatus", Types.INTEGER },
			{ "AttachedFile", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ISSUE_SHIFTING_ORDER (ID LONG not null primary key,RequestCode VARCHAR(75) null,NumberShiftingOrder VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,PortofAuthority VARCHAR(75) null,NameOfShip VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,AnchoringPortCode VARCHAR(75) null,AnchoringPortWharfCode VARCHAR(75) null,PortHarbourCode VARCHAR(75) null,ShiftingPortWharfCode VARCHAR(75) null,ShiftingDate DATE null,ReasonToShift VARCHAR(75) null,IssueDate DATE null,DirectorOfMaritime VARCHAR(75) null,CertificateNo VARCHAR(75) null,RequestState INTEGER,VersionNo VARCHAR(75) null,IsApproval INTEGER,ApprovalDate DATE null,ApprovalName VARCHAR(75) null,Remarks VARCHAR(75) null,IsCancel INTEGER,CancelDate DATE null,CancelName VARCHAR(75) null,CancelNote VARCHAR(75) null,Representative VARCHAR(75) null,DigitalAttachedFile LONG,SignDate DATE null,SignName VARCHAR(75) null,SignTitle VARCHAR(75) null,SignPlace VARCHAR(75) null,StampStatus INTEGER,AttachedFile LONG)";
	public static final String TABLE_SQL_DROP = "drop table ISSUE_SHIFTING_ORDER";
	public static final String ORDER_BY_JPQL = " ORDER BY issueShiftingOrder.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ISSUE_SHIFTING_ORDER.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long VERSIONNO_COLUMN_BITMASK = 16L;
	public static long ID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssueShiftingOrder toModel(IssueShiftingOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IssueShiftingOrder model = new IssueShiftingOrderImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setNumberShiftingOrder(soapModel.getNumberShiftingOrder());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setPortofAuthority(soapModel.getPortofAuthority());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setAnchoringPortCode(soapModel.getAnchoringPortCode());
		model.setAnchoringPortWharfCode(soapModel.getAnchoringPortWharfCode());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());
		model.setShiftingPortWharfCode(soapModel.getShiftingPortWharfCode());
		model.setShiftingDate(soapModel.getShiftingDate());
		model.setReasonToShift(soapModel.getReasonToShift());
		model.setIssueDate(soapModel.getIssueDate());
		model.setDirectorOfMaritime(soapModel.getDirectorOfMaritime());
		model.setCertificateNo(soapModel.getCertificateNo());
		model.setRequestState(soapModel.getRequestState());
		model.setVersionNo(soapModel.getVersionNo());
		model.setIsApproval(soapModel.getIsApproval());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setApprovalName(soapModel.getApprovalName());
		model.setRemarks(soapModel.getRemarks());
		model.setIsCancel(soapModel.getIsCancel());
		model.setCancelDate(soapModel.getCancelDate());
		model.setCancelName(soapModel.getCancelName());
		model.setCancelNote(soapModel.getCancelNote());
		model.setRepresentative(soapModel.getRepresentative());
		model.setDigitalAttachedFile(soapModel.getDigitalAttachedFile());
		model.setSignDate(soapModel.getSignDate());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setStampStatus(soapModel.getStampStatus());
		model.setAttachedFile(soapModel.getAttachedFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssueShiftingOrder> toModels(
		IssueShiftingOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IssueShiftingOrder> models = new ArrayList<IssueShiftingOrder>(soapModels.length);

		for (IssueShiftingOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder"));

	public IssueShiftingOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IssueShiftingOrder.class;
	}

	@Override
	public String getModelClassName() {
		return IssueShiftingOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("numberShiftingOrder", getNumberShiftingOrder());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("portofAuthority", getPortofAuthority());
		attributes.put("nameOfShip", getNameOfShip());
		attributes.put("flagStateOfShip", getFlagStateOfShip());
		attributes.put("anchoringPortCode", getAnchoringPortCode());
		attributes.put("anchoringPortWharfCode", getAnchoringPortWharfCode());
		attributes.put("portHarbourCode", getPortHarbourCode());
		attributes.put("shiftingPortWharfCode", getShiftingPortWharfCode());
		attributes.put("shiftingDate", getShiftingDate());
		attributes.put("reasonToShift", getReasonToShift());
		attributes.put("issueDate", getIssueDate());
		attributes.put("directorOfMaritime", getDirectorOfMaritime());
		attributes.put("certificateNo", getCertificateNo());
		attributes.put("requestState", getRequestState());
		attributes.put("versionNo", getVersionNo());
		attributes.put("isApproval", getIsApproval());
		attributes.put("approvalDate", getApprovalDate());
		attributes.put("approvalName", getApprovalName());
		attributes.put("remarks", getRemarks());
		attributes.put("isCancel", getIsCancel());
		attributes.put("cancelDate", getCancelDate());
		attributes.put("cancelName", getCancelName());
		attributes.put("cancelNote", getCancelNote());
		attributes.put("representative", getRepresentative());
		attributes.put("digitalAttachedFile", getDigitalAttachedFile());
		attributes.put("signDate", getSignDate());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("stampStatus", getStampStatus());
		attributes.put("attachedFile", getAttachedFile());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		String numberShiftingOrder = (String)attributes.get(
				"numberShiftingOrder");

		if (numberShiftingOrder != null) {
			setNumberShiftingOrder(numberShiftingOrder);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String portofAuthority = (String)attributes.get("portofAuthority");

		if (portofAuthority != null) {
			setPortofAuthority(portofAuthority);
		}

		String nameOfShip = (String)attributes.get("nameOfShip");

		if (nameOfShip != null) {
			setNameOfShip(nameOfShip);
		}

		String flagStateOfShip = (String)attributes.get("flagStateOfShip");

		if (flagStateOfShip != null) {
			setFlagStateOfShip(flagStateOfShip);
		}

		String anchoringPortCode = (String)attributes.get("anchoringPortCode");

		if (anchoringPortCode != null) {
			setAnchoringPortCode(anchoringPortCode);
		}

		String anchoringPortWharfCode = (String)attributes.get(
				"anchoringPortWharfCode");

		if (anchoringPortWharfCode != null) {
			setAnchoringPortWharfCode(anchoringPortWharfCode);
		}

		String portHarbourCode = (String)attributes.get("portHarbourCode");

		if (portHarbourCode != null) {
			setPortHarbourCode(portHarbourCode);
		}

		String shiftingPortWharfCode = (String)attributes.get(
				"shiftingPortWharfCode");

		if (shiftingPortWharfCode != null) {
			setShiftingPortWharfCode(shiftingPortWharfCode);
		}

		Date shiftingDate = (Date)attributes.get("shiftingDate");

		if (shiftingDate != null) {
			setShiftingDate(shiftingDate);
		}

		String reasonToShift = (String)attributes.get("reasonToShift");

		if (reasonToShift != null) {
			setReasonToShift(reasonToShift);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		String directorOfMaritime = (String)attributes.get("directorOfMaritime");

		if (directorOfMaritime != null) {
			setDirectorOfMaritime(directorOfMaritime);
		}

		String certificateNo = (String)attributes.get("certificateNo");

		if (certificateNo != null) {
			setCertificateNo(certificateNo);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		String versionNo = (String)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer isApproval = (Integer)attributes.get("isApproval");

		if (isApproval != null) {
			setIsApproval(isApproval);
		}

		Date approvalDate = (Date)attributes.get("approvalDate");

		if (approvalDate != null) {
			setApprovalDate(approvalDate);
		}

		String approvalName = (String)attributes.get("approvalName");

		if (approvalName != null) {
			setApprovalName(approvalName);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Integer isCancel = (Integer)attributes.get("isCancel");

		if (isCancel != null) {
			setIsCancel(isCancel);
		}

		Date cancelDate = (Date)attributes.get("cancelDate");

		if (cancelDate != null) {
			setCancelDate(cancelDate);
		}

		String cancelName = (String)attributes.get("cancelName");

		if (cancelName != null) {
			setCancelName(cancelName);
		}

		String cancelNote = (String)attributes.get("cancelNote");

		if (cancelNote != null) {
			setCancelNote(cancelNote);
		}

		String representative = (String)attributes.get("representative");

		if (representative != null) {
			setRepresentative(representative);
		}

		Long digitalAttachedFile = (Long)attributes.get("digitalAttachedFile");

		if (digitalAttachedFile != null) {
			setDigitalAttachedFile(digitalAttachedFile);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Integer stampStatus = (Integer)attributes.get("stampStatus");

		if (stampStatus != null) {
			setStampStatus(stampStatus);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public String getNumberShiftingOrder() {
		if (_numberShiftingOrder == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberShiftingOrder;
		}
	}

	@Override
	public void setNumberShiftingOrder(String numberShiftingOrder) {
		_numberShiftingOrder = numberShiftingOrder;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getPortofAuthority() {
		if (_portofAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _portofAuthority;
		}
	}

	@Override
	public void setPortofAuthority(String portofAuthority) {
		_portofAuthority = portofAuthority;
	}

	@JSON
	@Override
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	@Override
	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	@Override
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	@Override
	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	@Override
	public String getAnchoringPortCode() {
		if (_anchoringPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _anchoringPortCode;
		}
	}

	@Override
	public void setAnchoringPortCode(String anchoringPortCode) {
		_anchoringPortCode = anchoringPortCode;
	}

	@JSON
	@Override
	public String getAnchoringPortWharfCode() {
		if (_anchoringPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _anchoringPortWharfCode;
		}
	}

	@Override
	public void setAnchoringPortWharfCode(String anchoringPortWharfCode) {
		_anchoringPortWharfCode = anchoringPortWharfCode;
	}

	@JSON
	@Override
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	@Override
	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	@JSON
	@Override
	public String getShiftingPortWharfCode() {
		if (_shiftingPortWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shiftingPortWharfCode;
		}
	}

	@Override
	public void setShiftingPortWharfCode(String shiftingPortWharfCode) {
		_shiftingPortWharfCode = shiftingPortWharfCode;
	}

	@JSON
	@Override
	public Date getShiftingDate() {
		return _shiftingDate;
	}

	@Override
	public void setShiftingDate(Date shiftingDate) {
		_shiftingDate = shiftingDate;
	}

	@JSON
	@Override
	public String getReasonToShift() {
		if (_reasonToShift == null) {
			return StringPool.BLANK;
		}
		else {
			return _reasonToShift;
		}
	}

	@Override
	public void setReasonToShift(String reasonToShift) {
		_reasonToShift = reasonToShift;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	@Override
	public String getDirectorOfMaritime() {
		if (_directorOfMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _directorOfMaritime;
		}
	}

	@Override
	public void setDirectorOfMaritime(String directorOfMaritime) {
		_directorOfMaritime = directorOfMaritime;
	}

	@JSON
	@Override
	public String getCertificateNo() {
		if (_certificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNo;
		}
	}

	@Override
	public void setCertificateNo(String certificateNo) {
		_certificateNo = certificateNo;
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	@Override
	public String getVersionNo() {
		if (_versionNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionNo;
		}
	}

	@Override
	public void setVersionNo(String versionNo) {
		_columnBitmask |= VERSIONNO_COLUMN_BITMASK;

		if (_originalVersionNo == null) {
			_originalVersionNo = _versionNo;
		}

		_versionNo = versionNo;
	}

	public String getOriginalVersionNo() {
		return GetterUtil.getString(_originalVersionNo);
	}

	@JSON
	@Override
	public int getIsApproval() {
		return _isApproval;
	}

	@Override
	public void setIsApproval(int isApproval) {
		_isApproval = isApproval;
	}

	@JSON
	@Override
	public Date getApprovalDate() {
		return _approvalDate;
	}

	@Override
	public void setApprovalDate(Date approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	@Override
	public String getApprovalName() {
		if (_approvalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvalName;
		}
	}

	@Override
	public void setApprovalName(String approvalName) {
		_approvalName = approvalName;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public int getIsCancel() {
		return _isCancel;
	}

	@Override
	public void setIsCancel(int isCancel) {
		_isCancel = isCancel;
	}

	@JSON
	@Override
	public Date getCancelDate() {
		return _cancelDate;
	}

	@Override
	public void setCancelDate(Date cancelDate) {
		_cancelDate = cancelDate;
	}

	@JSON
	@Override
	public String getCancelName() {
		if (_cancelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelName;
		}
	}

	@Override
	public void setCancelName(String cancelName) {
		_cancelName = cancelName;
	}

	@JSON
	@Override
	public String getCancelNote() {
		if (_cancelNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelNote;
		}
	}

	@Override
	public void setCancelNote(String cancelNote) {
		_cancelNote = cancelNote;
	}

	@JSON
	@Override
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	@Override
	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	@Override
	public long getDigitalAttachedFile() {
		return _digitalAttachedFile;
	}

	@Override
	public void setDigitalAttachedFile(long digitalAttachedFile) {
		_digitalAttachedFile = digitalAttachedFile;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public int getStampStatus() {
		return _stampStatus;
	}

	@Override
	public void setStampStatus(int stampStatus) {
		_stampStatus = stampStatus;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			IssueShiftingOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IssueShiftingOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IssueShiftingOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IssueShiftingOrderImpl issueShiftingOrderImpl = new IssueShiftingOrderImpl();

		issueShiftingOrderImpl.setId(getId());
		issueShiftingOrderImpl.setRequestCode(getRequestCode());
		issueShiftingOrderImpl.setNumberShiftingOrder(getNumberShiftingOrder());
		issueShiftingOrderImpl.setDocumentName(getDocumentName());
		issueShiftingOrderImpl.setDocumentYear(getDocumentYear());
		issueShiftingOrderImpl.setPortofAuthority(getPortofAuthority());
		issueShiftingOrderImpl.setNameOfShip(getNameOfShip());
		issueShiftingOrderImpl.setFlagStateOfShip(getFlagStateOfShip());
		issueShiftingOrderImpl.setAnchoringPortCode(getAnchoringPortCode());
		issueShiftingOrderImpl.setAnchoringPortWharfCode(getAnchoringPortWharfCode());
		issueShiftingOrderImpl.setPortHarbourCode(getPortHarbourCode());
		issueShiftingOrderImpl.setShiftingPortWharfCode(getShiftingPortWharfCode());
		issueShiftingOrderImpl.setShiftingDate(getShiftingDate());
		issueShiftingOrderImpl.setReasonToShift(getReasonToShift());
		issueShiftingOrderImpl.setIssueDate(getIssueDate());
		issueShiftingOrderImpl.setDirectorOfMaritime(getDirectorOfMaritime());
		issueShiftingOrderImpl.setCertificateNo(getCertificateNo());
		issueShiftingOrderImpl.setRequestState(getRequestState());
		issueShiftingOrderImpl.setVersionNo(getVersionNo());
		issueShiftingOrderImpl.setIsApproval(getIsApproval());
		issueShiftingOrderImpl.setApprovalDate(getApprovalDate());
		issueShiftingOrderImpl.setApprovalName(getApprovalName());
		issueShiftingOrderImpl.setRemarks(getRemarks());
		issueShiftingOrderImpl.setIsCancel(getIsCancel());
		issueShiftingOrderImpl.setCancelDate(getCancelDate());
		issueShiftingOrderImpl.setCancelName(getCancelName());
		issueShiftingOrderImpl.setCancelNote(getCancelNote());
		issueShiftingOrderImpl.setRepresentative(getRepresentative());
		issueShiftingOrderImpl.setDigitalAttachedFile(getDigitalAttachedFile());
		issueShiftingOrderImpl.setSignDate(getSignDate());
		issueShiftingOrderImpl.setSignName(getSignName());
		issueShiftingOrderImpl.setSignTitle(getSignTitle());
		issueShiftingOrderImpl.setSignPlace(getSignPlace());
		issueShiftingOrderImpl.setStampStatus(getStampStatus());
		issueShiftingOrderImpl.setAttachedFile(getAttachedFile());

		issueShiftingOrderImpl.resetOriginalValues();

		return issueShiftingOrderImpl;
	}

	@Override
	public int compareTo(IssueShiftingOrder issueShiftingOrder) {
		int value = 0;

		if (getId() < issueShiftingOrder.getId()) {
			value = -1;
		}
		else if (getId() > issueShiftingOrder.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IssueShiftingOrder)) {
			return false;
		}

		IssueShiftingOrder issueShiftingOrder = (IssueShiftingOrder)obj;

		long primaryKey = issueShiftingOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssueShiftingOrderModelImpl issueShiftingOrderModelImpl = this;

		issueShiftingOrderModelImpl._originalRequestCode = issueShiftingOrderModelImpl._requestCode;

		issueShiftingOrderModelImpl._originalDocumentName = issueShiftingOrderModelImpl._documentName;

		issueShiftingOrderModelImpl._setOriginalDocumentName = false;

		issueShiftingOrderModelImpl._originalDocumentYear = issueShiftingOrderModelImpl._documentYear;

		issueShiftingOrderModelImpl._setOriginalDocumentYear = false;

		issueShiftingOrderModelImpl._originalRequestState = issueShiftingOrderModelImpl._requestState;

		issueShiftingOrderModelImpl._setOriginalRequestState = false;

		issueShiftingOrderModelImpl._originalVersionNo = issueShiftingOrderModelImpl._versionNo;

		issueShiftingOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssueShiftingOrder> toCacheModel() {
		IssueShiftingOrderCacheModel issueShiftingOrderCacheModel = new IssueShiftingOrderCacheModel();

		issueShiftingOrderCacheModel.id = getId();

		issueShiftingOrderCacheModel.requestCode = getRequestCode();

		String requestCode = issueShiftingOrderCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			issueShiftingOrderCacheModel.requestCode = null;
		}

		issueShiftingOrderCacheModel.numberShiftingOrder = getNumberShiftingOrder();

		String numberShiftingOrder = issueShiftingOrderCacheModel.numberShiftingOrder;

		if ((numberShiftingOrder != null) &&
				(numberShiftingOrder.length() == 0)) {
			issueShiftingOrderCacheModel.numberShiftingOrder = null;
		}

		issueShiftingOrderCacheModel.documentName = getDocumentName();

		issueShiftingOrderCacheModel.documentYear = getDocumentYear();

		issueShiftingOrderCacheModel.portofAuthority = getPortofAuthority();

		String portofAuthority = issueShiftingOrderCacheModel.portofAuthority;

		if ((portofAuthority != null) && (portofAuthority.length() == 0)) {
			issueShiftingOrderCacheModel.portofAuthority = null;
		}

		issueShiftingOrderCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = issueShiftingOrderCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			issueShiftingOrderCacheModel.nameOfShip = null;
		}

		issueShiftingOrderCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = issueShiftingOrderCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			issueShiftingOrderCacheModel.flagStateOfShip = null;
		}

		issueShiftingOrderCacheModel.anchoringPortCode = getAnchoringPortCode();

		String anchoringPortCode = issueShiftingOrderCacheModel.anchoringPortCode;

		if ((anchoringPortCode != null) && (anchoringPortCode.length() == 0)) {
			issueShiftingOrderCacheModel.anchoringPortCode = null;
		}

		issueShiftingOrderCacheModel.anchoringPortWharfCode = getAnchoringPortWharfCode();

		String anchoringPortWharfCode = issueShiftingOrderCacheModel.anchoringPortWharfCode;

		if ((anchoringPortWharfCode != null) &&
				(anchoringPortWharfCode.length() == 0)) {
			issueShiftingOrderCacheModel.anchoringPortWharfCode = null;
		}

		issueShiftingOrderCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = issueShiftingOrderCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			issueShiftingOrderCacheModel.portHarbourCode = null;
		}

		issueShiftingOrderCacheModel.shiftingPortWharfCode = getShiftingPortWharfCode();

		String shiftingPortWharfCode = issueShiftingOrderCacheModel.shiftingPortWharfCode;

		if ((shiftingPortWharfCode != null) &&
				(shiftingPortWharfCode.length() == 0)) {
			issueShiftingOrderCacheModel.shiftingPortWharfCode = null;
		}

		Date shiftingDate = getShiftingDate();

		if (shiftingDate != null) {
			issueShiftingOrderCacheModel.shiftingDate = shiftingDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.shiftingDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.reasonToShift = getReasonToShift();

		String reasonToShift = issueShiftingOrderCacheModel.reasonToShift;

		if ((reasonToShift != null) && (reasonToShift.length() == 0)) {
			issueShiftingOrderCacheModel.reasonToShift = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			issueShiftingOrderCacheModel.issueDate = issueDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.issueDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.directorOfMaritime = getDirectorOfMaritime();

		String directorOfMaritime = issueShiftingOrderCacheModel.directorOfMaritime;

		if ((directorOfMaritime != null) && (directorOfMaritime.length() == 0)) {
			issueShiftingOrderCacheModel.directorOfMaritime = null;
		}

		issueShiftingOrderCacheModel.certificateNo = getCertificateNo();

		String certificateNo = issueShiftingOrderCacheModel.certificateNo;

		if ((certificateNo != null) && (certificateNo.length() == 0)) {
			issueShiftingOrderCacheModel.certificateNo = null;
		}

		issueShiftingOrderCacheModel.requestState = getRequestState();

		issueShiftingOrderCacheModel.versionNo = getVersionNo();

		String versionNo = issueShiftingOrderCacheModel.versionNo;

		if ((versionNo != null) && (versionNo.length() == 0)) {
			issueShiftingOrderCacheModel.versionNo = null;
		}

		issueShiftingOrderCacheModel.isApproval = getIsApproval();

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			issueShiftingOrderCacheModel.approvalDate = approvalDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.approvalDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.approvalName = getApprovalName();

		String approvalName = issueShiftingOrderCacheModel.approvalName;

		if ((approvalName != null) && (approvalName.length() == 0)) {
			issueShiftingOrderCacheModel.approvalName = null;
		}

		issueShiftingOrderCacheModel.remarks = getRemarks();

		String remarks = issueShiftingOrderCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			issueShiftingOrderCacheModel.remarks = null;
		}

		issueShiftingOrderCacheModel.isCancel = getIsCancel();

		Date cancelDate = getCancelDate();

		if (cancelDate != null) {
			issueShiftingOrderCacheModel.cancelDate = cancelDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.cancelDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.cancelName = getCancelName();

		String cancelName = issueShiftingOrderCacheModel.cancelName;

		if ((cancelName != null) && (cancelName.length() == 0)) {
			issueShiftingOrderCacheModel.cancelName = null;
		}

		issueShiftingOrderCacheModel.cancelNote = getCancelNote();

		String cancelNote = issueShiftingOrderCacheModel.cancelNote;

		if ((cancelNote != null) && (cancelNote.length() == 0)) {
			issueShiftingOrderCacheModel.cancelNote = null;
		}

		issueShiftingOrderCacheModel.representative = getRepresentative();

		String representative = issueShiftingOrderCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			issueShiftingOrderCacheModel.representative = null;
		}

		issueShiftingOrderCacheModel.digitalAttachedFile = getDigitalAttachedFile();

		Date signDate = getSignDate();

		if (signDate != null) {
			issueShiftingOrderCacheModel.signDate = signDate.getTime();
		}
		else {
			issueShiftingOrderCacheModel.signDate = Long.MIN_VALUE;
		}

		issueShiftingOrderCacheModel.signName = getSignName();

		String signName = issueShiftingOrderCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			issueShiftingOrderCacheModel.signName = null;
		}

		issueShiftingOrderCacheModel.signTitle = getSignTitle();

		String signTitle = issueShiftingOrderCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			issueShiftingOrderCacheModel.signTitle = null;
		}

		issueShiftingOrderCacheModel.signPlace = getSignPlace();

		String signPlace = issueShiftingOrderCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			issueShiftingOrderCacheModel.signPlace = null;
		}

		issueShiftingOrderCacheModel.stampStatus = getStampStatus();

		issueShiftingOrderCacheModel.attachedFile = getAttachedFile();

		return issueShiftingOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(71);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", numberShiftingOrder=");
		sb.append(getNumberShiftingOrder());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", portofAuthority=");
		sb.append(getPortofAuthority());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", anchoringPortCode=");
		sb.append(getAnchoringPortCode());
		sb.append(", anchoringPortWharfCode=");
		sb.append(getAnchoringPortWharfCode());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", shiftingPortWharfCode=");
		sb.append(getShiftingPortWharfCode());
		sb.append(", shiftingDate=");
		sb.append(getShiftingDate());
		sb.append(", reasonToShift=");
		sb.append(getReasonToShift());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", directorOfMaritime=");
		sb.append(getDirectorOfMaritime());
		sb.append(", certificateNo=");
		sb.append(getCertificateNo());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", isApproval=");
		sb.append(getIsApproval());
		sb.append(", approvalDate=");
		sb.append(getApprovalDate());
		sb.append(", approvalName=");
		sb.append(getApprovalName());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", isCancel=");
		sb.append(getIsCancel());
		sb.append(", cancelDate=");
		sb.append(getCancelDate());
		sb.append(", cancelName=");
		sb.append(getCancelName());
		sb.append(", cancelNote=");
		sb.append(getCancelNote());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", digitalAttachedFile=");
		sb.append(getDigitalAttachedFile());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(109);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.IssueShiftingOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberShiftingOrder</column-name><column-value><![CDATA[");
		sb.append(getNumberShiftingOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portofAuthority</column-name><column-value><![CDATA[");
		sb.append(getPortofAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anchoringPortCode</column-name><column-value><![CDATA[");
		sb.append(getAnchoringPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>anchoringPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getAnchoringPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftingPortWharfCode</column-name><column-value><![CDATA[");
		sb.append(getShiftingPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftingDate</column-name><column-value><![CDATA[");
		sb.append(getShiftingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reasonToShift</column-name><column-value><![CDATA[");
		sb.append(getReasonToShift());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directorOfMaritime</column-name><column-value><![CDATA[");
		sb.append(getDirectorOfMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproval</column-name><column-value><![CDATA[");
		sb.append(getIsApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalDate</column-name><column-value><![CDATA[");
		sb.append(getApprovalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalName</column-name><column-value><![CDATA[");
		sb.append(getApprovalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCancel</column-name><column-value><![CDATA[");
		sb.append(getIsCancel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelDate</column-name><column-value><![CDATA[");
		sb.append(getCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelName</column-name><column-value><![CDATA[");
		sb.append(getCancelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelNote</column-name><column-value><![CDATA[");
		sb.append(getCancelNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>digitalAttachedFile</column-name><column-value><![CDATA[");
		sb.append(getDigitalAttachedFile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssueShiftingOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			IssueShiftingOrder.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _numberShiftingOrder;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _portofAuthority;
	private String _nameOfShip;
	private String _flagStateOfShip;
	private String _anchoringPortCode;
	private String _anchoringPortWharfCode;
	private String _portHarbourCode;
	private String _shiftingPortWharfCode;
	private Date _shiftingDate;
	private String _reasonToShift;
	private Date _issueDate;
	private String _directorOfMaritime;
	private String _certificateNo;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private String _versionNo;
	private String _originalVersionNo;
	private int _isApproval;
	private Date _approvalDate;
	private String _approvalName;
	private String _remarks;
	private int _isCancel;
	private Date _cancelDate;
	private String _cancelName;
	private String _cancelNote;
	private String _representative;
	private long _digitalAttachedFile;
	private Date _signDate;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private int _stampStatus;
	private long _attachedFile;
	private long _columnBitmask;
	private IssueShiftingOrder _escapedModel;
}