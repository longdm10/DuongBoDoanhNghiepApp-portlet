/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems;
import vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItemsModel;
import vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItemsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TempShipStoresItems service. Represents a row in the &quot;TEMP_SHIP_STORES_ITEMS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItemsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempShipStoresItemsImpl}.
 * </p>
 *
 * @author longdm
 * @see TempShipStoresItemsImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems
 * @see vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItemsModel
 * @generated
 */
@JSON(strict = true)
public class TempShipStoresItemsModelImpl extends BaseModelImpl<TempShipStoresItems>
	implements TempShipStoresItemsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp ship stores items model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_SHIP_STORES_ITEMS";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "ShipsStoreItemCode", Types.VARCHAR },
			{ "NameOfArticle", Types.VARCHAR },
			{ "Quantity", Types.VARCHAR },
			{ "QuantityUnit", Types.VARCHAR },
			{ "LocationOnBoat", Types.VARCHAR },
			{ "UseInBoat", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_SHIP_STORES_ITEMS (ID LONG not null primary key,RequestCode VARCHAR(75) null,ShipsStoreItemCode VARCHAR(75) null,NameOfArticle VARCHAR(75) null,Quantity VARCHAR(75) null,QuantityUnit VARCHAR(75) null,LocationOnBoat VARCHAR(75) null,UseInBoat INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_SHIP_STORES_ITEMS";
	public static final String ORDER_BY_JPQL = " ORDER BY tempShipStoresItems.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_SHIP_STORES_ITEMS.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems"),
			true);
	public static long REQUESTCODE_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempShipStoresItems toModel(TempShipStoresItemsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TempShipStoresItems model = new TempShipStoresItemsImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setShipsstoreItemCode(soapModel.getShipsstoreItemCode());
		model.setNameOfArticle(soapModel.getNameOfArticle());
		model.setQuantity(soapModel.getQuantity());
		model.setQuantityUnit(soapModel.getQuantityUnit());
		model.setLocationOnBoat(soapModel.getLocationOnBoat());
		model.setUseInBoat(soapModel.getUseInBoat());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempShipStoresItems> toModels(
		TempShipStoresItemsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TempShipStoresItems> models = new ArrayList<TempShipStoresItems>(soapModels.length);

		for (TempShipStoresItemsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems"));

	public TempShipStoresItemsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TempShipStoresItems.class;
	}

	@Override
	public String getModelClassName() {
		return TempShipStoresItems.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("shipsstoreItemCode", getShipsstoreItemCode());
		attributes.put("nameOfArticle", getNameOfArticle());
		attributes.put("quantity", getQuantity());
		attributes.put("quantityUnit", getQuantityUnit());
		attributes.put("locationOnBoat", getLocationOnBoat());
		attributes.put("useInBoat", getUseInBoat());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		String shipsstoreItemCode = (String)attributes.get("shipsstoreItemCode");

		if (shipsstoreItemCode != null) {
			setShipsstoreItemCode(shipsstoreItemCode);
		}

		String nameOfArticle = (String)attributes.get("nameOfArticle");

		if (nameOfArticle != null) {
			setNameOfArticle(nameOfArticle);
		}

		String quantity = (String)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		String quantityUnit = (String)attributes.get("quantityUnit");

		if (quantityUnit != null) {
			setQuantityUnit(quantityUnit);
		}

		String locationOnBoat = (String)attributes.get("locationOnBoat");

		if (locationOnBoat != null) {
			setLocationOnBoat(locationOnBoat);
		}

		Integer useInBoat = (Integer)attributes.get("useInBoat");

		if (useInBoat != null) {
			setUseInBoat(useInBoat);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public String getShipsstoreItemCode() {
		if (_shipsstoreItemCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipsstoreItemCode;
		}
	}

	@Override
	public void setShipsstoreItemCode(String shipsstoreItemCode) {
		_shipsstoreItemCode = shipsstoreItemCode;
	}

	@JSON
	@Override
	public String getNameOfArticle() {
		if (_nameOfArticle == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfArticle;
		}
	}

	@Override
	public void setNameOfArticle(String nameOfArticle) {
		_nameOfArticle = nameOfArticle;
	}

	@JSON
	@Override
	public String getQuantity() {
		if (_quantity == null) {
			return StringPool.BLANK;
		}
		else {
			return _quantity;
		}
	}

	@Override
	public void setQuantity(String quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public String getQuantityUnit() {
		if (_quantityUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _quantityUnit;
		}
	}

	@Override
	public void setQuantityUnit(String quantityUnit) {
		_quantityUnit = quantityUnit;
	}

	@JSON
	@Override
	public String getLocationOnBoat() {
		if (_locationOnBoat == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationOnBoat;
		}
	}

	@Override
	public void setLocationOnBoat(String locationOnBoat) {
		_locationOnBoat = locationOnBoat;
	}

	@JSON
	@Override
	public int getUseInBoat() {
		return _useInBoat;
	}

	@Override
	public void setUseInBoat(int useInBoat) {
		_useInBoat = useInBoat;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TempShipStoresItems.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TempShipStoresItems toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TempShipStoresItems)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TempShipStoresItemsImpl tempShipStoresItemsImpl = new TempShipStoresItemsImpl();

		tempShipStoresItemsImpl.setId(getId());
		tempShipStoresItemsImpl.setRequestCode(getRequestCode());
		tempShipStoresItemsImpl.setShipsstoreItemCode(getShipsstoreItemCode());
		tempShipStoresItemsImpl.setNameOfArticle(getNameOfArticle());
		tempShipStoresItemsImpl.setQuantity(getQuantity());
		tempShipStoresItemsImpl.setQuantityUnit(getQuantityUnit());
		tempShipStoresItemsImpl.setLocationOnBoat(getLocationOnBoat());
		tempShipStoresItemsImpl.setUseInBoat(getUseInBoat());

		tempShipStoresItemsImpl.resetOriginalValues();

		return tempShipStoresItemsImpl;
	}

	@Override
	public int compareTo(TempShipStoresItems tempShipStoresItems) {
		int value = 0;

		if (getId() < tempShipStoresItems.getId()) {
			value = -1;
		}
		else if (getId() > tempShipStoresItems.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TempShipStoresItems)) {
			return false;
		}

		TempShipStoresItems tempShipStoresItems = (TempShipStoresItems)obj;

		long primaryKey = tempShipStoresItems.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempShipStoresItemsModelImpl tempShipStoresItemsModelImpl = this;

		tempShipStoresItemsModelImpl._originalRequestCode = tempShipStoresItemsModelImpl._requestCode;

		tempShipStoresItemsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempShipStoresItems> toCacheModel() {
		TempShipStoresItemsCacheModel tempShipStoresItemsCacheModel = new TempShipStoresItemsCacheModel();

		tempShipStoresItemsCacheModel.id = getId();

		tempShipStoresItemsCacheModel.requestCode = getRequestCode();

		String requestCode = tempShipStoresItemsCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempShipStoresItemsCacheModel.requestCode = null;
		}

		tempShipStoresItemsCacheModel.shipsstoreItemCode = getShipsstoreItemCode();

		String shipsstoreItemCode = tempShipStoresItemsCacheModel.shipsstoreItemCode;

		if ((shipsstoreItemCode != null) && (shipsstoreItemCode.length() == 0)) {
			tempShipStoresItemsCacheModel.shipsstoreItemCode = null;
		}

		tempShipStoresItemsCacheModel.nameOfArticle = getNameOfArticle();

		String nameOfArticle = tempShipStoresItemsCacheModel.nameOfArticle;

		if ((nameOfArticle != null) && (nameOfArticle.length() == 0)) {
			tempShipStoresItemsCacheModel.nameOfArticle = null;
		}

		tempShipStoresItemsCacheModel.quantity = getQuantity();

		String quantity = tempShipStoresItemsCacheModel.quantity;

		if ((quantity != null) && (quantity.length() == 0)) {
			tempShipStoresItemsCacheModel.quantity = null;
		}

		tempShipStoresItemsCacheModel.quantityUnit = getQuantityUnit();

		String quantityUnit = tempShipStoresItemsCacheModel.quantityUnit;

		if ((quantityUnit != null) && (quantityUnit.length() == 0)) {
			tempShipStoresItemsCacheModel.quantityUnit = null;
		}

		tempShipStoresItemsCacheModel.locationOnBoat = getLocationOnBoat();

		String locationOnBoat = tempShipStoresItemsCacheModel.locationOnBoat;

		if ((locationOnBoat != null) && (locationOnBoat.length() == 0)) {
			tempShipStoresItemsCacheModel.locationOnBoat = null;
		}

		tempShipStoresItemsCacheModel.useInBoat = getUseInBoat();

		return tempShipStoresItemsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", shipsstoreItemCode=");
		sb.append(getShipsstoreItemCode());
		sb.append(", nameOfArticle=");
		sb.append(getNameOfArticle());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", quantityUnit=");
		sb.append(getQuantityUnit());
		sb.append(", locationOnBoat=");
		sb.append(getLocationOnBoat());
		sb.append(", useInBoat=");
		sb.append(getUseInBoat());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.TempShipStoresItems");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipsstoreItemCode</column-name><column-value><![CDATA[");
		sb.append(getShipsstoreItemCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfArticle</column-name><column-value><![CDATA[");
		sb.append(getNameOfArticle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantityUnit</column-name><column-value><![CDATA[");
		sb.append(getQuantityUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationOnBoat</column-name><column-value><![CDATA[");
		sb.append(getLocationOnBoat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useInBoat</column-name><column-value><![CDATA[");
		sb.append(getUseInBoat());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempShipStoresItems.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TempShipStoresItems.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _shipsstoreItemCode;
	private String _nameOfArticle;
	private String _quantity;
	private String _quantityUnit;
	private String _locationOnBoat;
	private int _useInBoat;
	private long _columnBitmask;
	private TempShipStoresItems _escapedModel;
}