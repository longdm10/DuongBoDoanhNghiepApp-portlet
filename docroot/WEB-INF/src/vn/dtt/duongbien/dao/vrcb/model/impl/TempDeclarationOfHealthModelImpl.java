/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth;
import vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealthModel;
import vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealthSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TempDeclarationOfHealth service. Represents a row in the &quot;TEMP_DECLARATION_OF_HEALTH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealthModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempDeclarationOfHealthImpl}.
 * </p>
 *
 * @author longdm
 * @see TempDeclarationOfHealthImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth
 * @see vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealthModel
 * @generated
 */
@JSON(strict = true)
public class TempDeclarationOfHealthModelImpl extends BaseModelImpl<TempDeclarationOfHealth>
	implements TempDeclarationOfHealthModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp declaration of health model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_DECLARATION_OF_HEALTH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "UserCreated", Types.VARCHAR },
			{ "SubmittedPortCode", Types.VARCHAR },
			{ "DateSubmitted", Types.TIMESTAMP },
			{ "NameOfShip", Types.VARCHAR },
			{ "Registration", Types.VARCHAR },
			{ "IMONumber", Types.VARCHAR },
			{ "ArrivingFrom", Types.VARCHAR },
			{ "SailingTo", Types.VARCHAR },
			{ "Nationality", Types.VARCHAR },
			{ "MasterName", Types.VARCHAR },
			{ "GrossTonnage", Types.DOUBLE },
			{ "GrossTonnageUnit", Types.VARCHAR },
			{ "Tonnage", Types.DOUBLE },
			{ "TonnageUnit", Types.VARCHAR },
			{ "CertificateCarried", Types.INTEGER },
			{ "IssuedAt", Types.VARCHAR },
			{ "IssueDate", Types.TIMESTAMP },
			{ "ReInspectionRequired", Types.INTEGER },
			{ "IsShipVisitedWHO", Types.INTEGER },
			{ "VisitedWHOPortCode", Types.VARCHAR },
			{ "DateOfVisitedWHO", Types.TIMESTAMP },
			{ "ListPortName", Types.VARCHAR },
			{ "DoctorName", Types.VARCHAR },
			{ "DoctorSignDate", Types.TIMESTAMP },
			{ "SignPlace", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "MasterSigned", Types.INTEGER },
			{ "MasterSignedImage", Types.INTEGER },
			{ "AttachedFile", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_DECLARATION_OF_HEALTH (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName LONG,DocumentYear INTEGER,UserCreated VARCHAR(75) null,SubmittedPortCode VARCHAR(75) null,DateSubmitted DATE null,NameOfShip VARCHAR(75) null,Registration VARCHAR(75) null,IMONumber VARCHAR(75) null,ArrivingFrom VARCHAR(75) null,SailingTo VARCHAR(75) null,Nationality VARCHAR(75) null,MasterName VARCHAR(75) null,GrossTonnage DOUBLE,GrossTonnageUnit VARCHAR(75) null,Tonnage DOUBLE,TonnageUnit VARCHAR(75) null,CertificateCarried INTEGER,IssuedAt VARCHAR(75) null,IssueDate DATE null,ReInspectionRequired INTEGER,IsShipVisitedWHO INTEGER,VisitedWHOPortCode VARCHAR(75) null,DateOfVisitedWHO DATE null,ListPortName VARCHAR(75) null,DoctorName VARCHAR(75) null,DoctorSignDate DATE null,SignPlace VARCHAR(75) null,SignDate DATE null,MasterSigned INTEGER,MasterSignedImage INTEGER,AttachedFile LONG)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_DECLARATION_OF_HEALTH";
	public static final String ORDER_BY_JPQL = " ORDER BY tempDeclarationOfHealth.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_DECLARATION_OF_HEALTH.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempDeclarationOfHealth toModel(
		TempDeclarationOfHealthSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TempDeclarationOfHealth model = new TempDeclarationOfHealthImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setUserCreated(soapModel.getUserCreated());
		model.setSubmittedPortCode(soapModel.getSubmittedPortCode());
		model.setDateSubmitted(soapModel.getDateSubmitted());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setRegistration(soapModel.getRegistration());
		model.setImoNumber(soapModel.getImoNumber());
		model.setArrivingFrom(soapModel.getArrivingFrom());
		model.setSailingTo(soapModel.getSailingTo());
		model.setNationality(soapModel.getNationality());
		model.setMasterName(soapModel.getMasterName());
		model.setGrossTonnage(soapModel.getGrossTonnage());
		model.setGrossTonnageUnit(soapModel.getGrossTonnageUnit());
		model.setTonnage(soapModel.getTonnage());
		model.setTonnageUnit(soapModel.getTonnageUnit());
		model.setCertificatecarried(soapModel.getCertificatecarried());
		model.setIssuedAt(soapModel.getIssuedAt());
		model.setIssueDate(soapModel.getIssueDate());
		model.setReInspectionrequired(soapModel.getReInspectionrequired());
		model.setIsShipVisitedWHO(soapModel.getIsShipVisitedWHO());
		model.setVisitedWHOPortCode(soapModel.getVisitedWHOPortCode());
		model.setDateOfVisitedWHO(soapModel.getDateOfVisitedWHO());
		model.setListPortName(soapModel.getListPortName());
		model.setDoctorName(soapModel.getDoctorName());
		model.setDoctorSigndate(soapModel.getDoctorSigndate());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setMasterSigned(soapModel.getMasterSigned());
		model.setMasterSignedImage(soapModel.getMasterSignedImage());
		model.setAttachedFile(soapModel.getAttachedFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempDeclarationOfHealth> toModels(
		TempDeclarationOfHealthSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TempDeclarationOfHealth> models = new ArrayList<TempDeclarationOfHealth>(soapModels.length);

		for (TempDeclarationOfHealthSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth"));

	public TempDeclarationOfHealthModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TempDeclarationOfHealth.class;
	}

	@Override
	public String getModelClassName() {
		return TempDeclarationOfHealth.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("requestState", getRequestState());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("userCreated", getUserCreated());
		attributes.put("submittedPortCode", getSubmittedPortCode());
		attributes.put("dateSubmitted", getDateSubmitted());
		attributes.put("nameOfShip", getNameOfShip());
		attributes.put("registration", getRegistration());
		attributes.put("imoNumber", getImoNumber());
		attributes.put("arrivingFrom", getArrivingFrom());
		attributes.put("sailingTo", getSailingTo());
		attributes.put("nationality", getNationality());
		attributes.put("masterName", getMasterName());
		attributes.put("grossTonnage", getGrossTonnage());
		attributes.put("grossTonnageUnit", getGrossTonnageUnit());
		attributes.put("tonnage", getTonnage());
		attributes.put("tonnageUnit", getTonnageUnit());
		attributes.put("certificatecarried", getCertificatecarried());
		attributes.put("issuedAt", getIssuedAt());
		attributes.put("issueDate", getIssueDate());
		attributes.put("reInspectionrequired", getReInspectionrequired());
		attributes.put("isShipVisitedWHO", getIsShipVisitedWHO());
		attributes.put("visitedWHOPortCode", getVisitedWHOPortCode());
		attributes.put("dateOfVisitedWHO", getDateOfVisitedWHO());
		attributes.put("listPortName", getListPortName());
		attributes.put("doctorName", getDoctorName());
		attributes.put("doctorSigndate", getDoctorSigndate());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("masterSigned", getMasterSigned());
		attributes.put("masterSignedImage", getMasterSignedImage());
		attributes.put("attachedFile", getAttachedFile());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String userCreated = (String)attributes.get("userCreated");

		if (userCreated != null) {
			setUserCreated(userCreated);
		}

		String submittedPortCode = (String)attributes.get("submittedPortCode");

		if (submittedPortCode != null) {
			setSubmittedPortCode(submittedPortCode);
		}

		Date dateSubmitted = (Date)attributes.get("dateSubmitted");

		if (dateSubmitted != null) {
			setDateSubmitted(dateSubmitted);
		}

		String nameOfShip = (String)attributes.get("nameOfShip");

		if (nameOfShip != null) {
			setNameOfShip(nameOfShip);
		}

		String registration = (String)attributes.get("registration");

		if (registration != null) {
			setRegistration(registration);
		}

		String imoNumber = (String)attributes.get("imoNumber");

		if (imoNumber != null) {
			setImoNumber(imoNumber);
		}

		String arrivingFrom = (String)attributes.get("arrivingFrom");

		if (arrivingFrom != null) {
			setArrivingFrom(arrivingFrom);
		}

		String sailingTo = (String)attributes.get("sailingTo");

		if (sailingTo != null) {
			setSailingTo(sailingTo);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		String masterName = (String)attributes.get("masterName");

		if (masterName != null) {
			setMasterName(masterName);
		}

		Double grossTonnage = (Double)attributes.get("grossTonnage");

		if (grossTonnage != null) {
			setGrossTonnage(grossTonnage);
		}

		String grossTonnageUnit = (String)attributes.get("grossTonnageUnit");

		if (grossTonnageUnit != null) {
			setGrossTonnageUnit(grossTonnageUnit);
		}

		Double tonnage = (Double)attributes.get("tonnage");

		if (tonnage != null) {
			setTonnage(tonnage);
		}

		String tonnageUnit = (String)attributes.get("tonnageUnit");

		if (tonnageUnit != null) {
			setTonnageUnit(tonnageUnit);
		}

		Integer certificatecarried = (Integer)attributes.get(
				"certificatecarried");

		if (certificatecarried != null) {
			setCertificatecarried(certificatecarried);
		}

		String issuedAt = (String)attributes.get("issuedAt");

		if (issuedAt != null) {
			setIssuedAt(issuedAt);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		Integer reInspectionrequired = (Integer)attributes.get(
				"reInspectionrequired");

		if (reInspectionrequired != null) {
			setReInspectionrequired(reInspectionrequired);
		}

		Integer isShipVisitedWHO = (Integer)attributes.get("isShipVisitedWHO");

		if (isShipVisitedWHO != null) {
			setIsShipVisitedWHO(isShipVisitedWHO);
		}

		String visitedWHOPortCode = (String)attributes.get("visitedWHOPortCode");

		if (visitedWHOPortCode != null) {
			setVisitedWHOPortCode(visitedWHOPortCode);
		}

		Date dateOfVisitedWHO = (Date)attributes.get("dateOfVisitedWHO");

		if (dateOfVisitedWHO != null) {
			setDateOfVisitedWHO(dateOfVisitedWHO);
		}

		String listPortName = (String)attributes.get("listPortName");

		if (listPortName != null) {
			setListPortName(listPortName);
		}

		String doctorName = (String)attributes.get("doctorName");

		if (doctorName != null) {
			setDoctorName(doctorName);
		}

		Date doctorSigndate = (Date)attributes.get("doctorSigndate");

		if (doctorSigndate != null) {
			setDoctorSigndate(doctorSigndate);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Integer masterSigned = (Integer)attributes.get("masterSigned");

		if (masterSigned != null) {
			setMasterSigned(masterSigned);
		}

		Integer masterSignedImage = (Integer)attributes.get("masterSignedImage");

		if (masterSignedImage != null) {
			setMasterSignedImage(masterSignedImage);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	@Override
	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	@Override
	public String getSubmittedPortCode() {
		if (_submittedPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _submittedPortCode;
		}
	}

	@Override
	public void setSubmittedPortCode(String submittedPortCode) {
		_submittedPortCode = submittedPortCode;
	}

	@JSON
	@Override
	public Date getDateSubmitted() {
		return _dateSubmitted;
	}

	@Override
	public void setDateSubmitted(Date dateSubmitted) {
		_dateSubmitted = dateSubmitted;
	}

	@JSON
	@Override
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	@Override
	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	@Override
	public String getRegistration() {
		if (_registration == null) {
			return StringPool.BLANK;
		}
		else {
			return _registration;
		}
	}

	@Override
	public void setRegistration(String registration) {
		_registration = registration;
	}

	@JSON
	@Override
	public String getImoNumber() {
		if (_imoNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _imoNumber;
		}
	}

	@Override
	public void setImoNumber(String imoNumber) {
		_imoNumber = imoNumber;
	}

	@JSON
	@Override
	public String getArrivingFrom() {
		if (_arrivingFrom == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivingFrom;
		}
	}

	@Override
	public void setArrivingFrom(String arrivingFrom) {
		_arrivingFrom = arrivingFrom;
	}

	@JSON
	@Override
	public String getSailingTo() {
		if (_sailingTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sailingTo;
		}
	}

	@Override
	public void setSailingTo(String sailingTo) {
		_sailingTo = sailingTo;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public String getMasterName() {
		if (_masterName == null) {
			return StringPool.BLANK;
		}
		else {
			return _masterName;
		}
	}

	@Override
	public void setMasterName(String masterName) {
		_masterName = masterName;
	}

	@JSON
	@Override
	public double getGrossTonnage() {
		return _grossTonnage;
	}

	@Override
	public void setGrossTonnage(double grossTonnage) {
		_grossTonnage = grossTonnage;
	}

	@JSON
	@Override
	public String getGrossTonnageUnit() {
		if (_grossTonnageUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _grossTonnageUnit;
		}
	}

	@Override
	public void setGrossTonnageUnit(String grossTonnageUnit) {
		_grossTonnageUnit = grossTonnageUnit;
	}

	@JSON
	@Override
	public double getTonnage() {
		return _tonnage;
	}

	@Override
	public void setTonnage(double tonnage) {
		_tonnage = tonnage;
	}

	@JSON
	@Override
	public String getTonnageUnit() {
		if (_tonnageUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _tonnageUnit;
		}
	}

	@Override
	public void setTonnageUnit(String tonnageUnit) {
		_tonnageUnit = tonnageUnit;
	}

	@JSON
	@Override
	public int getCertificatecarried() {
		return _certificatecarried;
	}

	@Override
	public void setCertificatecarried(int certificatecarried) {
		_certificatecarried = certificatecarried;
	}

	@JSON
	@Override
	public String getIssuedAt() {
		if (_issuedAt == null) {
			return StringPool.BLANK;
		}
		else {
			return _issuedAt;
		}
	}

	@Override
	public void setIssuedAt(String issuedAt) {
		_issuedAt = issuedAt;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	@Override
	public int getReInspectionrequired() {
		return _reInspectionrequired;
	}

	@Override
	public void setReInspectionrequired(int reInspectionrequired) {
		_reInspectionrequired = reInspectionrequired;
	}

	@JSON
	@Override
	public int getIsShipVisitedWHO() {
		return _isShipVisitedWHO;
	}

	@Override
	public void setIsShipVisitedWHO(int isShipVisitedWHO) {
		_isShipVisitedWHO = isShipVisitedWHO;
	}

	@JSON
	@Override
	public String getVisitedWHOPortCode() {
		if (_visitedWHOPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _visitedWHOPortCode;
		}
	}

	@Override
	public void setVisitedWHOPortCode(String visitedWHOPortCode) {
		_visitedWHOPortCode = visitedWHOPortCode;
	}

	@JSON
	@Override
	public Date getDateOfVisitedWHO() {
		return _dateOfVisitedWHO;
	}

	@Override
	public void setDateOfVisitedWHO(Date dateOfVisitedWHO) {
		_dateOfVisitedWHO = dateOfVisitedWHO;
	}

	@JSON
	@Override
	public String getListPortName() {
		if (_listPortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _listPortName;
		}
	}

	@Override
	public void setListPortName(String listPortName) {
		_listPortName = listPortName;
	}

	@JSON
	@Override
	public String getDoctorName() {
		if (_doctorName == null) {
			return StringPool.BLANK;
		}
		else {
			return _doctorName;
		}
	}

	@Override
	public void setDoctorName(String doctorName) {
		_doctorName = doctorName;
	}

	@JSON
	@Override
	public Date getDoctorSigndate() {
		return _doctorSigndate;
	}

	@Override
	public void setDoctorSigndate(Date doctorSigndate) {
		_doctorSigndate = doctorSigndate;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public int getMasterSigned() {
		return _masterSigned;
	}

	@Override
	public void setMasterSigned(int masterSigned) {
		_masterSigned = masterSigned;
	}

	@JSON
	@Override
	public int getMasterSignedImage() {
		return _masterSignedImage;
	}

	@Override
	public void setMasterSignedImage(int masterSignedImage) {
		_masterSignedImage = masterSignedImage;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TempDeclarationOfHealth.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TempDeclarationOfHealth toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TempDeclarationOfHealth)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TempDeclarationOfHealthImpl tempDeclarationOfHealthImpl = new TempDeclarationOfHealthImpl();

		tempDeclarationOfHealthImpl.setId(getId());
		tempDeclarationOfHealthImpl.setRequestCode(getRequestCode());
		tempDeclarationOfHealthImpl.setRequestState(getRequestState());
		tempDeclarationOfHealthImpl.setDocumentName(getDocumentName());
		tempDeclarationOfHealthImpl.setDocumentYear(getDocumentYear());
		tempDeclarationOfHealthImpl.setUserCreated(getUserCreated());
		tempDeclarationOfHealthImpl.setSubmittedPortCode(getSubmittedPortCode());
		tempDeclarationOfHealthImpl.setDateSubmitted(getDateSubmitted());
		tempDeclarationOfHealthImpl.setNameOfShip(getNameOfShip());
		tempDeclarationOfHealthImpl.setRegistration(getRegistration());
		tempDeclarationOfHealthImpl.setImoNumber(getImoNumber());
		tempDeclarationOfHealthImpl.setArrivingFrom(getArrivingFrom());
		tempDeclarationOfHealthImpl.setSailingTo(getSailingTo());
		tempDeclarationOfHealthImpl.setNationality(getNationality());
		tempDeclarationOfHealthImpl.setMasterName(getMasterName());
		tempDeclarationOfHealthImpl.setGrossTonnage(getGrossTonnage());
		tempDeclarationOfHealthImpl.setGrossTonnageUnit(getGrossTonnageUnit());
		tempDeclarationOfHealthImpl.setTonnage(getTonnage());
		tempDeclarationOfHealthImpl.setTonnageUnit(getTonnageUnit());
		tempDeclarationOfHealthImpl.setCertificatecarried(getCertificatecarried());
		tempDeclarationOfHealthImpl.setIssuedAt(getIssuedAt());
		tempDeclarationOfHealthImpl.setIssueDate(getIssueDate());
		tempDeclarationOfHealthImpl.setReInspectionrequired(getReInspectionrequired());
		tempDeclarationOfHealthImpl.setIsShipVisitedWHO(getIsShipVisitedWHO());
		tempDeclarationOfHealthImpl.setVisitedWHOPortCode(getVisitedWHOPortCode());
		tempDeclarationOfHealthImpl.setDateOfVisitedWHO(getDateOfVisitedWHO());
		tempDeclarationOfHealthImpl.setListPortName(getListPortName());
		tempDeclarationOfHealthImpl.setDoctorName(getDoctorName());
		tempDeclarationOfHealthImpl.setDoctorSigndate(getDoctorSigndate());
		tempDeclarationOfHealthImpl.setSignPlace(getSignPlace());
		tempDeclarationOfHealthImpl.setSignDate(getSignDate());
		tempDeclarationOfHealthImpl.setMasterSigned(getMasterSigned());
		tempDeclarationOfHealthImpl.setMasterSignedImage(getMasterSignedImage());
		tempDeclarationOfHealthImpl.setAttachedFile(getAttachedFile());

		tempDeclarationOfHealthImpl.resetOriginalValues();

		return tempDeclarationOfHealthImpl;
	}

	@Override
	public int compareTo(TempDeclarationOfHealth tempDeclarationOfHealth) {
		int value = 0;

		if (getId() < tempDeclarationOfHealth.getId()) {
			value = -1;
		}
		else if (getId() > tempDeclarationOfHealth.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TempDeclarationOfHealth)) {
			return false;
		}

		TempDeclarationOfHealth tempDeclarationOfHealth = (TempDeclarationOfHealth)obj;

		long primaryKey = tempDeclarationOfHealth.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempDeclarationOfHealthModelImpl tempDeclarationOfHealthModelImpl = this;

		tempDeclarationOfHealthModelImpl._originalRequestCode = tempDeclarationOfHealthModelImpl._requestCode;

		tempDeclarationOfHealthModelImpl._originalRequestState = tempDeclarationOfHealthModelImpl._requestState;

		tempDeclarationOfHealthModelImpl._setOriginalRequestState = false;

		tempDeclarationOfHealthModelImpl._originalDocumentName = tempDeclarationOfHealthModelImpl._documentName;

		tempDeclarationOfHealthModelImpl._setOriginalDocumentName = false;

		tempDeclarationOfHealthModelImpl._originalDocumentYear = tempDeclarationOfHealthModelImpl._documentYear;

		tempDeclarationOfHealthModelImpl._setOriginalDocumentYear = false;

		tempDeclarationOfHealthModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempDeclarationOfHealth> toCacheModel() {
		TempDeclarationOfHealthCacheModel tempDeclarationOfHealthCacheModel = new TempDeclarationOfHealthCacheModel();

		tempDeclarationOfHealthCacheModel.id = getId();

		tempDeclarationOfHealthCacheModel.requestCode = getRequestCode();

		String requestCode = tempDeclarationOfHealthCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempDeclarationOfHealthCacheModel.requestCode = null;
		}

		tempDeclarationOfHealthCacheModel.requestState = getRequestState();

		tempDeclarationOfHealthCacheModel.documentName = getDocumentName();

		tempDeclarationOfHealthCacheModel.documentYear = getDocumentYear();

		tempDeclarationOfHealthCacheModel.userCreated = getUserCreated();

		String userCreated = tempDeclarationOfHealthCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempDeclarationOfHealthCacheModel.userCreated = null;
		}

		tempDeclarationOfHealthCacheModel.submittedPortCode = getSubmittedPortCode();

		String submittedPortCode = tempDeclarationOfHealthCacheModel.submittedPortCode;

		if ((submittedPortCode != null) && (submittedPortCode.length() == 0)) {
			tempDeclarationOfHealthCacheModel.submittedPortCode = null;
		}

		Date dateSubmitted = getDateSubmitted();

		if (dateSubmitted != null) {
			tempDeclarationOfHealthCacheModel.dateSubmitted = dateSubmitted.getTime();
		}
		else {
			tempDeclarationOfHealthCacheModel.dateSubmitted = Long.MIN_VALUE;
		}

		tempDeclarationOfHealthCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = tempDeclarationOfHealthCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			tempDeclarationOfHealthCacheModel.nameOfShip = null;
		}

		tempDeclarationOfHealthCacheModel.registration = getRegistration();

		String registration = tempDeclarationOfHealthCacheModel.registration;

		if ((registration != null) && (registration.length() == 0)) {
			tempDeclarationOfHealthCacheModel.registration = null;
		}

		tempDeclarationOfHealthCacheModel.imoNumber = getImoNumber();

		String imoNumber = tempDeclarationOfHealthCacheModel.imoNumber;

		if ((imoNumber != null) && (imoNumber.length() == 0)) {
			tempDeclarationOfHealthCacheModel.imoNumber = null;
		}

		tempDeclarationOfHealthCacheModel.arrivingFrom = getArrivingFrom();

		String arrivingFrom = tempDeclarationOfHealthCacheModel.arrivingFrom;

		if ((arrivingFrom != null) && (arrivingFrom.length() == 0)) {
			tempDeclarationOfHealthCacheModel.arrivingFrom = null;
		}

		tempDeclarationOfHealthCacheModel.sailingTo = getSailingTo();

		String sailingTo = tempDeclarationOfHealthCacheModel.sailingTo;

		if ((sailingTo != null) && (sailingTo.length() == 0)) {
			tempDeclarationOfHealthCacheModel.sailingTo = null;
		}

		tempDeclarationOfHealthCacheModel.nationality = getNationality();

		String nationality = tempDeclarationOfHealthCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			tempDeclarationOfHealthCacheModel.nationality = null;
		}

		tempDeclarationOfHealthCacheModel.masterName = getMasterName();

		String masterName = tempDeclarationOfHealthCacheModel.masterName;

		if ((masterName != null) && (masterName.length() == 0)) {
			tempDeclarationOfHealthCacheModel.masterName = null;
		}

		tempDeclarationOfHealthCacheModel.grossTonnage = getGrossTonnage();

		tempDeclarationOfHealthCacheModel.grossTonnageUnit = getGrossTonnageUnit();

		String grossTonnageUnit = tempDeclarationOfHealthCacheModel.grossTonnageUnit;

		if ((grossTonnageUnit != null) && (grossTonnageUnit.length() == 0)) {
			tempDeclarationOfHealthCacheModel.grossTonnageUnit = null;
		}

		tempDeclarationOfHealthCacheModel.tonnage = getTonnage();

		tempDeclarationOfHealthCacheModel.tonnageUnit = getTonnageUnit();

		String tonnageUnit = tempDeclarationOfHealthCacheModel.tonnageUnit;

		if ((tonnageUnit != null) && (tonnageUnit.length() == 0)) {
			tempDeclarationOfHealthCacheModel.tonnageUnit = null;
		}

		tempDeclarationOfHealthCacheModel.certificatecarried = getCertificatecarried();

		tempDeclarationOfHealthCacheModel.issuedAt = getIssuedAt();

		String issuedAt = tempDeclarationOfHealthCacheModel.issuedAt;

		if ((issuedAt != null) && (issuedAt.length() == 0)) {
			tempDeclarationOfHealthCacheModel.issuedAt = null;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			tempDeclarationOfHealthCacheModel.issueDate = issueDate.getTime();
		}
		else {
			tempDeclarationOfHealthCacheModel.issueDate = Long.MIN_VALUE;
		}

		tempDeclarationOfHealthCacheModel.reInspectionrequired = getReInspectionrequired();

		tempDeclarationOfHealthCacheModel.isShipVisitedWHO = getIsShipVisitedWHO();

		tempDeclarationOfHealthCacheModel.visitedWHOPortCode = getVisitedWHOPortCode();

		String visitedWHOPortCode = tempDeclarationOfHealthCacheModel.visitedWHOPortCode;

		if ((visitedWHOPortCode != null) && (visitedWHOPortCode.length() == 0)) {
			tempDeclarationOfHealthCacheModel.visitedWHOPortCode = null;
		}

		Date dateOfVisitedWHO = getDateOfVisitedWHO();

		if (dateOfVisitedWHO != null) {
			tempDeclarationOfHealthCacheModel.dateOfVisitedWHO = dateOfVisitedWHO.getTime();
		}
		else {
			tempDeclarationOfHealthCacheModel.dateOfVisitedWHO = Long.MIN_VALUE;
		}

		tempDeclarationOfHealthCacheModel.listPortName = getListPortName();

		String listPortName = tempDeclarationOfHealthCacheModel.listPortName;

		if ((listPortName != null) && (listPortName.length() == 0)) {
			tempDeclarationOfHealthCacheModel.listPortName = null;
		}

		tempDeclarationOfHealthCacheModel.doctorName = getDoctorName();

		String doctorName = tempDeclarationOfHealthCacheModel.doctorName;

		if ((doctorName != null) && (doctorName.length() == 0)) {
			tempDeclarationOfHealthCacheModel.doctorName = null;
		}

		Date doctorSigndate = getDoctorSigndate();

		if (doctorSigndate != null) {
			tempDeclarationOfHealthCacheModel.doctorSigndate = doctorSigndate.getTime();
		}
		else {
			tempDeclarationOfHealthCacheModel.doctorSigndate = Long.MIN_VALUE;
		}

		tempDeclarationOfHealthCacheModel.signPlace = getSignPlace();

		String signPlace = tempDeclarationOfHealthCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			tempDeclarationOfHealthCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			tempDeclarationOfHealthCacheModel.signDate = signDate.getTime();
		}
		else {
			tempDeclarationOfHealthCacheModel.signDate = Long.MIN_VALUE;
		}

		tempDeclarationOfHealthCacheModel.masterSigned = getMasterSigned();

		tempDeclarationOfHealthCacheModel.masterSignedImage = getMasterSignedImage();

		tempDeclarationOfHealthCacheModel.attachedFile = getAttachedFile();

		return tempDeclarationOfHealthCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(69);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", submittedPortCode=");
		sb.append(getSubmittedPortCode());
		sb.append(", dateSubmitted=");
		sb.append(getDateSubmitted());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", registration=");
		sb.append(getRegistration());
		sb.append(", imoNumber=");
		sb.append(getImoNumber());
		sb.append(", arrivingFrom=");
		sb.append(getArrivingFrom());
		sb.append(", sailingTo=");
		sb.append(getSailingTo());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", masterName=");
		sb.append(getMasterName());
		sb.append(", grossTonnage=");
		sb.append(getGrossTonnage());
		sb.append(", grossTonnageUnit=");
		sb.append(getGrossTonnageUnit());
		sb.append(", tonnage=");
		sb.append(getTonnage());
		sb.append(", tonnageUnit=");
		sb.append(getTonnageUnit());
		sb.append(", certificatecarried=");
		sb.append(getCertificatecarried());
		sb.append(", issuedAt=");
		sb.append(getIssuedAt());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", reInspectionrequired=");
		sb.append(getReInspectionrequired());
		sb.append(", isShipVisitedWHO=");
		sb.append(getIsShipVisitedWHO());
		sb.append(", visitedWHOPortCode=");
		sb.append(getVisitedWHOPortCode());
		sb.append(", dateOfVisitedWHO=");
		sb.append(getDateOfVisitedWHO());
		sb.append(", listPortName=");
		sb.append(getListPortName());
		sb.append(", doctorName=");
		sb.append(getDoctorName());
		sb.append(", doctorSigndate=");
		sb.append(getDoctorSigndate());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", masterSigned=");
		sb.append(getMasterSigned());
		sb.append(", masterSignedImage=");
		sb.append(getMasterSignedImage());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(106);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.TempDeclarationOfHealth");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>submittedPortCode</column-name><column-value><![CDATA[");
		sb.append(getSubmittedPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateSubmitted</column-name><column-value><![CDATA[");
		sb.append(getDateSubmitted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registration</column-name><column-value><![CDATA[");
		sb.append(getRegistration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imoNumber</column-name><column-value><![CDATA[");
		sb.append(getImoNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivingFrom</column-name><column-value><![CDATA[");
		sb.append(getArrivingFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sailingTo</column-name><column-value><![CDATA[");
		sb.append(getSailingTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterName</column-name><column-value><![CDATA[");
		sb.append(getMasterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnage</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnageUnit</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnageUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tonnage</column-name><column-value><![CDATA[");
		sb.append(getTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tonnageUnit</column-name><column-value><![CDATA[");
		sb.append(getTonnageUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificatecarried</column-name><column-value><![CDATA[");
		sb.append(getCertificatecarried());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issuedAt</column-name><column-value><![CDATA[");
		sb.append(getIssuedAt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reInspectionrequired</column-name><column-value><![CDATA[");
		sb.append(getReInspectionrequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isShipVisitedWHO</column-name><column-value><![CDATA[");
		sb.append(getIsShipVisitedWHO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitedWHOPortCode</column-name><column-value><![CDATA[");
		sb.append(getVisitedWHOPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfVisitedWHO</column-name><column-value><![CDATA[");
		sb.append(getDateOfVisitedWHO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>listPortName</column-name><column-value><![CDATA[");
		sb.append(getListPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doctorName</column-name><column-value><![CDATA[");
		sb.append(getDoctorName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doctorSigndate</column-name><column-value><![CDATA[");
		sb.append(getDoctorSigndate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSigned</column-name><column-value><![CDATA[");
		sb.append(getMasterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSignedImage</column-name><column-value><![CDATA[");
		sb.append(getMasterSignedImage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempDeclarationOfHealth.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TempDeclarationOfHealth.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _userCreated;
	private String _submittedPortCode;
	private Date _dateSubmitted;
	private String _nameOfShip;
	private String _registration;
	private String _imoNumber;
	private String _arrivingFrom;
	private String _sailingTo;
	private String _nationality;
	private String _masterName;
	private double _grossTonnage;
	private String _grossTonnageUnit;
	private double _tonnage;
	private String _tonnageUnit;
	private int _certificatecarried;
	private String _issuedAt;
	private Date _issueDate;
	private int _reInspectionrequired;
	private int _isShipVisitedWHO;
	private String _visitedWHOPortCode;
	private Date _dateOfVisitedWHO;
	private String _listPortName;
	private String _doctorName;
	private Date _doctorSigndate;
	private String _signPlace;
	private Date _signDate;
	private int _masterSigned;
	private int _masterSignedImage;
	private long _attachedFile;
	private long _columnBitmask;
	private TempDeclarationOfHealth _escapedModel;
}