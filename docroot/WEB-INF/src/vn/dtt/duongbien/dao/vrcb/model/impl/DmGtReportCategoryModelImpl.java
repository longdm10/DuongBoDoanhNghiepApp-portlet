/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory;
import vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategoryModel;
import vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DmGtReportCategory service. Represents a row in the &quot;DM_GT_REPORT_CATEGORY&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmGtReportCategoryImpl}.
 * </p>
 *
 * @author longdm
 * @see DmGtReportCategoryImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory
 * @see vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategoryModel
 * @generated
 */
@JSON(strict = true)
public class DmGtReportCategoryModelImpl extends BaseModelImpl<DmGtReportCategory>
	implements DmGtReportCategoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm gt report category model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory} interface instead.
	 */
	public static final String TABLE_NAME = "DM_GT_REPORT_CATEGORY";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "Category", Types.VARCHAR },
			{ "CategoryName", Types.VARCHAR },
			{ "CategoryOrder", Types.INTEGER },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_GT_REPORT_CATEGORY (ID LONG not null primary key,Category VARCHAR(75) null,CategoryName VARCHAR(75) null,CategoryOrder INTEGER,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_GT_REPORT_CATEGORY";
	public static final String ORDER_BY_JPQL = " ORDER BY dmGtReportCategory.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_GT_REPORT_CATEGORY.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DmGtReportCategory toModel(DmGtReportCategorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DmGtReportCategory model = new DmGtReportCategoryImpl();

		model.setId(soapModel.getId());
		model.setCategory(soapModel.getCategory());
		model.setCategoryName(soapModel.getCategoryName());
		model.setCategoryOrder(soapModel.getCategoryOrder());
		model.setIsDelete(soapModel.getIsDelete());
		model.setMarkedAsDelete(soapModel.getMarkedAsDelete());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRequestedDate(soapModel.getRequestedDate());
		model.setSyncVersion(soapModel.getSyncVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DmGtReportCategory> toModels(
		DmGtReportCategorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DmGtReportCategory> models = new ArrayList<DmGtReportCategory>(soapModels.length);

		for (DmGtReportCategorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory"));

	public DmGtReportCategoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmGtReportCategory.class;
	}

	@Override
	public String getModelClassName() {
		return DmGtReportCategory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("category", getCategory());
		attributes.put("categoryName", getCategoryName());
		attributes.put("categoryOrder", getCategoryOrder());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String categoryName = (String)attributes.get("categoryName");

		if (categoryName != null) {
			setCategoryName(categoryName);
		}

		Integer categoryOrder = (Integer)attributes.get("categoryOrder");

		if (categoryOrder != null) {
			setCategoryOrder(categoryOrder);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	@Override
	public String getCategoryName() {
		if (_categoryName == null) {
			return StringPool.BLANK;
		}
		else {
			return _categoryName;
		}
	}

	@Override
	public void setCategoryName(String categoryName) {
		_categoryName = categoryName;
	}

	@JSON
	@Override
	public int getCategoryOrder() {
		return _categoryOrder;
	}

	@Override
	public void setCategoryOrder(int categoryOrder) {
		_categoryOrder = categoryOrder;
	}

	@JSON
	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@JSON
	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@JSON
	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DmGtReportCategory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DmGtReportCategory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmGtReportCategory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmGtReportCategoryImpl dmGtReportCategoryImpl = new DmGtReportCategoryImpl();

		dmGtReportCategoryImpl.setId(getId());
		dmGtReportCategoryImpl.setCategory(getCategory());
		dmGtReportCategoryImpl.setCategoryName(getCategoryName());
		dmGtReportCategoryImpl.setCategoryOrder(getCategoryOrder());
		dmGtReportCategoryImpl.setIsDelete(getIsDelete());
		dmGtReportCategoryImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmGtReportCategoryImpl.setModifiedDate(getModifiedDate());
		dmGtReportCategoryImpl.setRequestedDate(getRequestedDate());
		dmGtReportCategoryImpl.setSyncVersion(getSyncVersion());

		dmGtReportCategoryImpl.resetOriginalValues();

		return dmGtReportCategoryImpl;
	}

	@Override
	public int compareTo(DmGtReportCategory dmGtReportCategory) {
		int value = 0;

		if (getId() < dmGtReportCategory.getId()) {
			value = -1;
		}
		else if (getId() > dmGtReportCategory.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmGtReportCategory)) {
			return false;
		}

		DmGtReportCategory dmGtReportCategory = (DmGtReportCategory)obj;

		long primaryKey = dmGtReportCategory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DmGtReportCategory> toCacheModel() {
		DmGtReportCategoryCacheModel dmGtReportCategoryCacheModel = new DmGtReportCategoryCacheModel();

		dmGtReportCategoryCacheModel.id = getId();

		dmGtReportCategoryCacheModel.category = getCategory();

		String category = dmGtReportCategoryCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			dmGtReportCategoryCacheModel.category = null;
		}

		dmGtReportCategoryCacheModel.categoryName = getCategoryName();

		String categoryName = dmGtReportCategoryCacheModel.categoryName;

		if ((categoryName != null) && (categoryName.length() == 0)) {
			dmGtReportCategoryCacheModel.categoryName = null;
		}

		dmGtReportCategoryCacheModel.categoryOrder = getCategoryOrder();

		dmGtReportCategoryCacheModel.isDelete = getIsDelete();

		dmGtReportCategoryCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmGtReportCategoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmGtReportCategoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmGtReportCategoryCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmGtReportCategoryCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmGtReportCategoryCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmGtReportCategoryCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmGtReportCategoryCacheModel.syncVersion = null;
		}

		return dmGtReportCategoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", categoryName=");
		sb.append(getCategoryName());
		sb.append(", categoryOrder=");
		sb.append(getCategoryOrder());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.DmGtReportCategory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryName</column-name><column-value><![CDATA[");
		sb.append(getCategoryName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryOrder</column-name><column-value><![CDATA[");
		sb.append(getCategoryOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmGtReportCategory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DmGtReportCategory.class
		};
	private long _id;
	private String _category;
	private String _categoryName;
	private int _categoryOrder;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private DmGtReportCategory _escapedModel;
}