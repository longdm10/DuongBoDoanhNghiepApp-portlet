/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration;
import vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclarationModel;
import vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclarationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TempGeneralDeclaration service. Represents a row in the &quot;TEMP_GENERAL_DECLARATION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclarationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempGeneralDeclarationImpl}.
 * </p>
 *
 * @author longdm
 * @see TempGeneralDeclarationImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration
 * @see vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclarationModel
 * @generated
 */
@JSON(strict = true)
public class TempGeneralDeclarationModelImpl extends BaseModelImpl<TempGeneralDeclaration>
	implements TempGeneralDeclarationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp general declaration model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_GENERAL_DECLARATION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "UserCreated", Types.VARCHAR },
			{ "IsArrival", Types.INTEGER },
			{ "NameOfShip", Types.VARCHAR },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "IMONumber", Types.VARCHAR },
			{ "CallSign", Types.VARCHAR },
			{ "VoyageNumber", Types.VARCHAR },
			{ "PortOfArrivalCode", Types.VARCHAR },
			{ "DateOfArrival", Types.TIMESTAMP },
			{ "PortHarbourCode", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "PortWharfCode", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "NameOfMaster", Types.VARCHAR },
			{ "LastPortOfCallCode", Types.VARCHAR },
			{ "CertificateOfRegistryNumber", Types.VARCHAR },
			{ "CertificateOfRegistryDate", Types.TIMESTAMP },
			{ "CertificateOfRegistryPortName", Types.VARCHAR },
			{ "TaxCodeOfShipownersAgents", Types.VARCHAR },
			{ "NameOfShipownersAgents", Types.VARCHAR },
			{ "ShipAgencyAddress", Types.VARCHAR },
			{ "ShipAgencyPhone", Types.VARCHAR },
			{ "ShipAgencyFax", Types.VARCHAR },
			{ "ShipAgencyEmail", Types.VARCHAR },
			{ "GrossTonnage", Types.DOUBLE },
			{ "NetTonnage", Types.DOUBLE },
			{ "PositionOfShipInPort", Types.VARCHAR },
			{ "BriefParticularsOfVoyage", Types.VARCHAR },
			{ "BriefDescriptionOfTheCargo", Types.VARCHAR },
			{ "NumberOfCrew", Types.INTEGER },
			{ "NumberOfPassengers", Types.INTEGER },
			{ "ShipRequirementsInTermsOfWaste", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "NumberCargoDeclaration", Types.VARCHAR },
			{ "NumberShipStoreDeclaration", Types.VARCHAR },
			{ "NumberCrewList", Types.VARCHAR },
			{ "NumberPassengerList", Types.VARCHAR },
			{ "NumberCrewEffects", Types.VARCHAR },
			{ "NumberHealthMaritime", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "MasterSigned", Types.INTEGER },
			{ "MasterSignedImage", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_GENERAL_DECLARATION (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName LONG,DocumentYear INTEGER,UserCreated VARCHAR(75) null,IsArrival INTEGER,NameOfShip VARCHAR(75) null,ShipTypeCode VARCHAR(75) null,IMONumber VARCHAR(75) null,CallSign VARCHAR(75) null,VoyageNumber VARCHAR(75) null,PortOfArrivalCode VARCHAR(75) null,DateOfArrival DATE null,PortHarbourCode VARCHAR(75) null,PortRegionCode VARCHAR(75) null,PortWharfCode VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,NameOfMaster VARCHAR(75) null,LastPortOfCallCode VARCHAR(75) null,CertificateOfRegistryNumber VARCHAR(75) null,CertificateOfRegistryDate DATE null,CertificateOfRegistryPortName VARCHAR(75) null,TaxCodeOfShipownersAgents VARCHAR(75) null,NameOfShipownersAgents VARCHAR(75) null,ShipAgencyAddress VARCHAR(75) null,ShipAgencyPhone VARCHAR(75) null,ShipAgencyFax VARCHAR(75) null,ShipAgencyEmail VARCHAR(75) null,GrossTonnage DOUBLE,NetTonnage DOUBLE,PositionOfShipInPort VARCHAR(75) null,BriefParticularsOfVoyage VARCHAR(75) null,BriefDescriptionOfTheCargo VARCHAR(75) null,NumberOfCrew INTEGER,NumberOfPassengers INTEGER,ShipRequirementsInTermsOfWaste VARCHAR(75) null,Remarks VARCHAR(75) null,NumberCargoDeclaration VARCHAR(75) null,NumberShipStoreDeclaration VARCHAR(75) null,NumberCrewList VARCHAR(75) null,NumberPassengerList VARCHAR(75) null,NumberCrewEffects VARCHAR(75) null,NumberHealthMaritime VARCHAR(75) null,SignPlace VARCHAR(75) null,SignDate DATE null,MasterSigned INTEGER,MasterSignedImage INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_GENERAL_DECLARATION";
	public static final String ORDER_BY_JPQL = " ORDER BY tempGeneralDeclaration.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_GENERAL_DECLARATION.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempGeneralDeclaration toModel(
		TempGeneralDeclarationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TempGeneralDeclaration model = new TempGeneralDeclarationImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setUserCreated(soapModel.getUserCreated());
		model.setIsArrival(soapModel.getIsArrival());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setImoNumber(soapModel.getImoNumber());
		model.setCallSign(soapModel.getCallSign());
		model.setVoyageNumber(soapModel.getVoyageNumber());
		model.setPortOfArrivalCode(soapModel.getPortOfArrivalCode());
		model.setDateOfArrival(soapModel.getDateOfArrival());
		model.setPortHarbourCode(soapModel.getPortHarbourCode());
		model.setPortRegionCode(soapModel.getPortRegionCode());
		model.setPortWharfCode(soapModel.getPortWharfCode());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setNameOfMaster(soapModel.getNameOfMaster());
		model.setLastPortOfCallCode(soapModel.getLastPortOfCallCode());
		model.setCertificateOfRegistryNumber(soapModel.getCertificateOfRegistryNumber());
		model.setCertificateOfRegistryDate(soapModel.getCertificateOfRegistryDate());
		model.setCertificateOfRegistryPortName(soapModel.getCertificateOfRegistryPortName());
		model.setTaxCodeOfShipownersAgents(soapModel.getTaxCodeOfShipownersAgents());
		model.setNameOfShipownersAgents(soapModel.getNameOfShipownersAgents());
		model.setShipAgencyAddress(soapModel.getShipAgencyAddress());
		model.setShipAgencyPhone(soapModel.getShipAgencyPhone());
		model.setShipAgencyFax(soapModel.getShipAgencyFax());
		model.setShipAgencyEmail(soapModel.getShipAgencyEmail());
		model.setGrossTonnage(soapModel.getGrossTonnage());
		model.setNetTonnage(soapModel.getNetTonnage());
		model.setPositionOfShipInport(soapModel.getPositionOfShipInport());
		model.setBriefParticularsOfVoyage(soapModel.getBriefParticularsOfVoyage());
		model.setBriefDescriptionOfTheCargo(soapModel.getBriefDescriptionOfTheCargo());
		model.setNumberOfCrew(soapModel.getNumberOfCrew());
		model.setNumberOfPassengers(soapModel.getNumberOfPassengers());
		model.setShipRequirementsInTermsOfWaste(soapModel.getShipRequirementsInTermsOfWaste());
		model.setRemarks(soapModel.getRemarks());
		model.setNumberCargoDeclaration(soapModel.getNumberCargoDeclaration());
		model.setNumberShipStoreDeclaration(soapModel.getNumberShipStoreDeclaration());
		model.setNumberCrewList(soapModel.getNumberCrewList());
		model.setNumberPassengerList(soapModel.getNumberPassengerList());
		model.setNumberCrewEffects(soapModel.getNumberCrewEffects());
		model.setNumberHealthMaritime(soapModel.getNumberHealthMaritime());
		model.setSignPlace(soapModel.getSignPlace());
		model.setSignDate(soapModel.getSignDate());
		model.setMasterSigned(soapModel.getMasterSigned());
		model.setMasterSignedImage(soapModel.getMasterSignedImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempGeneralDeclaration> toModels(
		TempGeneralDeclarationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TempGeneralDeclaration> models = new ArrayList<TempGeneralDeclaration>(soapModels.length);

		for (TempGeneralDeclarationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration"));

	public TempGeneralDeclarationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TempGeneralDeclaration.class;
	}

	@Override
	public String getModelClassName() {
		return TempGeneralDeclaration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("requestState", getRequestState());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("userCreated", getUserCreated());
		attributes.put("isArrival", getIsArrival());
		attributes.put("nameOfShip", getNameOfShip());
		attributes.put("shipTypeCode", getShipTypeCode());
		attributes.put("imoNumber", getImoNumber());
		attributes.put("callSign", getCallSign());
		attributes.put("voyageNumber", getVoyageNumber());
		attributes.put("portOfArrivalCode", getPortOfArrivalCode());
		attributes.put("dateOfArrival", getDateOfArrival());
		attributes.put("portHarbourCode", getPortHarbourCode());
		attributes.put("portRegionCode", getPortRegionCode());
		attributes.put("portWharfCode", getPortWharfCode());
		attributes.put("flagStateOfShip", getFlagStateOfShip());
		attributes.put("nameOfMaster", getNameOfMaster());
		attributes.put("lastPortOfCallCode", getLastPortOfCallCode());
		attributes.put("certificateOfRegistryNumber",
			getCertificateOfRegistryNumber());
		attributes.put("certificateOfRegistryDate",
			getCertificateOfRegistryDate());
		attributes.put("certificateOfRegistryPortName",
			getCertificateOfRegistryPortName());
		attributes.put("taxCodeOfShipownersAgents",
			getTaxCodeOfShipownersAgents());
		attributes.put("nameOfShipownersAgents", getNameOfShipownersAgents());
		attributes.put("shipAgencyAddress", getShipAgencyAddress());
		attributes.put("shipAgencyPhone", getShipAgencyPhone());
		attributes.put("shipAgencyFax", getShipAgencyFax());
		attributes.put("shipAgencyEmail", getShipAgencyEmail());
		attributes.put("grossTonnage", getGrossTonnage());
		attributes.put("netTonnage", getNetTonnage());
		attributes.put("positionOfShipInport", getPositionOfShipInport());
		attributes.put("briefParticularsOfVoyage", getBriefParticularsOfVoyage());
		attributes.put("briefDescriptionOfTheCargo",
			getBriefDescriptionOfTheCargo());
		attributes.put("numberOfCrew", getNumberOfCrew());
		attributes.put("numberOfPassengers", getNumberOfPassengers());
		attributes.put("shipRequirementsInTermsOfWaste",
			getShipRequirementsInTermsOfWaste());
		attributes.put("remarks", getRemarks());
		attributes.put("numberCargoDeclaration", getNumberCargoDeclaration());
		attributes.put("numberShipStoreDeclaration",
			getNumberShipStoreDeclaration());
		attributes.put("numberCrewList", getNumberCrewList());
		attributes.put("numberPassengerList", getNumberPassengerList());
		attributes.put("numberCrewEffects", getNumberCrewEffects());
		attributes.put("numberHealthMaritime", getNumberHealthMaritime());
		attributes.put("signPlace", getSignPlace());
		attributes.put("signDate", getSignDate());
		attributes.put("masterSigned", getMasterSigned());
		attributes.put("masterSignedImage", getMasterSignedImage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String userCreated = (String)attributes.get("userCreated");

		if (userCreated != null) {
			setUserCreated(userCreated);
		}

		Integer isArrival = (Integer)attributes.get("isArrival");

		if (isArrival != null) {
			setIsArrival(isArrival);
		}

		String nameOfShip = (String)attributes.get("nameOfShip");

		if (nameOfShip != null) {
			setNameOfShip(nameOfShip);
		}

		String shipTypeCode = (String)attributes.get("shipTypeCode");

		if (shipTypeCode != null) {
			setShipTypeCode(shipTypeCode);
		}

		String imoNumber = (String)attributes.get("imoNumber");

		if (imoNumber != null) {
			setImoNumber(imoNumber);
		}

		String callSign = (String)attributes.get("callSign");

		if (callSign != null) {
			setCallSign(callSign);
		}

		String voyageNumber = (String)attributes.get("voyageNumber");

		if (voyageNumber != null) {
			setVoyageNumber(voyageNumber);
		}

		String portOfArrivalCode = (String)attributes.get("portOfArrivalCode");

		if (portOfArrivalCode != null) {
			setPortOfArrivalCode(portOfArrivalCode);
		}

		Date dateOfArrival = (Date)attributes.get("dateOfArrival");

		if (dateOfArrival != null) {
			setDateOfArrival(dateOfArrival);
		}

		String portHarbourCode = (String)attributes.get("portHarbourCode");

		if (portHarbourCode != null) {
			setPortHarbourCode(portHarbourCode);
		}

		String portRegionCode = (String)attributes.get("portRegionCode");

		if (portRegionCode != null) {
			setPortRegionCode(portRegionCode);
		}

		String portWharfCode = (String)attributes.get("portWharfCode");

		if (portWharfCode != null) {
			setPortWharfCode(portWharfCode);
		}

		String flagStateOfShip = (String)attributes.get("flagStateOfShip");

		if (flagStateOfShip != null) {
			setFlagStateOfShip(flagStateOfShip);
		}

		String nameOfMaster = (String)attributes.get("nameOfMaster");

		if (nameOfMaster != null) {
			setNameOfMaster(nameOfMaster);
		}

		String lastPortOfCallCode = (String)attributes.get("lastPortOfCallCode");

		if (lastPortOfCallCode != null) {
			setLastPortOfCallCode(lastPortOfCallCode);
		}

		String certificateOfRegistryNumber = (String)attributes.get(
				"certificateOfRegistryNumber");

		if (certificateOfRegistryNumber != null) {
			setCertificateOfRegistryNumber(certificateOfRegistryNumber);
		}

		Date certificateOfRegistryDate = (Date)attributes.get(
				"certificateOfRegistryDate");

		if (certificateOfRegistryDate != null) {
			setCertificateOfRegistryDate(certificateOfRegistryDate);
		}

		String certificateOfRegistryPortName = (String)attributes.get(
				"certificateOfRegistryPortName");

		if (certificateOfRegistryPortName != null) {
			setCertificateOfRegistryPortName(certificateOfRegistryPortName);
		}

		String taxCodeOfShipownersAgents = (String)attributes.get(
				"taxCodeOfShipownersAgents");

		if (taxCodeOfShipownersAgents != null) {
			setTaxCodeOfShipownersAgents(taxCodeOfShipownersAgents);
		}

		String nameOfShipownersAgents = (String)attributes.get(
				"nameOfShipownersAgents");

		if (nameOfShipownersAgents != null) {
			setNameOfShipownersAgents(nameOfShipownersAgents);
		}

		String shipAgencyAddress = (String)attributes.get("shipAgencyAddress");

		if (shipAgencyAddress != null) {
			setShipAgencyAddress(shipAgencyAddress);
		}

		String shipAgencyPhone = (String)attributes.get("shipAgencyPhone");

		if (shipAgencyPhone != null) {
			setShipAgencyPhone(shipAgencyPhone);
		}

		String shipAgencyFax = (String)attributes.get("shipAgencyFax");

		if (shipAgencyFax != null) {
			setShipAgencyFax(shipAgencyFax);
		}

		String shipAgencyEmail = (String)attributes.get("shipAgencyEmail");

		if (shipAgencyEmail != null) {
			setShipAgencyEmail(shipAgencyEmail);
		}

		Double grossTonnage = (Double)attributes.get("grossTonnage");

		if (grossTonnage != null) {
			setGrossTonnage(grossTonnage);
		}

		Double netTonnage = (Double)attributes.get("netTonnage");

		if (netTonnage != null) {
			setNetTonnage(netTonnage);
		}

		String positionOfShipInport = (String)attributes.get(
				"positionOfShipInport");

		if (positionOfShipInport != null) {
			setPositionOfShipInport(positionOfShipInport);
		}

		String briefParticularsOfVoyage = (String)attributes.get(
				"briefParticularsOfVoyage");

		if (briefParticularsOfVoyage != null) {
			setBriefParticularsOfVoyage(briefParticularsOfVoyage);
		}

		String briefDescriptionOfTheCargo = (String)attributes.get(
				"briefDescriptionOfTheCargo");

		if (briefDescriptionOfTheCargo != null) {
			setBriefDescriptionOfTheCargo(briefDescriptionOfTheCargo);
		}

		Integer numberOfCrew = (Integer)attributes.get("numberOfCrew");

		if (numberOfCrew != null) {
			setNumberOfCrew(numberOfCrew);
		}

		Integer numberOfPassengers = (Integer)attributes.get(
				"numberOfPassengers");

		if (numberOfPassengers != null) {
			setNumberOfPassengers(numberOfPassengers);
		}

		String shipRequirementsInTermsOfWaste = (String)attributes.get(
				"shipRequirementsInTermsOfWaste");

		if (shipRequirementsInTermsOfWaste != null) {
			setShipRequirementsInTermsOfWaste(shipRequirementsInTermsOfWaste);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		String numberCargoDeclaration = (String)attributes.get(
				"numberCargoDeclaration");

		if (numberCargoDeclaration != null) {
			setNumberCargoDeclaration(numberCargoDeclaration);
		}

		String numberShipStoreDeclaration = (String)attributes.get(
				"numberShipStoreDeclaration");

		if (numberShipStoreDeclaration != null) {
			setNumberShipStoreDeclaration(numberShipStoreDeclaration);
		}

		String numberCrewList = (String)attributes.get("numberCrewList");

		if (numberCrewList != null) {
			setNumberCrewList(numberCrewList);
		}

		String numberPassengerList = (String)attributes.get(
				"numberPassengerList");

		if (numberPassengerList != null) {
			setNumberPassengerList(numberPassengerList);
		}

		String numberCrewEffects = (String)attributes.get("numberCrewEffects");

		if (numberCrewEffects != null) {
			setNumberCrewEffects(numberCrewEffects);
		}

		String numberHealthMaritime = (String)attributes.get(
				"numberHealthMaritime");

		if (numberHealthMaritime != null) {
			setNumberHealthMaritime(numberHealthMaritime);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		Integer masterSigned = (Integer)attributes.get("masterSigned");

		if (masterSigned != null) {
			setMasterSigned(masterSigned);
		}

		Integer masterSignedImage = (Integer)attributes.get("masterSignedImage");

		if (masterSignedImage != null) {
			setMasterSignedImage(masterSignedImage);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	@Override
	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	@Override
	public int getIsArrival() {
		return _isArrival;
	}

	@Override
	public void setIsArrival(int isArrival) {
		_isArrival = isArrival;
	}

	@JSON
	@Override
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	@Override
	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	@Override
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	@Override
	public void setShipTypeCode(String shipTypeCode) {
		_shipTypeCode = shipTypeCode;
	}

	@JSON
	@Override
	public String getImoNumber() {
		if (_imoNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _imoNumber;
		}
	}

	@Override
	public void setImoNumber(String imoNumber) {
		_imoNumber = imoNumber;
	}

	@JSON
	@Override
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	@Override
	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	@Override
	public String getVoyageNumber() {
		if (_voyageNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _voyageNumber;
		}
	}

	@Override
	public void setVoyageNumber(String voyageNumber) {
		_voyageNumber = voyageNumber;
	}

	@JSON
	@Override
	public String getPortOfArrivalCode() {
		if (_portOfArrivalCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portOfArrivalCode;
		}
	}

	@Override
	public void setPortOfArrivalCode(String portOfArrivalCode) {
		_portOfArrivalCode = portOfArrivalCode;
	}

	@JSON
	@Override
	public Date getDateOfArrival() {
		return _dateOfArrival;
	}

	@Override
	public void setDateOfArrival(Date dateOfArrival) {
		_dateOfArrival = dateOfArrival;
	}

	@JSON
	@Override
	public String getPortHarbourCode() {
		if (_portHarbourCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portHarbourCode;
		}
	}

	@Override
	public void setPortHarbourCode(String portHarbourCode) {
		_portHarbourCode = portHarbourCode;
	}

	@JSON
	@Override
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	@Override
	public void setPortRegionCode(String portRegionCode) {
		_portRegionCode = portRegionCode;
	}

	@JSON
	@Override
	public String getPortWharfCode() {
		if (_portWharfCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portWharfCode;
		}
	}

	@Override
	public void setPortWharfCode(String portWharfCode) {
		_portWharfCode = portWharfCode;
	}

	@JSON
	@Override
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	@Override
	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	@Override
	public String getNameOfMaster() {
		if (_nameOfMaster == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfMaster;
		}
	}

	@Override
	public void setNameOfMaster(String nameOfMaster) {
		_nameOfMaster = nameOfMaster;
	}

	@JSON
	@Override
	public String getLastPortOfCallCode() {
		if (_lastPortOfCallCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortOfCallCode;
		}
	}

	@Override
	public void setLastPortOfCallCode(String lastPortOfCallCode) {
		_lastPortOfCallCode = lastPortOfCallCode;
	}

	@JSON
	@Override
	public String getCertificateOfRegistryNumber() {
		if (_certificateOfRegistryNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryNumber;
		}
	}

	@Override
	public void setCertificateOfRegistryNumber(
		String certificateOfRegistryNumber) {
		_certificateOfRegistryNumber = certificateOfRegistryNumber;
	}

	@JSON
	@Override
	public Date getCertificateOfRegistryDate() {
		return _certificateOfRegistryDate;
	}

	@Override
	public void setCertificateOfRegistryDate(Date certificateOfRegistryDate) {
		_certificateOfRegistryDate = certificateOfRegistryDate;
	}

	@JSON
	@Override
	public String getCertificateOfRegistryPortName() {
		if (_certificateOfRegistryPortName == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateOfRegistryPortName;
		}
	}

	@Override
	public void setCertificateOfRegistryPortName(
		String certificateOfRegistryPortName) {
		_certificateOfRegistryPortName = certificateOfRegistryPortName;
	}

	@JSON
	@Override
	public String getTaxCodeOfShipownersAgents() {
		if (_taxCodeOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxCodeOfShipownersAgents;
		}
	}

	@Override
	public void setTaxCodeOfShipownersAgents(String taxCodeOfShipownersAgents) {
		_taxCodeOfShipownersAgents = taxCodeOfShipownersAgents;
	}

	@JSON
	@Override
	public String getNameOfShipownersAgents() {
		if (_nameOfShipownersAgents == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShipownersAgents;
		}
	}

	@Override
	public void setNameOfShipownersAgents(String nameOfShipownersAgents) {
		_nameOfShipownersAgents = nameOfShipownersAgents;
	}

	@JSON
	@Override
	public String getShipAgencyAddress() {
		if (_shipAgencyAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyAddress;
		}
	}

	@Override
	public void setShipAgencyAddress(String shipAgencyAddress) {
		_shipAgencyAddress = shipAgencyAddress;
	}

	@JSON
	@Override
	public String getShipAgencyPhone() {
		if (_shipAgencyPhone == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyPhone;
		}
	}

	@Override
	public void setShipAgencyPhone(String shipAgencyPhone) {
		_shipAgencyPhone = shipAgencyPhone;
	}

	@JSON
	@Override
	public String getShipAgencyFax() {
		if (_shipAgencyFax == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyFax;
		}
	}

	@Override
	public void setShipAgencyFax(String shipAgencyFax) {
		_shipAgencyFax = shipAgencyFax;
	}

	@JSON
	@Override
	public String getShipAgencyEmail() {
		if (_shipAgencyEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyEmail;
		}
	}

	@Override
	public void setShipAgencyEmail(String shipAgencyEmail) {
		_shipAgencyEmail = shipAgencyEmail;
	}

	@JSON
	@Override
	public double getGrossTonnage() {
		return _grossTonnage;
	}

	@Override
	public void setGrossTonnage(double grossTonnage) {
		_grossTonnage = grossTonnage;
	}

	@JSON
	@Override
	public double getNetTonnage() {
		return _netTonnage;
	}

	@Override
	public void setNetTonnage(double netTonnage) {
		_netTonnage = netTonnage;
	}

	@JSON
	@Override
	public String getPositionOfShipInport() {
		if (_positionOfShipInport == null) {
			return StringPool.BLANK;
		}
		else {
			return _positionOfShipInport;
		}
	}

	@Override
	public void setPositionOfShipInport(String positionOfShipInport) {
		_positionOfShipInport = positionOfShipInport;
	}

	@JSON
	@Override
	public String getBriefParticularsOfVoyage() {
		if (_briefParticularsOfVoyage == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefParticularsOfVoyage;
		}
	}

	@Override
	public void setBriefParticularsOfVoyage(String briefParticularsOfVoyage) {
		_briefParticularsOfVoyage = briefParticularsOfVoyage;
	}

	@JSON
	@Override
	public String getBriefDescriptionOfTheCargo() {
		if (_briefDescriptionOfTheCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _briefDescriptionOfTheCargo;
		}
	}

	@Override
	public void setBriefDescriptionOfTheCargo(String briefDescriptionOfTheCargo) {
		_briefDescriptionOfTheCargo = briefDescriptionOfTheCargo;
	}

	@JSON
	@Override
	public int getNumberOfCrew() {
		return _numberOfCrew;
	}

	@Override
	public void setNumberOfCrew(int numberOfCrew) {
		_numberOfCrew = numberOfCrew;
	}

	@JSON
	@Override
	public int getNumberOfPassengers() {
		return _numberOfPassengers;
	}

	@Override
	public void setNumberOfPassengers(int numberOfPassengers) {
		_numberOfPassengers = numberOfPassengers;
	}

	@JSON
	@Override
	public String getShipRequirementsInTermsOfWaste() {
		if (_shipRequirementsInTermsOfWaste == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipRequirementsInTermsOfWaste;
		}
	}

	@Override
	public void setShipRequirementsInTermsOfWaste(
		String shipRequirementsInTermsOfWaste) {
		_shipRequirementsInTermsOfWaste = shipRequirementsInTermsOfWaste;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public String getNumberCargoDeclaration() {
		if (_numberCargoDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCargoDeclaration;
		}
	}

	@Override
	public void setNumberCargoDeclaration(String numberCargoDeclaration) {
		_numberCargoDeclaration = numberCargoDeclaration;
	}

	@JSON
	@Override
	public String getNumberShipStoreDeclaration() {
		if (_numberShipStoreDeclaration == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberShipStoreDeclaration;
		}
	}

	@Override
	public void setNumberShipStoreDeclaration(String numberShipStoreDeclaration) {
		_numberShipStoreDeclaration = numberShipStoreDeclaration;
	}

	@JSON
	@Override
	public String getNumberCrewList() {
		if (_numberCrewList == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCrewList;
		}
	}

	@Override
	public void setNumberCrewList(String numberCrewList) {
		_numberCrewList = numberCrewList;
	}

	@JSON
	@Override
	public String getNumberPassengerList() {
		if (_numberPassengerList == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberPassengerList;
		}
	}

	@Override
	public void setNumberPassengerList(String numberPassengerList) {
		_numberPassengerList = numberPassengerList;
	}

	@JSON
	@Override
	public String getNumberCrewEffects() {
		if (_numberCrewEffects == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberCrewEffects;
		}
	}

	@Override
	public void setNumberCrewEffects(String numberCrewEffects) {
		_numberCrewEffects = numberCrewEffects;
	}

	@JSON
	@Override
	public String getNumberHealthMaritime() {
		if (_numberHealthMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberHealthMaritime;
		}
	}

	@Override
	public void setNumberHealthMaritime(String numberHealthMaritime) {
		_numberHealthMaritime = numberHealthMaritime;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public int getMasterSigned() {
		return _masterSigned;
	}

	@Override
	public void setMasterSigned(int masterSigned) {
		_masterSigned = masterSigned;
	}

	@JSON
	@Override
	public int getMasterSignedImage() {
		return _masterSignedImage;
	}

	@Override
	public void setMasterSignedImage(int masterSignedImage) {
		_masterSignedImage = masterSignedImage;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TempGeneralDeclaration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TempGeneralDeclaration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TempGeneralDeclaration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TempGeneralDeclarationImpl tempGeneralDeclarationImpl = new TempGeneralDeclarationImpl();

		tempGeneralDeclarationImpl.setId(getId());
		tempGeneralDeclarationImpl.setRequestCode(getRequestCode());
		tempGeneralDeclarationImpl.setRequestState(getRequestState());
		tempGeneralDeclarationImpl.setDocumentName(getDocumentName());
		tempGeneralDeclarationImpl.setDocumentYear(getDocumentYear());
		tempGeneralDeclarationImpl.setUserCreated(getUserCreated());
		tempGeneralDeclarationImpl.setIsArrival(getIsArrival());
		tempGeneralDeclarationImpl.setNameOfShip(getNameOfShip());
		tempGeneralDeclarationImpl.setShipTypeCode(getShipTypeCode());
		tempGeneralDeclarationImpl.setImoNumber(getImoNumber());
		tempGeneralDeclarationImpl.setCallSign(getCallSign());
		tempGeneralDeclarationImpl.setVoyageNumber(getVoyageNumber());
		tempGeneralDeclarationImpl.setPortOfArrivalCode(getPortOfArrivalCode());
		tempGeneralDeclarationImpl.setDateOfArrival(getDateOfArrival());
		tempGeneralDeclarationImpl.setPortHarbourCode(getPortHarbourCode());
		tempGeneralDeclarationImpl.setPortRegionCode(getPortRegionCode());
		tempGeneralDeclarationImpl.setPortWharfCode(getPortWharfCode());
		tempGeneralDeclarationImpl.setFlagStateOfShip(getFlagStateOfShip());
		tempGeneralDeclarationImpl.setNameOfMaster(getNameOfMaster());
		tempGeneralDeclarationImpl.setLastPortOfCallCode(getLastPortOfCallCode());
		tempGeneralDeclarationImpl.setCertificateOfRegistryNumber(getCertificateOfRegistryNumber());
		tempGeneralDeclarationImpl.setCertificateOfRegistryDate(getCertificateOfRegistryDate());
		tempGeneralDeclarationImpl.setCertificateOfRegistryPortName(getCertificateOfRegistryPortName());
		tempGeneralDeclarationImpl.setTaxCodeOfShipownersAgents(getTaxCodeOfShipownersAgents());
		tempGeneralDeclarationImpl.setNameOfShipownersAgents(getNameOfShipownersAgents());
		tempGeneralDeclarationImpl.setShipAgencyAddress(getShipAgencyAddress());
		tempGeneralDeclarationImpl.setShipAgencyPhone(getShipAgencyPhone());
		tempGeneralDeclarationImpl.setShipAgencyFax(getShipAgencyFax());
		tempGeneralDeclarationImpl.setShipAgencyEmail(getShipAgencyEmail());
		tempGeneralDeclarationImpl.setGrossTonnage(getGrossTonnage());
		tempGeneralDeclarationImpl.setNetTonnage(getNetTonnage());
		tempGeneralDeclarationImpl.setPositionOfShipInport(getPositionOfShipInport());
		tempGeneralDeclarationImpl.setBriefParticularsOfVoyage(getBriefParticularsOfVoyage());
		tempGeneralDeclarationImpl.setBriefDescriptionOfTheCargo(getBriefDescriptionOfTheCargo());
		tempGeneralDeclarationImpl.setNumberOfCrew(getNumberOfCrew());
		tempGeneralDeclarationImpl.setNumberOfPassengers(getNumberOfPassengers());
		tempGeneralDeclarationImpl.setShipRequirementsInTermsOfWaste(getShipRequirementsInTermsOfWaste());
		tempGeneralDeclarationImpl.setRemarks(getRemarks());
		tempGeneralDeclarationImpl.setNumberCargoDeclaration(getNumberCargoDeclaration());
		tempGeneralDeclarationImpl.setNumberShipStoreDeclaration(getNumberShipStoreDeclaration());
		tempGeneralDeclarationImpl.setNumberCrewList(getNumberCrewList());
		tempGeneralDeclarationImpl.setNumberPassengerList(getNumberPassengerList());
		tempGeneralDeclarationImpl.setNumberCrewEffects(getNumberCrewEffects());
		tempGeneralDeclarationImpl.setNumberHealthMaritime(getNumberHealthMaritime());
		tempGeneralDeclarationImpl.setSignPlace(getSignPlace());
		tempGeneralDeclarationImpl.setSignDate(getSignDate());
		tempGeneralDeclarationImpl.setMasterSigned(getMasterSigned());
		tempGeneralDeclarationImpl.setMasterSignedImage(getMasterSignedImage());

		tempGeneralDeclarationImpl.resetOriginalValues();

		return tempGeneralDeclarationImpl;
	}

	@Override
	public int compareTo(TempGeneralDeclaration tempGeneralDeclaration) {
		int value = 0;

		if (getId() < tempGeneralDeclaration.getId()) {
			value = -1;
		}
		else if (getId() > tempGeneralDeclaration.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TempGeneralDeclaration)) {
			return false;
		}

		TempGeneralDeclaration tempGeneralDeclaration = (TempGeneralDeclaration)obj;

		long primaryKey = tempGeneralDeclaration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempGeneralDeclarationModelImpl tempGeneralDeclarationModelImpl = this;

		tempGeneralDeclarationModelImpl._originalRequestCode = tempGeneralDeclarationModelImpl._requestCode;

		tempGeneralDeclarationModelImpl._originalRequestState = tempGeneralDeclarationModelImpl._requestState;

		tempGeneralDeclarationModelImpl._setOriginalRequestState = false;

		tempGeneralDeclarationModelImpl._originalDocumentName = tempGeneralDeclarationModelImpl._documentName;

		tempGeneralDeclarationModelImpl._setOriginalDocumentName = false;

		tempGeneralDeclarationModelImpl._originalDocumentYear = tempGeneralDeclarationModelImpl._documentYear;

		tempGeneralDeclarationModelImpl._setOriginalDocumentYear = false;

		tempGeneralDeclarationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempGeneralDeclaration> toCacheModel() {
		TempGeneralDeclarationCacheModel tempGeneralDeclarationCacheModel = new TempGeneralDeclarationCacheModel();

		tempGeneralDeclarationCacheModel.id = getId();

		tempGeneralDeclarationCacheModel.requestCode = getRequestCode();

		String requestCode = tempGeneralDeclarationCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.requestCode = null;
		}

		tempGeneralDeclarationCacheModel.requestState = getRequestState();

		tempGeneralDeclarationCacheModel.documentName = getDocumentName();

		tempGeneralDeclarationCacheModel.documentYear = getDocumentYear();

		tempGeneralDeclarationCacheModel.userCreated = getUserCreated();

		String userCreated = tempGeneralDeclarationCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempGeneralDeclarationCacheModel.userCreated = null;
		}

		tempGeneralDeclarationCacheModel.isArrival = getIsArrival();

		tempGeneralDeclarationCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = tempGeneralDeclarationCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfShip = null;
		}

		tempGeneralDeclarationCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = tempGeneralDeclarationCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipTypeCode = null;
		}

		tempGeneralDeclarationCacheModel.imoNumber = getImoNumber();

		String imoNumber = tempGeneralDeclarationCacheModel.imoNumber;

		if ((imoNumber != null) && (imoNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.imoNumber = null;
		}

		tempGeneralDeclarationCacheModel.callSign = getCallSign();

		String callSign = tempGeneralDeclarationCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			tempGeneralDeclarationCacheModel.callSign = null;
		}

		tempGeneralDeclarationCacheModel.voyageNumber = getVoyageNumber();

		String voyageNumber = tempGeneralDeclarationCacheModel.voyageNumber;

		if ((voyageNumber != null) && (voyageNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.voyageNumber = null;
		}

		tempGeneralDeclarationCacheModel.portOfArrivalCode = getPortOfArrivalCode();

		String portOfArrivalCode = tempGeneralDeclarationCacheModel.portOfArrivalCode;

		if ((portOfArrivalCode != null) && (portOfArrivalCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portOfArrivalCode = null;
		}

		Date dateOfArrival = getDateOfArrival();

		if (dateOfArrival != null) {
			tempGeneralDeclarationCacheModel.dateOfArrival = dateOfArrival.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.dateOfArrival = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.portHarbourCode = getPortHarbourCode();

		String portHarbourCode = tempGeneralDeclarationCacheModel.portHarbourCode;

		if ((portHarbourCode != null) && (portHarbourCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portHarbourCode = null;
		}

		tempGeneralDeclarationCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = tempGeneralDeclarationCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portRegionCode = null;
		}

		tempGeneralDeclarationCacheModel.portWharfCode = getPortWharfCode();

		String portWharfCode = tempGeneralDeclarationCacheModel.portWharfCode;

		if ((portWharfCode != null) && (portWharfCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.portWharfCode = null;
		}

		tempGeneralDeclarationCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = tempGeneralDeclarationCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			tempGeneralDeclarationCacheModel.flagStateOfShip = null;
		}

		tempGeneralDeclarationCacheModel.nameOfMaster = getNameOfMaster();

		String nameOfMaster = tempGeneralDeclarationCacheModel.nameOfMaster;

		if ((nameOfMaster != null) && (nameOfMaster.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfMaster = null;
		}

		tempGeneralDeclarationCacheModel.lastPortOfCallCode = getLastPortOfCallCode();

		String lastPortOfCallCode = tempGeneralDeclarationCacheModel.lastPortOfCallCode;

		if ((lastPortOfCallCode != null) && (lastPortOfCallCode.length() == 0)) {
			tempGeneralDeclarationCacheModel.lastPortOfCallCode = null;
		}

		tempGeneralDeclarationCacheModel.certificateOfRegistryNumber = getCertificateOfRegistryNumber();

		String certificateOfRegistryNumber = tempGeneralDeclarationCacheModel.certificateOfRegistryNumber;

		if ((certificateOfRegistryNumber != null) &&
				(certificateOfRegistryNumber.length() == 0)) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryNumber = null;
		}

		Date certificateOfRegistryDate = getCertificateOfRegistryDate();

		if (certificateOfRegistryDate != null) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryDate = certificateOfRegistryDate.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.certificateOfRegistryDate = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.certificateOfRegistryPortName = getCertificateOfRegistryPortName();

		String certificateOfRegistryPortName = tempGeneralDeclarationCacheModel.certificateOfRegistryPortName;

		if ((certificateOfRegistryPortName != null) &&
				(certificateOfRegistryPortName.length() == 0)) {
			tempGeneralDeclarationCacheModel.certificateOfRegistryPortName = null;
		}

		tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents = getTaxCodeOfShipownersAgents();

		String taxCodeOfShipownersAgents = tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents;

		if ((taxCodeOfShipownersAgents != null) &&
				(taxCodeOfShipownersAgents.length() == 0)) {
			tempGeneralDeclarationCacheModel.taxCodeOfShipownersAgents = null;
		}

		tempGeneralDeclarationCacheModel.nameOfShipownersAgents = getNameOfShipownersAgents();

		String nameOfShipownersAgents = tempGeneralDeclarationCacheModel.nameOfShipownersAgents;

		if ((nameOfShipownersAgents != null) &&
				(nameOfShipownersAgents.length() == 0)) {
			tempGeneralDeclarationCacheModel.nameOfShipownersAgents = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyAddress = getShipAgencyAddress();

		String shipAgencyAddress = tempGeneralDeclarationCacheModel.shipAgencyAddress;

		if ((shipAgencyAddress != null) && (shipAgencyAddress.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyAddress = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyPhone = getShipAgencyPhone();

		String shipAgencyPhone = tempGeneralDeclarationCacheModel.shipAgencyPhone;

		if ((shipAgencyPhone != null) && (shipAgencyPhone.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyPhone = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyFax = getShipAgencyFax();

		String shipAgencyFax = tempGeneralDeclarationCacheModel.shipAgencyFax;

		if ((shipAgencyFax != null) && (shipAgencyFax.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyFax = null;
		}

		tempGeneralDeclarationCacheModel.shipAgencyEmail = getShipAgencyEmail();

		String shipAgencyEmail = tempGeneralDeclarationCacheModel.shipAgencyEmail;

		if ((shipAgencyEmail != null) && (shipAgencyEmail.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipAgencyEmail = null;
		}

		tempGeneralDeclarationCacheModel.grossTonnage = getGrossTonnage();

		tempGeneralDeclarationCacheModel.netTonnage = getNetTonnage();

		tempGeneralDeclarationCacheModel.positionOfShipInport = getPositionOfShipInport();

		String positionOfShipInport = tempGeneralDeclarationCacheModel.positionOfShipInport;

		if ((positionOfShipInport != null) &&
				(positionOfShipInport.length() == 0)) {
			tempGeneralDeclarationCacheModel.positionOfShipInport = null;
		}

		tempGeneralDeclarationCacheModel.briefParticularsOfVoyage = getBriefParticularsOfVoyage();

		String briefParticularsOfVoyage = tempGeneralDeclarationCacheModel.briefParticularsOfVoyage;

		if ((briefParticularsOfVoyage != null) &&
				(briefParticularsOfVoyage.length() == 0)) {
			tempGeneralDeclarationCacheModel.briefParticularsOfVoyage = null;
		}

		tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo = getBriefDescriptionOfTheCargo();

		String briefDescriptionOfTheCargo = tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo;

		if ((briefDescriptionOfTheCargo != null) &&
				(briefDescriptionOfTheCargo.length() == 0)) {
			tempGeneralDeclarationCacheModel.briefDescriptionOfTheCargo = null;
		}

		tempGeneralDeclarationCacheModel.numberOfCrew = getNumberOfCrew();

		tempGeneralDeclarationCacheModel.numberOfPassengers = getNumberOfPassengers();

		tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste = getShipRequirementsInTermsOfWaste();

		String shipRequirementsInTermsOfWaste = tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste;

		if ((shipRequirementsInTermsOfWaste != null) &&
				(shipRequirementsInTermsOfWaste.length() == 0)) {
			tempGeneralDeclarationCacheModel.shipRequirementsInTermsOfWaste = null;
		}

		tempGeneralDeclarationCacheModel.remarks = getRemarks();

		String remarks = tempGeneralDeclarationCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			tempGeneralDeclarationCacheModel.remarks = null;
		}

		tempGeneralDeclarationCacheModel.numberCargoDeclaration = getNumberCargoDeclaration();

		String numberCargoDeclaration = tempGeneralDeclarationCacheModel.numberCargoDeclaration;

		if ((numberCargoDeclaration != null) &&
				(numberCargoDeclaration.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCargoDeclaration = null;
		}

		tempGeneralDeclarationCacheModel.numberShipStoreDeclaration = getNumberShipStoreDeclaration();

		String numberShipStoreDeclaration = tempGeneralDeclarationCacheModel.numberShipStoreDeclaration;

		if ((numberShipStoreDeclaration != null) &&
				(numberShipStoreDeclaration.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberShipStoreDeclaration = null;
		}

		tempGeneralDeclarationCacheModel.numberCrewList = getNumberCrewList();

		String numberCrewList = tempGeneralDeclarationCacheModel.numberCrewList;

		if ((numberCrewList != null) && (numberCrewList.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCrewList = null;
		}

		tempGeneralDeclarationCacheModel.numberPassengerList = getNumberPassengerList();

		String numberPassengerList = tempGeneralDeclarationCacheModel.numberPassengerList;

		if ((numberPassengerList != null) &&
				(numberPassengerList.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberPassengerList = null;
		}

		tempGeneralDeclarationCacheModel.numberCrewEffects = getNumberCrewEffects();

		String numberCrewEffects = tempGeneralDeclarationCacheModel.numberCrewEffects;

		if ((numberCrewEffects != null) && (numberCrewEffects.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberCrewEffects = null;
		}

		tempGeneralDeclarationCacheModel.numberHealthMaritime = getNumberHealthMaritime();

		String numberHealthMaritime = tempGeneralDeclarationCacheModel.numberHealthMaritime;

		if ((numberHealthMaritime != null) &&
				(numberHealthMaritime.length() == 0)) {
			tempGeneralDeclarationCacheModel.numberHealthMaritime = null;
		}

		tempGeneralDeclarationCacheModel.signPlace = getSignPlace();

		String signPlace = tempGeneralDeclarationCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			tempGeneralDeclarationCacheModel.signPlace = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			tempGeneralDeclarationCacheModel.signDate = signDate.getTime();
		}
		else {
			tempGeneralDeclarationCacheModel.signDate = Long.MIN_VALUE;
		}

		tempGeneralDeclarationCacheModel.masterSigned = getMasterSigned();

		tempGeneralDeclarationCacheModel.masterSignedImage = getMasterSignedImage();

		return tempGeneralDeclarationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(97);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", isArrival=");
		sb.append(getIsArrival());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", imoNumber=");
		sb.append(getImoNumber());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", voyageNumber=");
		sb.append(getVoyageNumber());
		sb.append(", portOfArrivalCode=");
		sb.append(getPortOfArrivalCode());
		sb.append(", dateOfArrival=");
		sb.append(getDateOfArrival());
		sb.append(", portHarbourCode=");
		sb.append(getPortHarbourCode());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", portWharfCode=");
		sb.append(getPortWharfCode());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", nameOfMaster=");
		sb.append(getNameOfMaster());
		sb.append(", lastPortOfCallCode=");
		sb.append(getLastPortOfCallCode());
		sb.append(", certificateOfRegistryNumber=");
		sb.append(getCertificateOfRegistryNumber());
		sb.append(", certificateOfRegistryDate=");
		sb.append(getCertificateOfRegistryDate());
		sb.append(", certificateOfRegistryPortName=");
		sb.append(getCertificateOfRegistryPortName());
		sb.append(", taxCodeOfShipownersAgents=");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append(", nameOfShipownersAgents=");
		sb.append(getNameOfShipownersAgents());
		sb.append(", shipAgencyAddress=");
		sb.append(getShipAgencyAddress());
		sb.append(", shipAgencyPhone=");
		sb.append(getShipAgencyPhone());
		sb.append(", shipAgencyFax=");
		sb.append(getShipAgencyFax());
		sb.append(", shipAgencyEmail=");
		sb.append(getShipAgencyEmail());
		sb.append(", grossTonnage=");
		sb.append(getGrossTonnage());
		sb.append(", netTonnage=");
		sb.append(getNetTonnage());
		sb.append(", positionOfShipInport=");
		sb.append(getPositionOfShipInport());
		sb.append(", briefParticularsOfVoyage=");
		sb.append(getBriefParticularsOfVoyage());
		sb.append(", briefDescriptionOfTheCargo=");
		sb.append(getBriefDescriptionOfTheCargo());
		sb.append(", numberOfCrew=");
		sb.append(getNumberOfCrew());
		sb.append(", numberOfPassengers=");
		sb.append(getNumberOfPassengers());
		sb.append(", shipRequirementsInTermsOfWaste=");
		sb.append(getShipRequirementsInTermsOfWaste());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", numberCargoDeclaration=");
		sb.append(getNumberCargoDeclaration());
		sb.append(", numberShipStoreDeclaration=");
		sb.append(getNumberShipStoreDeclaration());
		sb.append(", numberCrewList=");
		sb.append(getNumberCrewList());
		sb.append(", numberPassengerList=");
		sb.append(getNumberPassengerList());
		sb.append(", numberCrewEffects=");
		sb.append(getNumberCrewEffects());
		sb.append(", numberHealthMaritime=");
		sb.append(getNumberHealthMaritime());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", masterSigned=");
		sb.append(getMasterSigned());
		sb.append(", masterSignedImage=");
		sb.append(getMasterSignedImage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(148);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.TempGeneralDeclaration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isArrival</column-name><column-value><![CDATA[");
		sb.append(getIsArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imoNumber</column-name><column-value><![CDATA[");
		sb.append(getImoNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>voyageNumber</column-name><column-value><![CDATA[");
		sb.append(getVoyageNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portOfArrivalCode</column-name><column-value><![CDATA[");
		sb.append(getPortOfArrivalCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfArrival</column-name><column-value><![CDATA[");
		sb.append(getDateOfArrival());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portHarbourCode</column-name><column-value><![CDATA[");
		sb.append(getPortHarbourCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portWharfCode</column-name><column-value><![CDATA[");
		sb.append(getPortWharfCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfMaster</column-name><column-value><![CDATA[");
		sb.append(getNameOfMaster());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortOfCallCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortOfCallCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryNumber</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryDate</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateOfRegistryPortName</column-name><column-value><![CDATA[");
		sb.append(getCertificateOfRegistryPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxCodeOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getTaxCodeOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShipownersAgents</column-name><column-value><![CDATA[");
		sb.append(getNameOfShipownersAgents());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyAddress</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyPhone</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyFax</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyFax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyEmail</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grossTonnage</column-name><column-value><![CDATA[");
		sb.append(getGrossTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netTonnage</column-name><column-value><![CDATA[");
		sb.append(getNetTonnage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionOfShipInport</column-name><column-value><![CDATA[");
		sb.append(getPositionOfShipInport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefParticularsOfVoyage</column-name><column-value><![CDATA[");
		sb.append(getBriefParticularsOfVoyage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>briefDescriptionOfTheCargo</column-name><column-value><![CDATA[");
		sb.append(getBriefDescriptionOfTheCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfCrew</column-name><column-value><![CDATA[");
		sb.append(getNumberOfCrew());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPassengers</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPassengers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipRequirementsInTermsOfWaste</column-name><column-value><![CDATA[");
		sb.append(getShipRequirementsInTermsOfWaste());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCargoDeclaration</column-name><column-value><![CDATA[");
		sb.append(getNumberCargoDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberShipStoreDeclaration</column-name><column-value><![CDATA[");
		sb.append(getNumberShipStoreDeclaration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCrewList</column-name><column-value><![CDATA[");
		sb.append(getNumberCrewList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberPassengerList</column-name><column-value><![CDATA[");
		sb.append(getNumberPassengerList());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberCrewEffects</column-name><column-value><![CDATA[");
		sb.append(getNumberCrewEffects());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberHealthMaritime</column-name><column-value><![CDATA[");
		sb.append(getNumberHealthMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSigned</column-name><column-value><![CDATA[");
		sb.append(getMasterSigned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>masterSignedImage</column-name><column-value><![CDATA[");
		sb.append(getMasterSignedImage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempGeneralDeclaration.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TempGeneralDeclaration.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _userCreated;
	private int _isArrival;
	private String _nameOfShip;
	private String _shipTypeCode;
	private String _imoNumber;
	private String _callSign;
	private String _voyageNumber;
	private String _portOfArrivalCode;
	private Date _dateOfArrival;
	private String _portHarbourCode;
	private String _portRegionCode;
	private String _portWharfCode;
	private String _flagStateOfShip;
	private String _nameOfMaster;
	private String _lastPortOfCallCode;
	private String _certificateOfRegistryNumber;
	private Date _certificateOfRegistryDate;
	private String _certificateOfRegistryPortName;
	private String _taxCodeOfShipownersAgents;
	private String _nameOfShipownersAgents;
	private String _shipAgencyAddress;
	private String _shipAgencyPhone;
	private String _shipAgencyFax;
	private String _shipAgencyEmail;
	private double _grossTonnage;
	private double _netTonnage;
	private String _positionOfShipInport;
	private String _briefParticularsOfVoyage;
	private String _briefDescriptionOfTheCargo;
	private int _numberOfCrew;
	private int _numberOfPassengers;
	private String _shipRequirementsInTermsOfWaste;
	private String _remarks;
	private String _numberCargoDeclaration;
	private String _numberShipStoreDeclaration;
	private String _numberCrewList;
	private String _numberPassengerList;
	private String _numberCrewEffects;
	private String _numberHealthMaritime;
	private String _signPlace;
	private Date _signDate;
	private int _masterSigned;
	private int _masterSignedImage;
	private long _columnBitmask;
	private TempGeneralDeclaration _escapedModel;
}