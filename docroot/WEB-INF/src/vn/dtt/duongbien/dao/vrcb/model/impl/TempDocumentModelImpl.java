/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.TempDocument;
import vn.dtt.duongbien.dao.vrcb.model.TempDocumentModel;
import vn.dtt.duongbien.dao.vrcb.model.TempDocumentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TempDocument service. Represents a row in the &quot;TEMP_DOCUMENT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.TempDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempDocumentImpl}.
 * </p>
 *
 * @author longdm
 * @see TempDocumentImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.TempDocument
 * @see vn.dtt.duongbien.dao.vrcb.model.TempDocumentModel
 * @generated
 */
@JSON(strict = true)
public class TempDocumentModelImpl extends BaseModelImpl<TempDocument>
	implements TempDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp document model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.TempDocument} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_DOCUMENT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "DocumentTypeCode", Types.VARCHAR },
			{ "UserCreated", Types.VARCHAR },
			{ "ShipAgencyCode", Types.VARCHAR },
			{ "ShipName", Types.VARCHAR },
			{ "ShipTypeCode", Types.VARCHAR },
			{ "StateCode", Types.VARCHAR },
			{ "ShipCaptain", Types.VARCHAR },
			{ "IMO", Types.VARCHAR },
			{ "GRT", Types.DOUBLE },
			{ "NT", Types.DOUBLE },
			{ "DWT", Types.DOUBLE },
			{ "UnitGRT", Types.VARCHAR },
			{ "UnitNT", Types.VARCHAR },
			{ "UnitDWT", Types.VARCHAR },
			{ "CallSign", Types.VARCHAR },
			{ "PreDocumentName", Types.VARCHAR },
			{ "CreatedDate", Types.TIMESTAMP },
			{ "LastModifiedDate", Types.TIMESTAMP },
			{ "FlowFlag", Types.INTEGER },
			{ "DocumentStatusCode", Types.INTEGER },
			{ "LocationCode", Types.VARCHAR },
			{ "MaritimeCode", Types.VARCHAR },
			{ "PortRegionCode", Types.VARCHAR },
			{ "PortCode", Types.VARCHAR },
			{ "LastPortCode", Types.VARCHAR },
			{ "ShipPosition", Types.INTEGER },
			{ "ShipOwnerCode", Types.VARCHAR },
			{ "ArrivalShipAgency", Types.VARCHAR },
			{ "DepartureShipAgency", Types.VARCHAR },
			{ "ShipDateFrom", Types.TIMESTAMP },
			{ "ShipDateTo", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_DOCUMENT (ID LONG not null primary key,RequestCode VARCHAR(75) null,RequestState INTEGER,DocumentName LONG,DocumentYear INTEGER,DocumentTypeCode VARCHAR(75) null,UserCreated VARCHAR(75) null,ShipAgencyCode VARCHAR(75) null,ShipName VARCHAR(75) null,ShipTypeCode VARCHAR(75) null,StateCode VARCHAR(75) null,ShipCaptain VARCHAR(75) null,IMO VARCHAR(75) null,GRT DOUBLE,NT DOUBLE,DWT DOUBLE,UnitGRT VARCHAR(75) null,UnitNT VARCHAR(75) null,UnitDWT VARCHAR(75) null,CallSign VARCHAR(75) null,PreDocumentName VARCHAR(75) null,CreatedDate DATE null,LastModifiedDate DATE null,FlowFlag INTEGER,DocumentStatusCode INTEGER,LocationCode VARCHAR(75) null,MaritimeCode VARCHAR(75) null,PortRegionCode VARCHAR(75) null,PortCode VARCHAR(75) null,LastPortCode VARCHAR(75) null,ShipPosition INTEGER,ShipOwnerCode VARCHAR(75) null,ArrivalShipAgency VARCHAR(75) null,DepartureShipAgency VARCHAR(75) null,ShipDateFrom DATE null,ShipDateTo DATE null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_DOCUMENT";
	public static final String ORDER_BY_JPQL = " ORDER BY tempDocument.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_DOCUMENT.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDocument"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDocument"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.TempDocument"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempDocument toModel(TempDocumentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TempDocument model = new TempDocumentImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestState(soapModel.getRequestState());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setDocumentTypeCode(soapModel.getDocumentTypeCode());
		model.setUserCreated(soapModel.getUserCreated());
		model.setShipAgencyCode(soapModel.getShipAgencyCode());
		model.setShipName(soapModel.getShipName());
		model.setShipTypeCode(soapModel.getShipTypeCode());
		model.setStateCode(soapModel.getStateCode());
		model.setShipCaptain(soapModel.getShipCaptain());
		model.setImo(soapModel.getImo());
		model.setGrt(soapModel.getGrt());
		model.setNt(soapModel.getNt());
		model.setDwt(soapModel.getDwt());
		model.setUnitGRT(soapModel.getUnitGRT());
		model.setUnitNT(soapModel.getUnitNT());
		model.setUnitDWT(soapModel.getUnitDWT());
		model.setCallSign(soapModel.getCallSign());
		model.setPreDocumentName(soapModel.getPreDocumentName());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setLastModifiedDate(soapModel.getLastModifiedDate());
		model.setFlowFlag(soapModel.getFlowFlag());
		model.setDocumentStatusCode(soapModel.getDocumentStatusCode());
		model.setLocationCode(soapModel.getLocationCode());
		model.setMaritimeCode(soapModel.getMaritimeCode());
		model.setPortRegionCode(soapModel.getPortRegionCode());
		model.setPortCode(soapModel.getPortCode());
		model.setLastPortCode(soapModel.getLastPortCode());
		model.setShipPosition(soapModel.getShipPosition());
		model.setShipOwnerCode(soapModel.getShipOwnerCode());
		model.setArrivalShipAgency(soapModel.getArrivalShipAgency());
		model.setDepartureShipAgency(soapModel.getDepartureShipAgency());
		model.setShipDateFrom(soapModel.getShipDateFrom());
		model.setShipDateTo(soapModel.getShipDateTo());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempDocument> toModels(TempDocumentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TempDocument> models = new ArrayList<TempDocument>(soapModels.length);

		for (TempDocumentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.TempDocument"));

	public TempDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TempDocument.class;
	}

	@Override
	public String getModelClassName() {
		return TempDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("requestState", getRequestState());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("documentTypeCode", getDocumentTypeCode());
		attributes.put("userCreated", getUserCreated());
		attributes.put("shipAgencyCode", getShipAgencyCode());
		attributes.put("shipName", getShipName());
		attributes.put("shipTypeCode", getShipTypeCode());
		attributes.put("stateCode", getStateCode());
		attributes.put("shipCaptain", getShipCaptain());
		attributes.put("imo", getImo());
		attributes.put("grt", getGrt());
		attributes.put("nt", getNt());
		attributes.put("dwt", getDwt());
		attributes.put("unitGRT", getUnitGRT());
		attributes.put("unitNT", getUnitNT());
		attributes.put("unitDWT", getUnitDWT());
		attributes.put("callSign", getCallSign());
		attributes.put("preDocumentName", getPreDocumentName());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("lastModifiedDate", getLastModifiedDate());
		attributes.put("flowFlag", getFlowFlag());
		attributes.put("documentStatusCode", getDocumentStatusCode());
		attributes.put("locationCode", getLocationCode());
		attributes.put("maritimeCode", getMaritimeCode());
		attributes.put("portRegionCode", getPortRegionCode());
		attributes.put("portCode", getPortCode());
		attributes.put("lastPortCode", getLastPortCode());
		attributes.put("shipPosition", getShipPosition());
		attributes.put("shipOwnerCode", getShipOwnerCode());
		attributes.put("arrivalShipAgency", getArrivalShipAgency());
		attributes.put("departureShipAgency", getDepartureShipAgency());
		attributes.put("shipDateFrom", getShipDateFrom());
		attributes.put("shipDateTo", getShipDateTo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String documentTypeCode = (String)attributes.get("documentTypeCode");

		if (documentTypeCode != null) {
			setDocumentTypeCode(documentTypeCode);
		}

		String userCreated = (String)attributes.get("userCreated");

		if (userCreated != null) {
			setUserCreated(userCreated);
		}

		String shipAgencyCode = (String)attributes.get("shipAgencyCode");

		if (shipAgencyCode != null) {
			setShipAgencyCode(shipAgencyCode);
		}

		String shipName = (String)attributes.get("shipName");

		if (shipName != null) {
			setShipName(shipName);
		}

		String shipTypeCode = (String)attributes.get("shipTypeCode");

		if (shipTypeCode != null) {
			setShipTypeCode(shipTypeCode);
		}

		String stateCode = (String)attributes.get("stateCode");

		if (stateCode != null) {
			setStateCode(stateCode);
		}

		String shipCaptain = (String)attributes.get("shipCaptain");

		if (shipCaptain != null) {
			setShipCaptain(shipCaptain);
		}

		String imo = (String)attributes.get("imo");

		if (imo != null) {
			setImo(imo);
		}

		Double grt = (Double)attributes.get("grt");

		if (grt != null) {
			setGrt(grt);
		}

		Double nt = (Double)attributes.get("nt");

		if (nt != null) {
			setNt(nt);
		}

		Double dwt = (Double)attributes.get("dwt");

		if (dwt != null) {
			setDwt(dwt);
		}

		String unitGRT = (String)attributes.get("unitGRT");

		if (unitGRT != null) {
			setUnitGRT(unitGRT);
		}

		String unitNT = (String)attributes.get("unitNT");

		if (unitNT != null) {
			setUnitNT(unitNT);
		}

		String unitDWT = (String)attributes.get("unitDWT");

		if (unitDWT != null) {
			setUnitDWT(unitDWT);
		}

		String callSign = (String)attributes.get("callSign");

		if (callSign != null) {
			setCallSign(callSign);
		}

		String preDocumentName = (String)attributes.get("preDocumentName");

		if (preDocumentName != null) {
			setPreDocumentName(preDocumentName);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date lastModifiedDate = (Date)attributes.get("lastModifiedDate");

		if (lastModifiedDate != null) {
			setLastModifiedDate(lastModifiedDate);
		}

		Integer flowFlag = (Integer)attributes.get("flowFlag");

		if (flowFlag != null) {
			setFlowFlag(flowFlag);
		}

		Integer documentStatusCode = (Integer)attributes.get(
				"documentStatusCode");

		if (documentStatusCode != null) {
			setDocumentStatusCode(documentStatusCode);
		}

		String locationCode = (String)attributes.get("locationCode");

		if (locationCode != null) {
			setLocationCode(locationCode);
		}

		String maritimeCode = (String)attributes.get("maritimeCode");

		if (maritimeCode != null) {
			setMaritimeCode(maritimeCode);
		}

		String portRegionCode = (String)attributes.get("portRegionCode");

		if (portRegionCode != null) {
			setPortRegionCode(portRegionCode);
		}

		String portCode = (String)attributes.get("portCode");

		if (portCode != null) {
			setPortCode(portCode);
		}

		String lastPortCode = (String)attributes.get("lastPortCode");

		if (lastPortCode != null) {
			setLastPortCode(lastPortCode);
		}

		Integer shipPosition = (Integer)attributes.get("shipPosition");

		if (shipPosition != null) {
			setShipPosition(shipPosition);
		}

		String shipOwnerCode = (String)attributes.get("shipOwnerCode");

		if (shipOwnerCode != null) {
			setShipOwnerCode(shipOwnerCode);
		}

		String arrivalShipAgency = (String)attributes.get("arrivalShipAgency");

		if (arrivalShipAgency != null) {
			setArrivalShipAgency(arrivalShipAgency);
		}

		String departureShipAgency = (String)attributes.get(
				"departureShipAgency");

		if (departureShipAgency != null) {
			setDepartureShipAgency(departureShipAgency);
		}

		Date shipDateFrom = (Date)attributes.get("shipDateFrom");

		if (shipDateFrom != null) {
			setShipDateFrom(shipDateFrom);
		}

		Date shipDateTo = (Date)attributes.get("shipDateTo");

		if (shipDateTo != null) {
			setShipDateTo(shipDateTo);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getDocumentTypeCode() {
		if (_documentTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentTypeCode;
		}
	}

	@Override
	public void setDocumentTypeCode(String documentTypeCode) {
		_documentTypeCode = documentTypeCode;
	}

	@JSON
	@Override
	public String getUserCreated() {
		if (_userCreated == null) {
			return StringPool.BLANK;
		}
		else {
			return _userCreated;
		}
	}

	@Override
	public void setUserCreated(String userCreated) {
		_userCreated = userCreated;
	}

	@JSON
	@Override
	public String getShipAgencyCode() {
		if (_shipAgencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipAgencyCode;
		}
	}

	@Override
	public void setShipAgencyCode(String shipAgencyCode) {
		_shipAgencyCode = shipAgencyCode;
	}

	@JSON
	@Override
	public String getShipName() {
		if (_shipName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipName;
		}
	}

	@Override
	public void setShipName(String shipName) {
		_shipName = shipName;
	}

	@JSON
	@Override
	public String getShipTypeCode() {
		if (_shipTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipTypeCode;
		}
	}

	@Override
	public void setShipTypeCode(String shipTypeCode) {
		_shipTypeCode = shipTypeCode;
	}

	@JSON
	@Override
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	@Override
	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@JSON
	@Override
	public String getShipCaptain() {
		if (_shipCaptain == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipCaptain;
		}
	}

	@Override
	public void setShipCaptain(String shipCaptain) {
		_shipCaptain = shipCaptain;
	}

	@JSON
	@Override
	public String getImo() {
		if (_imo == null) {
			return StringPool.BLANK;
		}
		else {
			return _imo;
		}
	}

	@Override
	public void setImo(String imo) {
		_imo = imo;
	}

	@JSON
	@Override
	public double getGrt() {
		return _grt;
	}

	@Override
	public void setGrt(double grt) {
		_grt = grt;
	}

	@JSON
	@Override
	public double getNt() {
		return _nt;
	}

	@Override
	public void setNt(double nt) {
		_nt = nt;
	}

	@JSON
	@Override
	public double getDwt() {
		return _dwt;
	}

	@Override
	public void setDwt(double dwt) {
		_dwt = dwt;
	}

	@JSON
	@Override
	public String getUnitGRT() {
		if (_unitGRT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitGRT;
		}
	}

	@Override
	public void setUnitGRT(String unitGRT) {
		_unitGRT = unitGRT;
	}

	@JSON
	@Override
	public String getUnitNT() {
		if (_unitNT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitNT;
		}
	}

	@Override
	public void setUnitNT(String unitNT) {
		_unitNT = unitNT;
	}

	@JSON
	@Override
	public String getUnitDWT() {
		if (_unitDWT == null) {
			return StringPool.BLANK;
		}
		else {
			return _unitDWT;
		}
	}

	@Override
	public void setUnitDWT(String unitDWT) {
		_unitDWT = unitDWT;
	}

	@JSON
	@Override
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	@Override
	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	@Override
	public String getPreDocumentName() {
		if (_preDocumentName == null) {
			return StringPool.BLANK;
		}
		else {
			return _preDocumentName;
		}
	}

	@Override
	public void setPreDocumentName(String preDocumentName) {
		_preDocumentName = preDocumentName;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getLastModifiedDate() {
		return _lastModifiedDate;
	}

	@Override
	public void setLastModifiedDate(Date lastModifiedDate) {
		_lastModifiedDate = lastModifiedDate;
	}

	@JSON
	@Override
	public int getFlowFlag() {
		return _flowFlag;
	}

	@Override
	public void setFlowFlag(int flowFlag) {
		_flowFlag = flowFlag;
	}

	@JSON
	@Override
	public int getDocumentStatusCode() {
		return _documentStatusCode;
	}

	@Override
	public void setDocumentStatusCode(int documentStatusCode) {
		_documentStatusCode = documentStatusCode;
	}

	@JSON
	@Override
	public String getLocationCode() {
		if (_locationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationCode;
		}
	}

	@Override
	public void setLocationCode(String locationCode) {
		_locationCode = locationCode;
	}

	@JSON
	@Override
	public String getMaritimeCode() {
		if (_maritimeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritimeCode;
		}
	}

	@Override
	public void setMaritimeCode(String maritimeCode) {
		_maritimeCode = maritimeCode;
	}

	@JSON
	@Override
	public String getPortRegionCode() {
		if (_portRegionCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portRegionCode;
		}
	}

	@Override
	public void setPortRegionCode(String portRegionCode) {
		_portRegionCode = portRegionCode;
	}

	@JSON
	@Override
	public String getPortCode() {
		if (_portCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portCode;
		}
	}

	@Override
	public void setPortCode(String portCode) {
		_portCode = portCode;
	}

	@JSON
	@Override
	public String getLastPortCode() {
		if (_lastPortCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastPortCode;
		}
	}

	@Override
	public void setLastPortCode(String lastPortCode) {
		_lastPortCode = lastPortCode;
	}

	@JSON
	@Override
	public int getShipPosition() {
		return _shipPosition;
	}

	@Override
	public void setShipPosition(int shipPosition) {
		_shipPosition = shipPosition;
	}

	@JSON
	@Override
	public String getShipOwnerCode() {
		if (_shipOwnerCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipOwnerCode;
		}
	}

	@Override
	public void setShipOwnerCode(String shipOwnerCode) {
		_shipOwnerCode = shipOwnerCode;
	}

	@JSON
	@Override
	public String getArrivalShipAgency() {
		if (_arrivalShipAgency == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalShipAgency;
		}
	}

	@Override
	public void setArrivalShipAgency(String arrivalShipAgency) {
		_arrivalShipAgency = arrivalShipAgency;
	}

	@JSON
	@Override
	public String getDepartureShipAgency() {
		if (_departureShipAgency == null) {
			return StringPool.BLANK;
		}
		else {
			return _departureShipAgency;
		}
	}

	@Override
	public void setDepartureShipAgency(String departureShipAgency) {
		_departureShipAgency = departureShipAgency;
	}

	@JSON
	@Override
	public Date getShipDateFrom() {
		return _shipDateFrom;
	}

	@Override
	public void setShipDateFrom(Date shipDateFrom) {
		_shipDateFrom = shipDateFrom;
	}

	@JSON
	@Override
	public Date getShipDateTo() {
		return _shipDateTo;
	}

	@Override
	public void setShipDateTo(Date shipDateTo) {
		_shipDateTo = shipDateTo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TempDocument.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TempDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TempDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TempDocumentImpl tempDocumentImpl = new TempDocumentImpl();

		tempDocumentImpl.setId(getId());
		tempDocumentImpl.setRequestCode(getRequestCode());
		tempDocumentImpl.setRequestState(getRequestState());
		tempDocumentImpl.setDocumentName(getDocumentName());
		tempDocumentImpl.setDocumentYear(getDocumentYear());
		tempDocumentImpl.setDocumentTypeCode(getDocumentTypeCode());
		tempDocumentImpl.setUserCreated(getUserCreated());
		tempDocumentImpl.setShipAgencyCode(getShipAgencyCode());
		tempDocumentImpl.setShipName(getShipName());
		tempDocumentImpl.setShipTypeCode(getShipTypeCode());
		tempDocumentImpl.setStateCode(getStateCode());
		tempDocumentImpl.setShipCaptain(getShipCaptain());
		tempDocumentImpl.setImo(getImo());
		tempDocumentImpl.setGrt(getGrt());
		tempDocumentImpl.setNt(getNt());
		tempDocumentImpl.setDwt(getDwt());
		tempDocumentImpl.setUnitGRT(getUnitGRT());
		tempDocumentImpl.setUnitNT(getUnitNT());
		tempDocumentImpl.setUnitDWT(getUnitDWT());
		tempDocumentImpl.setCallSign(getCallSign());
		tempDocumentImpl.setPreDocumentName(getPreDocumentName());
		tempDocumentImpl.setCreatedDate(getCreatedDate());
		tempDocumentImpl.setLastModifiedDate(getLastModifiedDate());
		tempDocumentImpl.setFlowFlag(getFlowFlag());
		tempDocumentImpl.setDocumentStatusCode(getDocumentStatusCode());
		tempDocumentImpl.setLocationCode(getLocationCode());
		tempDocumentImpl.setMaritimeCode(getMaritimeCode());
		tempDocumentImpl.setPortRegionCode(getPortRegionCode());
		tempDocumentImpl.setPortCode(getPortCode());
		tempDocumentImpl.setLastPortCode(getLastPortCode());
		tempDocumentImpl.setShipPosition(getShipPosition());
		tempDocumentImpl.setShipOwnerCode(getShipOwnerCode());
		tempDocumentImpl.setArrivalShipAgency(getArrivalShipAgency());
		tempDocumentImpl.setDepartureShipAgency(getDepartureShipAgency());
		tempDocumentImpl.setShipDateFrom(getShipDateFrom());
		tempDocumentImpl.setShipDateTo(getShipDateTo());

		tempDocumentImpl.resetOriginalValues();

		return tempDocumentImpl;
	}

	@Override
	public int compareTo(TempDocument tempDocument) {
		int value = 0;

		if (getId() < tempDocument.getId()) {
			value = -1;
		}
		else if (getId() > tempDocument.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TempDocument)) {
			return false;
		}

		TempDocument tempDocument = (TempDocument)obj;

		long primaryKey = tempDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempDocumentModelImpl tempDocumentModelImpl = this;

		tempDocumentModelImpl._originalRequestCode = tempDocumentModelImpl._requestCode;

		tempDocumentModelImpl._originalRequestState = tempDocumentModelImpl._requestState;

		tempDocumentModelImpl._setOriginalRequestState = false;

		tempDocumentModelImpl._originalDocumentName = tempDocumentModelImpl._documentName;

		tempDocumentModelImpl._setOriginalDocumentName = false;

		tempDocumentModelImpl._originalDocumentYear = tempDocumentModelImpl._documentYear;

		tempDocumentModelImpl._setOriginalDocumentYear = false;

		tempDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempDocument> toCacheModel() {
		TempDocumentCacheModel tempDocumentCacheModel = new TempDocumentCacheModel();

		tempDocumentCacheModel.id = getId();

		tempDocumentCacheModel.requestCode = getRequestCode();

		String requestCode = tempDocumentCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempDocumentCacheModel.requestCode = null;
		}

		tempDocumentCacheModel.requestState = getRequestState();

		tempDocumentCacheModel.documentName = getDocumentName();

		tempDocumentCacheModel.documentYear = getDocumentYear();

		tempDocumentCacheModel.documentTypeCode = getDocumentTypeCode();

		String documentTypeCode = tempDocumentCacheModel.documentTypeCode;

		if ((documentTypeCode != null) && (documentTypeCode.length() == 0)) {
			tempDocumentCacheModel.documentTypeCode = null;
		}

		tempDocumentCacheModel.userCreated = getUserCreated();

		String userCreated = tempDocumentCacheModel.userCreated;

		if ((userCreated != null) && (userCreated.length() == 0)) {
			tempDocumentCacheModel.userCreated = null;
		}

		tempDocumentCacheModel.shipAgencyCode = getShipAgencyCode();

		String shipAgencyCode = tempDocumentCacheModel.shipAgencyCode;

		if ((shipAgencyCode != null) && (shipAgencyCode.length() == 0)) {
			tempDocumentCacheModel.shipAgencyCode = null;
		}

		tempDocumentCacheModel.shipName = getShipName();

		String shipName = tempDocumentCacheModel.shipName;

		if ((shipName != null) && (shipName.length() == 0)) {
			tempDocumentCacheModel.shipName = null;
		}

		tempDocumentCacheModel.shipTypeCode = getShipTypeCode();

		String shipTypeCode = tempDocumentCacheModel.shipTypeCode;

		if ((shipTypeCode != null) && (shipTypeCode.length() == 0)) {
			tempDocumentCacheModel.shipTypeCode = null;
		}

		tempDocumentCacheModel.stateCode = getStateCode();

		String stateCode = tempDocumentCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			tempDocumentCacheModel.stateCode = null;
		}

		tempDocumentCacheModel.shipCaptain = getShipCaptain();

		String shipCaptain = tempDocumentCacheModel.shipCaptain;

		if ((shipCaptain != null) && (shipCaptain.length() == 0)) {
			tempDocumentCacheModel.shipCaptain = null;
		}

		tempDocumentCacheModel.imo = getImo();

		String imo = tempDocumentCacheModel.imo;

		if ((imo != null) && (imo.length() == 0)) {
			tempDocumentCacheModel.imo = null;
		}

		tempDocumentCacheModel.grt = getGrt();

		tempDocumentCacheModel.nt = getNt();

		tempDocumentCacheModel.dwt = getDwt();

		tempDocumentCacheModel.unitGRT = getUnitGRT();

		String unitGRT = tempDocumentCacheModel.unitGRT;

		if ((unitGRT != null) && (unitGRT.length() == 0)) {
			tempDocumentCacheModel.unitGRT = null;
		}

		tempDocumentCacheModel.unitNT = getUnitNT();

		String unitNT = tempDocumentCacheModel.unitNT;

		if ((unitNT != null) && (unitNT.length() == 0)) {
			tempDocumentCacheModel.unitNT = null;
		}

		tempDocumentCacheModel.unitDWT = getUnitDWT();

		String unitDWT = tempDocumentCacheModel.unitDWT;

		if ((unitDWT != null) && (unitDWT.length() == 0)) {
			tempDocumentCacheModel.unitDWT = null;
		}

		tempDocumentCacheModel.callSign = getCallSign();

		String callSign = tempDocumentCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			tempDocumentCacheModel.callSign = null;
		}

		tempDocumentCacheModel.preDocumentName = getPreDocumentName();

		String preDocumentName = tempDocumentCacheModel.preDocumentName;

		if ((preDocumentName != null) && (preDocumentName.length() == 0)) {
			tempDocumentCacheModel.preDocumentName = null;
		}

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			tempDocumentCacheModel.createdDate = createdDate.getTime();
		}
		else {
			tempDocumentCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date lastModifiedDate = getLastModifiedDate();

		if (lastModifiedDate != null) {
			tempDocumentCacheModel.lastModifiedDate = lastModifiedDate.getTime();
		}
		else {
			tempDocumentCacheModel.lastModifiedDate = Long.MIN_VALUE;
		}

		tempDocumentCacheModel.flowFlag = getFlowFlag();

		tempDocumentCacheModel.documentStatusCode = getDocumentStatusCode();

		tempDocumentCacheModel.locationCode = getLocationCode();

		String locationCode = tempDocumentCacheModel.locationCode;

		if ((locationCode != null) && (locationCode.length() == 0)) {
			tempDocumentCacheModel.locationCode = null;
		}

		tempDocumentCacheModel.maritimeCode = getMaritimeCode();

		String maritimeCode = tempDocumentCacheModel.maritimeCode;

		if ((maritimeCode != null) && (maritimeCode.length() == 0)) {
			tempDocumentCacheModel.maritimeCode = null;
		}

		tempDocumentCacheModel.portRegionCode = getPortRegionCode();

		String portRegionCode = tempDocumentCacheModel.portRegionCode;

		if ((portRegionCode != null) && (portRegionCode.length() == 0)) {
			tempDocumentCacheModel.portRegionCode = null;
		}

		tempDocumentCacheModel.portCode = getPortCode();

		String portCode = tempDocumentCacheModel.portCode;

		if ((portCode != null) && (portCode.length() == 0)) {
			tempDocumentCacheModel.portCode = null;
		}

		tempDocumentCacheModel.lastPortCode = getLastPortCode();

		String lastPortCode = tempDocumentCacheModel.lastPortCode;

		if ((lastPortCode != null) && (lastPortCode.length() == 0)) {
			tempDocumentCacheModel.lastPortCode = null;
		}

		tempDocumentCacheModel.shipPosition = getShipPosition();

		tempDocumentCacheModel.shipOwnerCode = getShipOwnerCode();

		String shipOwnerCode = tempDocumentCacheModel.shipOwnerCode;

		if ((shipOwnerCode != null) && (shipOwnerCode.length() == 0)) {
			tempDocumentCacheModel.shipOwnerCode = null;
		}

		tempDocumentCacheModel.arrivalShipAgency = getArrivalShipAgency();

		String arrivalShipAgency = tempDocumentCacheModel.arrivalShipAgency;

		if ((arrivalShipAgency != null) && (arrivalShipAgency.length() == 0)) {
			tempDocumentCacheModel.arrivalShipAgency = null;
		}

		tempDocumentCacheModel.departureShipAgency = getDepartureShipAgency();

		String departureShipAgency = tempDocumentCacheModel.departureShipAgency;

		if ((departureShipAgency != null) &&
				(departureShipAgency.length() == 0)) {
			tempDocumentCacheModel.departureShipAgency = null;
		}

		Date shipDateFrom = getShipDateFrom();

		if (shipDateFrom != null) {
			tempDocumentCacheModel.shipDateFrom = shipDateFrom.getTime();
		}
		else {
			tempDocumentCacheModel.shipDateFrom = Long.MIN_VALUE;
		}

		Date shipDateTo = getShipDateTo();

		if (shipDateTo != null) {
			tempDocumentCacheModel.shipDateTo = shipDateTo.getTime();
		}
		else {
			tempDocumentCacheModel.shipDateTo = Long.MIN_VALUE;
		}

		return tempDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", documentTypeCode=");
		sb.append(getDocumentTypeCode());
		sb.append(", userCreated=");
		sb.append(getUserCreated());
		sb.append(", shipAgencyCode=");
		sb.append(getShipAgencyCode());
		sb.append(", shipName=");
		sb.append(getShipName());
		sb.append(", shipTypeCode=");
		sb.append(getShipTypeCode());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", shipCaptain=");
		sb.append(getShipCaptain());
		sb.append(", imo=");
		sb.append(getImo());
		sb.append(", grt=");
		sb.append(getGrt());
		sb.append(", nt=");
		sb.append(getNt());
		sb.append(", dwt=");
		sb.append(getDwt());
		sb.append(", unitGRT=");
		sb.append(getUnitGRT());
		sb.append(", unitNT=");
		sb.append(getUnitNT());
		sb.append(", unitDWT=");
		sb.append(getUnitDWT());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", preDocumentName=");
		sb.append(getPreDocumentName());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", lastModifiedDate=");
		sb.append(getLastModifiedDate());
		sb.append(", flowFlag=");
		sb.append(getFlowFlag());
		sb.append(", documentStatusCode=");
		sb.append(getDocumentStatusCode());
		sb.append(", locationCode=");
		sb.append(getLocationCode());
		sb.append(", maritimeCode=");
		sb.append(getMaritimeCode());
		sb.append(", portRegionCode=");
		sb.append(getPortRegionCode());
		sb.append(", portCode=");
		sb.append(getPortCode());
		sb.append(", lastPortCode=");
		sb.append(getLastPortCode());
		sb.append(", shipPosition=");
		sb.append(getShipPosition());
		sb.append(", shipOwnerCode=");
		sb.append(getShipOwnerCode());
		sb.append(", arrivalShipAgency=");
		sb.append(getArrivalShipAgency());
		sb.append(", departureShipAgency=");
		sb.append(getDepartureShipAgency());
		sb.append(", shipDateFrom=");
		sb.append(getShipDateFrom());
		sb.append(", shipDateTo=");
		sb.append(getShipDateTo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.TempDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentTypeCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreated</column-name><column-value><![CDATA[");
		sb.append(getUserCreated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipAgencyCode</column-name><column-value><![CDATA[");
		sb.append(getShipAgencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipName</column-name><column-value><![CDATA[");
		sb.append(getShipName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShipTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipCaptain</column-name><column-value><![CDATA[");
		sb.append(getShipCaptain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imo</column-name><column-value><![CDATA[");
		sb.append(getImo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>grt</column-name><column-value><![CDATA[");
		sb.append(getGrt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nt</column-name><column-value><![CDATA[");
		sb.append(getNt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dwt</column-name><column-value><![CDATA[");
		sb.append(getDwt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitGRT</column-name><column-value><![CDATA[");
		sb.append(getUnitGRT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitNT</column-name><column-value><![CDATA[");
		sb.append(getUnitNT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unitDWT</column-name><column-value><![CDATA[");
		sb.append(getUnitDWT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preDocumentName</column-name><column-value><![CDATA[");
		sb.append(getPreDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastModifiedDate</column-name><column-value><![CDATA[");
		sb.append(getLastModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flowFlag</column-name><column-value><![CDATA[");
		sb.append(getFlowFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentStatusCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationCode</column-name><column-value><![CDATA[");
		sb.append(getLocationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritimeCode</column-name><column-value><![CDATA[");
		sb.append(getMaritimeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portRegionCode</column-name><column-value><![CDATA[");
		sb.append(getPortRegionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portCode</column-name><column-value><![CDATA[");
		sb.append(getPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPortCode</column-name><column-value><![CDATA[");
		sb.append(getLastPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipPosition</column-name><column-value><![CDATA[");
		sb.append(getShipPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipOwnerCode</column-name><column-value><![CDATA[");
		sb.append(getShipOwnerCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalShipAgency</column-name><column-value><![CDATA[");
		sb.append(getArrivalShipAgency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departureShipAgency</column-name><column-value><![CDATA[");
		sb.append(getDepartureShipAgency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipDateFrom</column-name><column-value><![CDATA[");
		sb.append(getShipDateFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipDateTo</column-name><column-value><![CDATA[");
		sb.append(getShipDateTo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempDocument.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TempDocument.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _documentTypeCode;
	private String _userCreated;
	private String _shipAgencyCode;
	private String _shipName;
	private String _shipTypeCode;
	private String _stateCode;
	private String _shipCaptain;
	private String _imo;
	private double _grt;
	private double _nt;
	private double _dwt;
	private String _unitGRT;
	private String _unitNT;
	private String _unitDWT;
	private String _callSign;
	private String _preDocumentName;
	private Date _createdDate;
	private Date _lastModifiedDate;
	private int _flowFlag;
	private int _documentStatusCode;
	private String _locationCode;
	private String _maritimeCode;
	private String _portRegionCode;
	private String _portCode;
	private String _lastPortCode;
	private int _shipPosition;
	private String _shipOwnerCode;
	private String _arrivalShipAgency;
	private String _departureShipAgency;
	private Date _shipDateFrom;
	private Date _shipDateTo;
	private long _columnBitmask;
	private TempDocument _escapedModel;
}