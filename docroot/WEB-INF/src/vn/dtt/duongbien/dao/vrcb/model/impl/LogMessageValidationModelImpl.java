/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation;
import vn.dtt.duongbien.dao.vrcb.model.LogMessageValidationModel;
import vn.dtt.duongbien.dao.vrcb.model.LogMessageValidationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LogMessageValidation service. Represents a row in the &quot;LOG_MESSAGE_VALIDATION&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.LogMessageValidationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogMessageValidationImpl}.
 * </p>
 *
 * @author longdm
 * @see LogMessageValidationImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation
 * @see vn.dtt.duongbien.dao.vrcb.model.LogMessageValidationModel
 * @generated
 */
@JSON(strict = true)
public class LogMessageValidationModelImpl extends BaseModelImpl<LogMessageValidation>
	implements LogMessageValidationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log message validation model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation} interface instead.
	 */
	public static final String TABLE_NAME = "LOG_MESSAGE_VALIDATION";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "RequestDirection", Types.VARCHAR },
			{ "RequestDate", Types.TIMESTAMP },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "DocumentType", Types.VARCHAR },
			{ "TagProperty", Types.VARCHAR },
			{ "DataValidation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LOG_MESSAGE_VALIDATION (id LONG not null primary key,RequestCode VARCHAR(75) null,RequestDirection VARCHAR(75) null,RequestDate DATE null,DocumentName LONG,DocumentYear INTEGER,DocumentType VARCHAR(75) null,TagProperty VARCHAR(75) null,DataValidation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LOG_MESSAGE_VALIDATION";
	public static final String ORDER_BY_JPQL = " ORDER BY logMessageValidation.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LOG_MESSAGE_VALIDATION.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LogMessageValidation toModel(
		LogMessageValidationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LogMessageValidation model = new LogMessageValidationImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setRequestDirection(soapModel.getRequestDirection());
		model.setRequestDate(soapModel.getRequestDate());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setDocumentType(soapModel.getDocumentType());
		model.setTagProperty(soapModel.getTagProperty());
		model.setDataValidation(soapModel.getDataValidation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LogMessageValidation> toModels(
		LogMessageValidationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LogMessageValidation> models = new ArrayList<LogMessageValidation>(soapModels.length);

		for (LogMessageValidationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation"));

	public LogMessageValidationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogMessageValidation.class;
	}

	@Override
	public String getModelClassName() {
		return LogMessageValidation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("requestDirection", getRequestDirection());
		attributes.put("requestDate", getRequestDate());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("documentType", getDocumentType());
		attributes.put("tagProperty", getTagProperty());
		attributes.put("dataValidation", getDataValidation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		String requestDirection = (String)attributes.get("requestDirection");

		if (requestDirection != null) {
			setRequestDirection(requestDirection);
		}

		Date requestDate = (Date)attributes.get("requestDate");

		if (requestDate != null) {
			setRequestDate(requestDate);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String documentType = (String)attributes.get("documentType");

		if (documentType != null) {
			setDocumentType(documentType);
		}

		String tagProperty = (String)attributes.get("tagProperty");

		if (tagProperty != null) {
			setTagProperty(tagProperty);
		}

		String dataValidation = (String)attributes.get("dataValidation");

		if (dataValidation != null) {
			setDataValidation(dataValidation);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_requestCode = requestCode;
	}

	@JSON
	@Override
	public String getRequestDirection() {
		if (_requestDirection == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestDirection;
		}
	}

	@Override
	public void setRequestDirection(String requestDirection) {
		_requestDirection = requestDirection;
	}

	@JSON
	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getDocumentType() {
		if (_documentType == null) {
			return StringPool.BLANK;
		}
		else {
			return _documentType;
		}
	}

	@Override
	public void setDocumentType(String documentType) {
		_documentType = documentType;
	}

	@JSON
	@Override
	public String getTagProperty() {
		if (_tagProperty == null) {
			return StringPool.BLANK;
		}
		else {
			return _tagProperty;
		}
	}

	@Override
	public void setTagProperty(String tagProperty) {
		_tagProperty = tagProperty;
	}

	@JSON
	@Override
	public String getDataValidation() {
		if (_dataValidation == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataValidation;
		}
	}

	@Override
	public void setDataValidation(String dataValidation) {
		_dataValidation = dataValidation;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LogMessageValidation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogMessageValidation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogMessageValidation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogMessageValidationImpl logMessageValidationImpl = new LogMessageValidationImpl();

		logMessageValidationImpl.setId(getId());
		logMessageValidationImpl.setRequestCode(getRequestCode());
		logMessageValidationImpl.setRequestDirection(getRequestDirection());
		logMessageValidationImpl.setRequestDate(getRequestDate());
		logMessageValidationImpl.setDocumentName(getDocumentName());
		logMessageValidationImpl.setDocumentYear(getDocumentYear());
		logMessageValidationImpl.setDocumentType(getDocumentType());
		logMessageValidationImpl.setTagProperty(getTagProperty());
		logMessageValidationImpl.setDataValidation(getDataValidation());

		logMessageValidationImpl.resetOriginalValues();

		return logMessageValidationImpl;
	}

	@Override
	public int compareTo(LogMessageValidation logMessageValidation) {
		int value = 0;

		if (getId() < logMessageValidation.getId()) {
			value = -1;
		}
		else if (getId() > logMessageValidation.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogMessageValidation)) {
			return false;
		}

		LogMessageValidation logMessageValidation = (LogMessageValidation)obj;

		long primaryKey = logMessageValidation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LogMessageValidationModelImpl logMessageValidationModelImpl = this;

		logMessageValidationModelImpl._originalDocumentName = logMessageValidationModelImpl._documentName;

		logMessageValidationModelImpl._setOriginalDocumentName = false;

		logMessageValidationModelImpl._originalDocumentYear = logMessageValidationModelImpl._documentYear;

		logMessageValidationModelImpl._setOriginalDocumentYear = false;

		logMessageValidationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LogMessageValidation> toCacheModel() {
		LogMessageValidationCacheModel logMessageValidationCacheModel = new LogMessageValidationCacheModel();

		logMessageValidationCacheModel.id = getId();

		logMessageValidationCacheModel.requestCode = getRequestCode();

		String requestCode = logMessageValidationCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			logMessageValidationCacheModel.requestCode = null;
		}

		logMessageValidationCacheModel.requestDirection = getRequestDirection();

		String requestDirection = logMessageValidationCacheModel.requestDirection;

		if ((requestDirection != null) && (requestDirection.length() == 0)) {
			logMessageValidationCacheModel.requestDirection = null;
		}

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			logMessageValidationCacheModel.requestDate = requestDate.getTime();
		}
		else {
			logMessageValidationCacheModel.requestDate = Long.MIN_VALUE;
		}

		logMessageValidationCacheModel.documentName = getDocumentName();

		logMessageValidationCacheModel.documentYear = getDocumentYear();

		logMessageValidationCacheModel.documentType = getDocumentType();

		String documentType = logMessageValidationCacheModel.documentType;

		if ((documentType != null) && (documentType.length() == 0)) {
			logMessageValidationCacheModel.documentType = null;
		}

		logMessageValidationCacheModel.tagProperty = getTagProperty();

		String tagProperty = logMessageValidationCacheModel.tagProperty;

		if ((tagProperty != null) && (tagProperty.length() == 0)) {
			logMessageValidationCacheModel.tagProperty = null;
		}

		logMessageValidationCacheModel.dataValidation = getDataValidation();

		String dataValidation = logMessageValidationCacheModel.dataValidation;

		if ((dataValidation != null) && (dataValidation.length() == 0)) {
			logMessageValidationCacheModel.dataValidation = null;
		}

		return logMessageValidationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", requestDirection=");
		sb.append(getRequestDirection());
		sb.append(", requestDate=");
		sb.append(getRequestDate());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", documentType=");
		sb.append(getDocumentType());
		sb.append(", tagProperty=");
		sb.append(getTagProperty());
		sb.append(", dataValidation=");
		sb.append(getDataValidation());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.LogMessageValidation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDirection</column-name><column-value><![CDATA[");
		sb.append(getRequestDirection());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDate</column-name><column-value><![CDATA[");
		sb.append(getRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentType</column-name><column-value><![CDATA[");
		sb.append(getDocumentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tagProperty</column-name><column-value><![CDATA[");
		sb.append(getTagProperty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataValidation</column-name><column-value><![CDATA[");
		sb.append(getDataValidation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LogMessageValidation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LogMessageValidation.class
		};
	private long _id;
	private String _requestCode;
	private String _requestDirection;
	private Date _requestDate;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _documentType;
	private String _tagProperty;
	private String _dataValidation;
	private long _columnBitmask;
	private LogMessageValidation _escapedModel;
}