/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth;
import vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealthModel;
import vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealthSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TempAttachmentDeclarationHealth service. Represents a row in the &quot;TEMP_ATT_DECLARATION_HEALTH&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealthModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TempAttachmentDeclarationHealthImpl}.
 * </p>
 *
 * @author longdm
 * @see TempAttachmentDeclarationHealthImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth
 * @see vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealthModel
 * @generated
 */
@JSON(strict = true)
public class TempAttachmentDeclarationHealthModelImpl extends BaseModelImpl<TempAttachmentDeclarationHealth>
	implements TempAttachmentDeclarationHealthModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a temp attachment declaration health model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth} interface instead.
	 */
	public static final String TABLE_NAME = "TEMP_ATT_DECLARATION_HEALTH";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "AttachmentCode", Types.VARCHAR },
			{ "PassengerOrCrewCode", Types.VARCHAR },
			{ "Name", Types.VARCHAR },
			{ "Age", Types.INTEGER },
			{ "Sex", Types.INTEGER },
			{ "Nationality", Types.VARCHAR },
			{ "PortJoinVesselCode", Types.VARCHAR },
			{ "DateJoinVessel", Types.TIMESTAMP },
			{ "ClassOrRating", Types.INTEGER },
			{ "NatureOfIllness", Types.VARCHAR },
			{ "DateOfOnsetOfSymptom", Types.TIMESTAMP },
			{ "ReportedMedicalOfficer", Types.INTEGER },
			{ "DisposalOfCase", Types.VARCHAR },
			{ "MedicinesOrOther", Types.VARCHAR },
			{ "Comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TEMP_ATT_DECLARATION_HEALTH (ID LONG not null primary key,RequestCode VARCHAR(75) null,AttachmentCode VARCHAR(75) null,PassengerOrCrewCode VARCHAR(75) null,Name VARCHAR(75) null,Age INTEGER,Sex INTEGER,Nationality VARCHAR(75) null,PortJoinVesselCode VARCHAR(75) null,DateJoinVessel DATE null,ClassOrRating INTEGER,NatureOfIllness VARCHAR(75) null,DateOfOnsetOfSymptom DATE null,ReportedMedicalOfficer INTEGER,DisposalOfCase VARCHAR(75) null,MedicinesOrOther VARCHAR(75) null,Comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TEMP_ATT_DECLARATION_HEALTH";
	public static final String ORDER_BY_JPQL = " ORDER BY tempAttachmentDeclarationHealth.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TEMP_ATT_DECLARATION_HEALTH.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth"),
			true);
	public static long REQUESTCODE_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TempAttachmentDeclarationHealth toModel(
		TempAttachmentDeclarationHealthSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TempAttachmentDeclarationHealth model = new TempAttachmentDeclarationHealthImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setAttachmentCode(soapModel.getAttachmentCode());
		model.setPassengerOrCrewCode(soapModel.getPassengerOrCrewCode());
		model.setName(soapModel.getName());
		model.setAge(soapModel.getAge());
		model.setSex(soapModel.getSex());
		model.setNationality(soapModel.getNationality());
		model.setPortJoinVesselCode(soapModel.getPortJoinVesselCode());
		model.setDateJoinVessel(soapModel.getDateJoinVessel());
		model.setClassOrRating(soapModel.getClassOrRating());
		model.setNatureOfIllness(soapModel.getNatureOfIllness());
		model.setDateOfOnsetOfSymptom(soapModel.getDateOfOnsetOfSymptom());
		model.setReportedMedicalOfficer(soapModel.getReportedMedicalOfficer());
		model.setDisposalOfCase(soapModel.getDisposalOfCase());
		model.setMedicinesOrOther(soapModel.getMedicinesOrOther());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TempAttachmentDeclarationHealth> toModels(
		TempAttachmentDeclarationHealthSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TempAttachmentDeclarationHealth> models = new ArrayList<TempAttachmentDeclarationHealth>(soapModels.length);

		for (TempAttachmentDeclarationHealthSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth"));

	public TempAttachmentDeclarationHealthModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TempAttachmentDeclarationHealth.class;
	}

	@Override
	public String getModelClassName() {
		return TempAttachmentDeclarationHealth.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("attachmentCode", getAttachmentCode());
		attributes.put("passengerOrCrewCode", getPassengerOrCrewCode());
		attributes.put("name", getName());
		attributes.put("age", getAge());
		attributes.put("sex", getSex());
		attributes.put("nationality", getNationality());
		attributes.put("portJoinVesselCode", getPortJoinVesselCode());
		attributes.put("dateJoinVessel", getDateJoinVessel());
		attributes.put("classOrRating", getClassOrRating());
		attributes.put("natureOfIllness", getNatureOfIllness());
		attributes.put("dateOfOnsetOfSymptom", getDateOfOnsetOfSymptom());
		attributes.put("reportedMedicalOfficer", getReportedMedicalOfficer());
		attributes.put("disposalOfCase", getDisposalOfCase());
		attributes.put("medicinesOrOther", getMedicinesOrOther());
		attributes.put("comments", getComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		String attachmentCode = (String)attributes.get("attachmentCode");

		if (attachmentCode != null) {
			setAttachmentCode(attachmentCode);
		}

		String passengerOrCrewCode = (String)attributes.get(
				"passengerOrCrewCode");

		if (passengerOrCrewCode != null) {
			setPassengerOrCrewCode(passengerOrCrewCode);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer age = (Integer)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		Integer sex = (Integer)attributes.get("sex");

		if (sex != null) {
			setSex(sex);
		}

		String nationality = (String)attributes.get("nationality");

		if (nationality != null) {
			setNationality(nationality);
		}

		String portJoinVesselCode = (String)attributes.get("portJoinVesselCode");

		if (portJoinVesselCode != null) {
			setPortJoinVesselCode(portJoinVesselCode);
		}

		Date dateJoinVessel = (Date)attributes.get("dateJoinVessel");

		if (dateJoinVessel != null) {
			setDateJoinVessel(dateJoinVessel);
		}

		Integer classOrRating = (Integer)attributes.get("classOrRating");

		if (classOrRating != null) {
			setClassOrRating(classOrRating);
		}

		String natureOfIllness = (String)attributes.get("natureOfIllness");

		if (natureOfIllness != null) {
			setNatureOfIllness(natureOfIllness);
		}

		Date dateOfOnsetOfSymptom = (Date)attributes.get("dateOfOnsetOfSymptom");

		if (dateOfOnsetOfSymptom != null) {
			setDateOfOnsetOfSymptom(dateOfOnsetOfSymptom);
		}

		Integer reportedMedicalOfficer = (Integer)attributes.get(
				"reportedMedicalOfficer");

		if (reportedMedicalOfficer != null) {
			setReportedMedicalOfficer(reportedMedicalOfficer);
		}

		String disposalOfCase = (String)attributes.get("disposalOfCase");

		if (disposalOfCase != null) {
			setDisposalOfCase(disposalOfCase);
		}

		String medicinesOrOther = (String)attributes.get("medicinesOrOther");

		if (medicinesOrOther != null) {
			setMedicinesOrOther(medicinesOrOther);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public String getAttachmentCode() {
		if (_attachmentCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachmentCode;
		}
	}

	@Override
	public void setAttachmentCode(String attachmentCode) {
		_attachmentCode = attachmentCode;
	}

	@JSON
	@Override
	public String getPassengerOrCrewCode() {
		if (_passengerOrCrewCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _passengerOrCrewCode;
		}
	}

	@Override
	public void setPassengerOrCrewCode(String passengerOrCrewCode) {
		_passengerOrCrewCode = passengerOrCrewCode;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@JSON
	@Override
	public int getSex() {
		return _sex;
	}

	@Override
	public void setSex(int sex) {
		_sex = sex;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public String getPortJoinVesselCode() {
		if (_portJoinVesselCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portJoinVesselCode;
		}
	}

	@Override
	public void setPortJoinVesselCode(String portJoinVesselCode) {
		_portJoinVesselCode = portJoinVesselCode;
	}

	@JSON
	@Override
	public Date getDateJoinVessel() {
		return _dateJoinVessel;
	}

	@Override
	public void setDateJoinVessel(Date dateJoinVessel) {
		_dateJoinVessel = dateJoinVessel;
	}

	@JSON
	@Override
	public int getClassOrRating() {
		return _classOrRating;
	}

	@Override
	public void setClassOrRating(int classOrRating) {
		_classOrRating = classOrRating;
	}

	@JSON
	@Override
	public String getNatureOfIllness() {
		if (_natureOfIllness == null) {
			return StringPool.BLANK;
		}
		else {
			return _natureOfIllness;
		}
	}

	@Override
	public void setNatureOfIllness(String natureOfIllness) {
		_natureOfIllness = natureOfIllness;
	}

	@JSON
	@Override
	public Date getDateOfOnsetOfSymptom() {
		return _dateOfOnsetOfSymptom;
	}

	@Override
	public void setDateOfOnsetOfSymptom(Date dateOfOnsetOfSymptom) {
		_dateOfOnsetOfSymptom = dateOfOnsetOfSymptom;
	}

	@JSON
	@Override
	public int getReportedMedicalOfficer() {
		return _reportedMedicalOfficer;
	}

	@Override
	public void setReportedMedicalOfficer(int reportedMedicalOfficer) {
		_reportedMedicalOfficer = reportedMedicalOfficer;
	}

	@JSON
	@Override
	public String getDisposalOfCase() {
		if (_disposalOfCase == null) {
			return StringPool.BLANK;
		}
		else {
			return _disposalOfCase;
		}
	}

	@Override
	public void setDisposalOfCase(String disposalOfCase) {
		_disposalOfCase = disposalOfCase;
	}

	@JSON
	@Override
	public String getMedicinesOrOther() {
		if (_medicinesOrOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _medicinesOrOther;
		}
	}

	@Override
	public void setMedicinesOrOther(String medicinesOrOther) {
		_medicinesOrOther = medicinesOrOther;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TempAttachmentDeclarationHealth.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TempAttachmentDeclarationHealth toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TempAttachmentDeclarationHealth)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TempAttachmentDeclarationHealthImpl tempAttachmentDeclarationHealthImpl = new TempAttachmentDeclarationHealthImpl();

		tempAttachmentDeclarationHealthImpl.setId(getId());
		tempAttachmentDeclarationHealthImpl.setRequestCode(getRequestCode());
		tempAttachmentDeclarationHealthImpl.setAttachmentCode(getAttachmentCode());
		tempAttachmentDeclarationHealthImpl.setPassengerOrCrewCode(getPassengerOrCrewCode());
		tempAttachmentDeclarationHealthImpl.setName(getName());
		tempAttachmentDeclarationHealthImpl.setAge(getAge());
		tempAttachmentDeclarationHealthImpl.setSex(getSex());
		tempAttachmentDeclarationHealthImpl.setNationality(getNationality());
		tempAttachmentDeclarationHealthImpl.setPortJoinVesselCode(getPortJoinVesselCode());
		tempAttachmentDeclarationHealthImpl.setDateJoinVessel(getDateJoinVessel());
		tempAttachmentDeclarationHealthImpl.setClassOrRating(getClassOrRating());
		tempAttachmentDeclarationHealthImpl.setNatureOfIllness(getNatureOfIllness());
		tempAttachmentDeclarationHealthImpl.setDateOfOnsetOfSymptom(getDateOfOnsetOfSymptom());
		tempAttachmentDeclarationHealthImpl.setReportedMedicalOfficer(getReportedMedicalOfficer());
		tempAttachmentDeclarationHealthImpl.setDisposalOfCase(getDisposalOfCase());
		tempAttachmentDeclarationHealthImpl.setMedicinesOrOther(getMedicinesOrOther());
		tempAttachmentDeclarationHealthImpl.setComments(getComments());

		tempAttachmentDeclarationHealthImpl.resetOriginalValues();

		return tempAttachmentDeclarationHealthImpl;
	}

	@Override
	public int compareTo(
		TempAttachmentDeclarationHealth tempAttachmentDeclarationHealth) {
		int value = 0;

		if (getId() < tempAttachmentDeclarationHealth.getId()) {
			value = -1;
		}
		else if (getId() > tempAttachmentDeclarationHealth.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TempAttachmentDeclarationHealth)) {
			return false;
		}

		TempAttachmentDeclarationHealth tempAttachmentDeclarationHealth = (TempAttachmentDeclarationHealth)obj;

		long primaryKey = tempAttachmentDeclarationHealth.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TempAttachmentDeclarationHealthModelImpl tempAttachmentDeclarationHealthModelImpl =
			this;

		tempAttachmentDeclarationHealthModelImpl._originalRequestCode = tempAttachmentDeclarationHealthModelImpl._requestCode;

		tempAttachmentDeclarationHealthModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TempAttachmentDeclarationHealth> toCacheModel() {
		TempAttachmentDeclarationHealthCacheModel tempAttachmentDeclarationHealthCacheModel =
			new TempAttachmentDeclarationHealthCacheModel();

		tempAttachmentDeclarationHealthCacheModel.id = getId();

		tempAttachmentDeclarationHealthCacheModel.requestCode = getRequestCode();

		String requestCode = tempAttachmentDeclarationHealthCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.requestCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.attachmentCode = getAttachmentCode();

		String attachmentCode = tempAttachmentDeclarationHealthCacheModel.attachmentCode;

		if ((attachmentCode != null) && (attachmentCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.attachmentCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode = getPassengerOrCrewCode();

		String passengerOrCrewCode = tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode;

		if ((passengerOrCrewCode != null) &&
				(passengerOrCrewCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.passengerOrCrewCode = null;
		}

		tempAttachmentDeclarationHealthCacheModel.name = getName();

		String name = tempAttachmentDeclarationHealthCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.name = null;
		}

		tempAttachmentDeclarationHealthCacheModel.age = getAge();

		tempAttachmentDeclarationHealthCacheModel.sex = getSex();

		tempAttachmentDeclarationHealthCacheModel.nationality = getNationality();

		String nationality = tempAttachmentDeclarationHealthCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.nationality = null;
		}

		tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode = getPortJoinVesselCode();

		String portJoinVesselCode = tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode;

		if ((portJoinVesselCode != null) && (portJoinVesselCode.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.portJoinVesselCode = null;
		}

		Date dateJoinVessel = getDateJoinVessel();

		if (dateJoinVessel != null) {
			tempAttachmentDeclarationHealthCacheModel.dateJoinVessel = dateJoinVessel.getTime();
		}
		else {
			tempAttachmentDeclarationHealthCacheModel.dateJoinVessel = Long.MIN_VALUE;
		}

		tempAttachmentDeclarationHealthCacheModel.classOrRating = getClassOrRating();

		tempAttachmentDeclarationHealthCacheModel.natureOfIllness = getNatureOfIllness();

		String natureOfIllness = tempAttachmentDeclarationHealthCacheModel.natureOfIllness;

		if ((natureOfIllness != null) && (natureOfIllness.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.natureOfIllness = null;
		}

		Date dateOfOnsetOfSymptom = getDateOfOnsetOfSymptom();

		if (dateOfOnsetOfSymptom != null) {
			tempAttachmentDeclarationHealthCacheModel.dateOfOnsetOfSymptom = dateOfOnsetOfSymptom.getTime();
		}
		else {
			tempAttachmentDeclarationHealthCacheModel.dateOfOnsetOfSymptom = Long.MIN_VALUE;
		}

		tempAttachmentDeclarationHealthCacheModel.reportedMedicalOfficer = getReportedMedicalOfficer();

		tempAttachmentDeclarationHealthCacheModel.disposalOfCase = getDisposalOfCase();

		String disposalOfCase = tempAttachmentDeclarationHealthCacheModel.disposalOfCase;

		if ((disposalOfCase != null) && (disposalOfCase.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.disposalOfCase = null;
		}

		tempAttachmentDeclarationHealthCacheModel.medicinesOrOther = getMedicinesOrOther();

		String medicinesOrOther = tempAttachmentDeclarationHealthCacheModel.medicinesOrOther;

		if ((medicinesOrOther != null) && (medicinesOrOther.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.medicinesOrOther = null;
		}

		tempAttachmentDeclarationHealthCacheModel.comments = getComments();

		String comments = tempAttachmentDeclarationHealthCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			tempAttachmentDeclarationHealthCacheModel.comments = null;
		}

		return tempAttachmentDeclarationHealthCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", attachmentCode=");
		sb.append(getAttachmentCode());
		sb.append(", passengerOrCrewCode=");
		sb.append(getPassengerOrCrewCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", sex=");
		sb.append(getSex());
		sb.append(", nationality=");
		sb.append(getNationality());
		sb.append(", portJoinVesselCode=");
		sb.append(getPortJoinVesselCode());
		sb.append(", dateJoinVessel=");
		sb.append(getDateJoinVessel());
		sb.append(", classOrRating=");
		sb.append(getClassOrRating());
		sb.append(", natureOfIllness=");
		sb.append(getNatureOfIllness());
		sb.append(", dateOfOnsetOfSymptom=");
		sb.append(getDateOfOnsetOfSymptom());
		sb.append(", reportedMedicalOfficer=");
		sb.append(getReportedMedicalOfficer());
		sb.append(", disposalOfCase=");
		sb.append(getDisposalOfCase());
		sb.append(", medicinesOrOther=");
		sb.append(getMedicinesOrOther());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append(
			"vn.dtt.duongbien.dao.vrcb.model.TempAttachmentDeclarationHealth");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentCode</column-name><column-value><![CDATA[");
		sb.append(getAttachmentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passengerOrCrewCode</column-name><column-value><![CDATA[");
		sb.append(getPassengerOrCrewCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sex</column-name><column-value><![CDATA[");
		sb.append(getSex());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationality</column-name><column-value><![CDATA[");
		sb.append(getNationality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portJoinVesselCode</column-name><column-value><![CDATA[");
		sb.append(getPortJoinVesselCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateJoinVessel</column-name><column-value><![CDATA[");
		sb.append(getDateJoinVessel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classOrRating</column-name><column-value><![CDATA[");
		sb.append(getClassOrRating());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>natureOfIllness</column-name><column-value><![CDATA[");
		sb.append(getNatureOfIllness());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateOfOnsetOfSymptom</column-name><column-value><![CDATA[");
		sb.append(getDateOfOnsetOfSymptom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reportedMedicalOfficer</column-name><column-value><![CDATA[");
		sb.append(getReportedMedicalOfficer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disposalOfCase</column-name><column-value><![CDATA[");
		sb.append(getDisposalOfCase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>medicinesOrOther</column-name><column-value><![CDATA[");
		sb.append(getMedicinesOrOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TempAttachmentDeclarationHealth.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			TempAttachmentDeclarationHealth.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _attachmentCode;
	private String _passengerOrCrewCode;
	private String _name;
	private int _age;
	private int _sex;
	private String _nationality;
	private String _portJoinVesselCode;
	private Date _dateJoinVessel;
	private int _classOrRating;
	private String _natureOfIllness;
	private Date _dateOfOnsetOfSymptom;
	private int _reportedMedicalOfficer;
	private String _disposalOfCase;
	private String _medicinesOrOther;
	private String _comments;
	private long _columnBitmask;
	private TempAttachmentDeclarationHealth _escapedModel;
}