/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance;
import vn.dtt.duongbien.dao.vrcb.model.IssuePortClearanceModel;
import vn.dtt.duongbien.dao.vrcb.model.IssuePortClearanceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IssuePortClearance service. Represents a row in the &quot;ISSUE_PORT_CLEARANCE&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.IssuePortClearanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IssuePortClearanceImpl}.
 * </p>
 *
 * @author longdm
 * @see IssuePortClearanceImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance
 * @see vn.dtt.duongbien.dao.vrcb.model.IssuePortClearanceModel
 * @generated
 */
@JSON(strict = true)
public class IssuePortClearanceModelImpl extends BaseModelImpl<IssuePortClearance>
	implements IssuePortClearanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a issue port clearance model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance} interface instead.
	 */
	public static final String TABLE_NAME = "ISSUE_PORT_CLEARANCE";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ID", Types.BIGINT },
			{ "RequestCode", Types.VARCHAR },
			{ "NumberPortClearance", Types.VARCHAR },
			{ "DocumentName", Types.BIGINT },
			{ "DocumentYear", Types.INTEGER },
			{ "PortofAuthority", Types.VARCHAR },
			{ "NameOfShip", Types.VARCHAR },
			{ "FlagStateOfShip", Types.VARCHAR },
			{ "NumberOfCrews", Types.INTEGER },
			{ "NumberOfPassengers", Types.INTEGER },
			{ "CallSign", Types.VARCHAR },
			{ "NameOfMaster", Types.VARCHAR },
			{ "Cargo", Types.VARCHAR },
			{ "VolumeCargo", Types.DOUBLE },
			{ "CargoUnit", Types.VARCHAR },
			{ "TransitCargo", Types.VARCHAR },
			{ "VolumeTransitCargo", Types.DOUBLE },
			{ "TransitCargoUnit", Types.VARCHAR },
			{ "TimeOfDeparture", Types.TIMESTAMP },
			{ "NextPortOfCallCode", Types.VARCHAR },
			{ "ValidUntil", Types.TIMESTAMP },
			{ "IssueDate", Types.TIMESTAMP },
			{ "DirectorOfMaritime", Types.VARCHAR },
			{ "CertificateNo", Types.VARCHAR },
			{ "RequestState", Types.INTEGER },
			{ "GT", Types.DOUBLE },
			{ "VersionNo", Types.VARCHAR },
			{ "IsApproval", Types.INTEGER },
			{ "ApprovalDate", Types.TIMESTAMP },
			{ "ApprovalName", Types.VARCHAR },
			{ "Remarks", Types.VARCHAR },
			{ "IsCancel", Types.INTEGER },
			{ "CancelDate", Types.TIMESTAMP },
			{ "CancelName", Types.VARCHAR },
			{ "CancelNote", Types.VARCHAR },
			{ "Representative", Types.VARCHAR },
			{ "SignDate", Types.TIMESTAMP },
			{ "SignName", Types.VARCHAR },
			{ "SignTitle", Types.VARCHAR },
			{ "SignPlace", Types.VARCHAR },
			{ "StampStatus", Types.BIGINT },
			{ "AttachedFile", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ISSUE_PORT_CLEARANCE (ID LONG not null primary key,RequestCode VARCHAR(75) null,NumberPortClearance VARCHAR(75) null,DocumentName LONG,DocumentYear INTEGER,PortofAuthority VARCHAR(75) null,NameOfShip VARCHAR(75) null,FlagStateOfShip VARCHAR(75) null,NumberOfCrews INTEGER,NumberOfPassengers INTEGER,CallSign VARCHAR(75) null,NameOfMaster VARCHAR(75) null,Cargo VARCHAR(75) null,VolumeCargo DOUBLE,CargoUnit VARCHAR(75) null,TransitCargo VARCHAR(75) null,VolumeTransitCargo DOUBLE,TransitCargoUnit VARCHAR(75) null,TimeOfDeparture DATE null,NextPortOfCallCode VARCHAR(75) null,ValidUntil DATE null,IssueDate DATE null,DirectorOfMaritime VARCHAR(75) null,CertificateNo VARCHAR(75) null,RequestState INTEGER,GT DOUBLE,VersionNo VARCHAR(75) null,IsApproval INTEGER,ApprovalDate DATE null,ApprovalName VARCHAR(75) null,Remarks VARCHAR(75) null,IsCancel INTEGER,CancelDate DATE null,CancelName VARCHAR(75) null,CancelNote VARCHAR(75) null,Representative VARCHAR(75) null,SignDate DATE null,SignName VARCHAR(75) null,SignTitle VARCHAR(75) null,SignPlace VARCHAR(75) null,StampStatus LONG,AttachedFile LONG)";
	public static final String TABLE_SQL_DROP = "drop table ISSUE_PORT_CLEARANCE";
	public static final String ORDER_BY_JPQL = " ORDER BY issuePortClearance.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ISSUE_PORT_CLEARANCE.ID ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance"),
			true);
	public static long DOCUMENTNAME_COLUMN_BITMASK = 1L;
	public static long DOCUMENTYEAR_COLUMN_BITMASK = 2L;
	public static long REQUESTCODE_COLUMN_BITMASK = 4L;
	public static long REQUESTSTATE_COLUMN_BITMASK = 8L;
	public static long ID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IssuePortClearance toModel(IssuePortClearanceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IssuePortClearance model = new IssuePortClearanceImpl();

		model.setId(soapModel.getId());
		model.setRequestCode(soapModel.getRequestCode());
		model.setNumberPortClearance(soapModel.getNumberPortClearance());
		model.setDocumentName(soapModel.getDocumentName());
		model.setDocumentYear(soapModel.getDocumentYear());
		model.setPortofAuthority(soapModel.getPortofAuthority());
		model.setNameOfShip(soapModel.getNameOfShip());
		model.setFlagStateOfShip(soapModel.getFlagStateOfShip());
		model.setNumberOfCrews(soapModel.getNumberOfCrews());
		model.setNumberOfPassengers(soapModel.getNumberOfPassengers());
		model.setCallSign(soapModel.getCallSign());
		model.setNameOfMaster(soapModel.getNameOfMaster());
		model.setCargo(soapModel.getCargo());
		model.setVolumeCargo(soapModel.getVolumeCargo());
		model.setCargoUnit(soapModel.getCargoUnit());
		model.setTransitCargo(soapModel.getTransitCargo());
		model.setVolumeTransitCargo(soapModel.getVolumeTransitCargo());
		model.setTransitCargoUnit(soapModel.getTransitCargoUnit());
		model.setTimeOfDeparture(soapModel.getTimeOfDeparture());
		model.setNextPortOfCallCode(soapModel.getNextPortOfCallCode());
		model.setValidUntil(soapModel.getValidUntil());
		model.setIssueDate(soapModel.getIssueDate());
		model.setDirectorOfMaritime(soapModel.getDirectorOfMaritime());
		model.setCertificateNo(soapModel.getCertificateNo());
		model.setRequestState(soapModel.getRequestState());
		model.setGt(soapModel.getGt());
		model.setVersionNo(soapModel.getVersionNo());
		model.setIsApproval(soapModel.getIsApproval());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setApprovalName(soapModel.getApprovalName());
		model.setRemarks(soapModel.getRemarks());
		model.setIsCancel(soapModel.getIsCancel());
		model.setCancelDate(soapModel.getCancelDate());
		model.setCancelName(soapModel.getCancelName());
		model.setCancelNote(soapModel.getCancelNote());
		model.setRepresentative(soapModel.getRepresentative());
		model.setSignDate(soapModel.getSignDate());
		model.setSignName(soapModel.getSignName());
		model.setSignTitle(soapModel.getSignTitle());
		model.setSignPlace(soapModel.getSignPlace());
		model.setStampStatus(soapModel.getStampStatus());
		model.setAttachedFile(soapModel.getAttachedFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IssuePortClearance> toModels(
		IssuePortClearanceSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IssuePortClearance> models = new ArrayList<IssuePortClearance>(soapModels.length);

		for (IssuePortClearanceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance"));

	public IssuePortClearanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IssuePortClearance.class;
	}

	@Override
	public String getModelClassName() {
		return IssuePortClearance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("requestCode", getRequestCode());
		attributes.put("numberPortClearance", getNumberPortClearance());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentYear", getDocumentYear());
		attributes.put("portofAuthority", getPortofAuthority());
		attributes.put("nameOfShip", getNameOfShip());
		attributes.put("flagStateOfShip", getFlagStateOfShip());
		attributes.put("numberOfCrews", getNumberOfCrews());
		attributes.put("numberOfPassengers", getNumberOfPassengers());
		attributes.put("callSign", getCallSign());
		attributes.put("nameOfMaster", getNameOfMaster());
		attributes.put("cargo", getCargo());
		attributes.put("volumeCargo", getVolumeCargo());
		attributes.put("cargoUnit", getCargoUnit());
		attributes.put("transitCargo", getTransitCargo());
		attributes.put("volumeTransitCargo", getVolumeTransitCargo());
		attributes.put("transitCargoUnit", getTransitCargoUnit());
		attributes.put("timeOfDeparture", getTimeOfDeparture());
		attributes.put("nextPortOfCallCode", getNextPortOfCallCode());
		attributes.put("validUntil", getValidUntil());
		attributes.put("issueDate", getIssueDate());
		attributes.put("directorOfMaritime", getDirectorOfMaritime());
		attributes.put("certificateNo", getCertificateNo());
		attributes.put("requestState", getRequestState());
		attributes.put("gt", getGt());
		attributes.put("versionNo", getVersionNo());
		attributes.put("isApproval", getIsApproval());
		attributes.put("approvalDate", getApprovalDate());
		attributes.put("approvalName", getApprovalName());
		attributes.put("remarks", getRemarks());
		attributes.put("isCancel", getIsCancel());
		attributes.put("cancelDate", getCancelDate());
		attributes.put("cancelName", getCancelName());
		attributes.put("cancelNote", getCancelNote());
		attributes.put("representative", getRepresentative());
		attributes.put("signDate", getSignDate());
		attributes.put("signName", getSignName());
		attributes.put("signTitle", getSignTitle());
		attributes.put("signPlace", getSignPlace());
		attributes.put("stampStatus", getStampStatus());
		attributes.put("attachedFile", getAttachedFile());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String requestCode = (String)attributes.get("requestCode");

		if (requestCode != null) {
			setRequestCode(requestCode);
		}

		String numberPortClearance = (String)attributes.get(
				"numberPortClearance");

		if (numberPortClearance != null) {
			setNumberPortClearance(numberPortClearance);
		}

		Long documentName = (Long)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		Integer documentYear = (Integer)attributes.get("documentYear");

		if (documentYear != null) {
			setDocumentYear(documentYear);
		}

		String portofAuthority = (String)attributes.get("portofAuthority");

		if (portofAuthority != null) {
			setPortofAuthority(portofAuthority);
		}

		String nameOfShip = (String)attributes.get("nameOfShip");

		if (nameOfShip != null) {
			setNameOfShip(nameOfShip);
		}

		String flagStateOfShip = (String)attributes.get("flagStateOfShip");

		if (flagStateOfShip != null) {
			setFlagStateOfShip(flagStateOfShip);
		}

		Integer numberOfCrews = (Integer)attributes.get("numberOfCrews");

		if (numberOfCrews != null) {
			setNumberOfCrews(numberOfCrews);
		}

		Integer numberOfPassengers = (Integer)attributes.get(
				"numberOfPassengers");

		if (numberOfPassengers != null) {
			setNumberOfPassengers(numberOfPassengers);
		}

		String callSign = (String)attributes.get("callSign");

		if (callSign != null) {
			setCallSign(callSign);
		}

		String nameOfMaster = (String)attributes.get("nameOfMaster");

		if (nameOfMaster != null) {
			setNameOfMaster(nameOfMaster);
		}

		String cargo = (String)attributes.get("cargo");

		if (cargo != null) {
			setCargo(cargo);
		}

		Double volumeCargo = (Double)attributes.get("volumeCargo");

		if (volumeCargo != null) {
			setVolumeCargo(volumeCargo);
		}

		String cargoUnit = (String)attributes.get("cargoUnit");

		if (cargoUnit != null) {
			setCargoUnit(cargoUnit);
		}

		String transitCargo = (String)attributes.get("transitCargo");

		if (transitCargo != null) {
			setTransitCargo(transitCargo);
		}

		Double volumeTransitCargo = (Double)attributes.get("volumeTransitCargo");

		if (volumeTransitCargo != null) {
			setVolumeTransitCargo(volumeTransitCargo);
		}

		String transitCargoUnit = (String)attributes.get("transitCargoUnit");

		if (transitCargoUnit != null) {
			setTransitCargoUnit(transitCargoUnit);
		}

		Date timeOfDeparture = (Date)attributes.get("timeOfDeparture");

		if (timeOfDeparture != null) {
			setTimeOfDeparture(timeOfDeparture);
		}

		String nextPortOfCallCode = (String)attributes.get("nextPortOfCallCode");

		if (nextPortOfCallCode != null) {
			setNextPortOfCallCode(nextPortOfCallCode);
		}

		Date validUntil = (Date)attributes.get("validUntil");

		if (validUntil != null) {
			setValidUntil(validUntil);
		}

		Date issueDate = (Date)attributes.get("issueDate");

		if (issueDate != null) {
			setIssueDate(issueDate);
		}

		String directorOfMaritime = (String)attributes.get("directorOfMaritime");

		if (directorOfMaritime != null) {
			setDirectorOfMaritime(directorOfMaritime);
		}

		String certificateNo = (String)attributes.get("certificateNo");

		if (certificateNo != null) {
			setCertificateNo(certificateNo);
		}

		Integer requestState = (Integer)attributes.get("requestState");

		if (requestState != null) {
			setRequestState(requestState);
		}

		Double gt = (Double)attributes.get("gt");

		if (gt != null) {
			setGt(gt);
		}

		String versionNo = (String)attributes.get("versionNo");

		if (versionNo != null) {
			setVersionNo(versionNo);
		}

		Integer isApproval = (Integer)attributes.get("isApproval");

		if (isApproval != null) {
			setIsApproval(isApproval);
		}

		Date approvalDate = (Date)attributes.get("approvalDate");

		if (approvalDate != null) {
			setApprovalDate(approvalDate);
		}

		String approvalName = (String)attributes.get("approvalName");

		if (approvalName != null) {
			setApprovalName(approvalName);
		}

		String remarks = (String)attributes.get("remarks");

		if (remarks != null) {
			setRemarks(remarks);
		}

		Integer isCancel = (Integer)attributes.get("isCancel");

		if (isCancel != null) {
			setIsCancel(isCancel);
		}

		Date cancelDate = (Date)attributes.get("cancelDate");

		if (cancelDate != null) {
			setCancelDate(cancelDate);
		}

		String cancelName = (String)attributes.get("cancelName");

		if (cancelName != null) {
			setCancelName(cancelName);
		}

		String cancelNote = (String)attributes.get("cancelNote");

		if (cancelNote != null) {
			setCancelNote(cancelNote);
		}

		String representative = (String)attributes.get("representative");

		if (representative != null) {
			setRepresentative(representative);
		}

		Date signDate = (Date)attributes.get("signDate");

		if (signDate != null) {
			setSignDate(signDate);
		}

		String signName = (String)attributes.get("signName");

		if (signName != null) {
			setSignName(signName);
		}

		String signTitle = (String)attributes.get("signTitle");

		if (signTitle != null) {
			setSignTitle(signTitle);
		}

		String signPlace = (String)attributes.get("signPlace");

		if (signPlace != null) {
			setSignPlace(signPlace);
		}

		Long stampStatus = (Long)attributes.get("stampStatus");

		if (stampStatus != null) {
			setStampStatus(stampStatus);
		}

		Long attachedFile = (Long)attributes.get("attachedFile");

		if (attachedFile != null) {
			setAttachedFile(attachedFile);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getRequestCode() {
		if (_requestCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestCode;
		}
	}

	@Override
	public void setRequestCode(String requestCode) {
		_columnBitmask |= REQUESTCODE_COLUMN_BITMASK;

		if (_originalRequestCode == null) {
			_originalRequestCode = _requestCode;
		}

		_requestCode = requestCode;
	}

	public String getOriginalRequestCode() {
		return GetterUtil.getString(_originalRequestCode);
	}

	@JSON
	@Override
	public String getNumberPortClearance() {
		if (_numberPortClearance == null) {
			return StringPool.BLANK;
		}
		else {
			return _numberPortClearance;
		}
	}

	@Override
	public void setNumberPortClearance(String numberPortClearance) {
		_numberPortClearance = numberPortClearance;
	}

	@JSON
	@Override
	public long getDocumentName() {
		return _documentName;
	}

	@Override
	public void setDocumentName(long documentName) {
		_columnBitmask |= DOCUMENTNAME_COLUMN_BITMASK;

		if (!_setOriginalDocumentName) {
			_setOriginalDocumentName = true;

			_originalDocumentName = _documentName;
		}

		_documentName = documentName;
	}

	public long getOriginalDocumentName() {
		return _originalDocumentName;
	}

	@JSON
	@Override
	public int getDocumentYear() {
		return _documentYear;
	}

	@Override
	public void setDocumentYear(int documentYear) {
		_columnBitmask |= DOCUMENTYEAR_COLUMN_BITMASK;

		if (!_setOriginalDocumentYear) {
			_setOriginalDocumentYear = true;

			_originalDocumentYear = _documentYear;
		}

		_documentYear = documentYear;
	}

	public int getOriginalDocumentYear() {
		return _originalDocumentYear;
	}

	@JSON
	@Override
	public String getPortofAuthority() {
		if (_portofAuthority == null) {
			return StringPool.BLANK;
		}
		else {
			return _portofAuthority;
		}
	}

	@Override
	public void setPortofAuthority(String portofAuthority) {
		_portofAuthority = portofAuthority;
	}

	@JSON
	@Override
	public String getNameOfShip() {
		if (_nameOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfShip;
		}
	}

	@Override
	public void setNameOfShip(String nameOfShip) {
		_nameOfShip = nameOfShip;
	}

	@JSON
	@Override
	public String getFlagStateOfShip() {
		if (_flagStateOfShip == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagStateOfShip;
		}
	}

	@Override
	public void setFlagStateOfShip(String flagStateOfShip) {
		_flagStateOfShip = flagStateOfShip;
	}

	@JSON
	@Override
	public int getNumberOfCrews() {
		return _numberOfCrews;
	}

	@Override
	public void setNumberOfCrews(int numberOfCrews) {
		_numberOfCrews = numberOfCrews;
	}

	@JSON
	@Override
	public int getNumberOfPassengers() {
		return _numberOfPassengers;
	}

	@Override
	public void setNumberOfPassengers(int numberOfPassengers) {
		_numberOfPassengers = numberOfPassengers;
	}

	@JSON
	@Override
	public String getCallSign() {
		if (_callSign == null) {
			return StringPool.BLANK;
		}
		else {
			return _callSign;
		}
	}

	@Override
	public void setCallSign(String callSign) {
		_callSign = callSign;
	}

	@JSON
	@Override
	public String getNameOfMaster() {
		if (_nameOfMaster == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameOfMaster;
		}
	}

	@Override
	public void setNameOfMaster(String nameOfMaster) {
		_nameOfMaster = nameOfMaster;
	}

	@JSON
	@Override
	public String getCargo() {
		if (_cargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargo;
		}
	}

	@Override
	public void setCargo(String cargo) {
		_cargo = cargo;
	}

	@JSON
	@Override
	public double getVolumeCargo() {
		return _volumeCargo;
	}

	@Override
	public void setVolumeCargo(double volumeCargo) {
		_volumeCargo = volumeCargo;
	}

	@JSON
	@Override
	public String getCargoUnit() {
		if (_cargoUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _cargoUnit;
		}
	}

	@Override
	public void setCargoUnit(String cargoUnit) {
		_cargoUnit = cargoUnit;
	}

	@JSON
	@Override
	public String getTransitCargo() {
		if (_transitCargo == null) {
			return StringPool.BLANK;
		}
		else {
			return _transitCargo;
		}
	}

	@Override
	public void setTransitCargo(String transitCargo) {
		_transitCargo = transitCargo;
	}

	@JSON
	@Override
	public double getVolumeTransitCargo() {
		return _volumeTransitCargo;
	}

	@Override
	public void setVolumeTransitCargo(double volumeTransitCargo) {
		_volumeTransitCargo = volumeTransitCargo;
	}

	@JSON
	@Override
	public String getTransitCargoUnit() {
		if (_transitCargoUnit == null) {
			return StringPool.BLANK;
		}
		else {
			return _transitCargoUnit;
		}
	}

	@Override
	public void setTransitCargoUnit(String transitCargoUnit) {
		_transitCargoUnit = transitCargoUnit;
	}

	@JSON
	@Override
	public Date getTimeOfDeparture() {
		return _timeOfDeparture;
	}

	@Override
	public void setTimeOfDeparture(Date timeOfDeparture) {
		_timeOfDeparture = timeOfDeparture;
	}

	@JSON
	@Override
	public String getNextPortOfCallCode() {
		if (_nextPortOfCallCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextPortOfCallCode;
		}
	}

	@Override
	public void setNextPortOfCallCode(String nextPortOfCallCode) {
		_nextPortOfCallCode = nextPortOfCallCode;
	}

	@JSON
	@Override
	public Date getValidUntil() {
		return _validUntil;
	}

	@Override
	public void setValidUntil(Date validUntil) {
		_validUntil = validUntil;
	}

	@JSON
	@Override
	public Date getIssueDate() {
		return _issueDate;
	}

	@Override
	public void setIssueDate(Date issueDate) {
		_issueDate = issueDate;
	}

	@JSON
	@Override
	public String getDirectorOfMaritime() {
		if (_directorOfMaritime == null) {
			return StringPool.BLANK;
		}
		else {
			return _directorOfMaritime;
		}
	}

	@Override
	public void setDirectorOfMaritime(String directorOfMaritime) {
		_directorOfMaritime = directorOfMaritime;
	}

	@JSON
	@Override
	public String getCertificateNo() {
		if (_certificateNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateNo;
		}
	}

	@Override
	public void setCertificateNo(String certificateNo) {
		_certificateNo = certificateNo;
	}

	@JSON
	@Override
	public int getRequestState() {
		return _requestState;
	}

	@Override
	public void setRequestState(int requestState) {
		_columnBitmask |= REQUESTSTATE_COLUMN_BITMASK;

		if (!_setOriginalRequestState) {
			_setOriginalRequestState = true;

			_originalRequestState = _requestState;
		}

		_requestState = requestState;
	}

	public int getOriginalRequestState() {
		return _originalRequestState;
	}

	@JSON
	@Override
	public double getGt() {
		return _gt;
	}

	@Override
	public void setGt(double gt) {
		_gt = gt;
	}

	@JSON
	@Override
	public String getVersionNo() {
		if (_versionNo == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionNo;
		}
	}

	@Override
	public void setVersionNo(String versionNo) {
		_versionNo = versionNo;
	}

	@JSON
	@Override
	public int getIsApproval() {
		return _isApproval;
	}

	@Override
	public void setIsApproval(int isApproval) {
		_isApproval = isApproval;
	}

	@JSON
	@Override
	public Date getApprovalDate() {
		return _approvalDate;
	}

	@Override
	public void setApprovalDate(Date approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	@Override
	public String getApprovalName() {
		if (_approvalName == null) {
			return StringPool.BLANK;
		}
		else {
			return _approvalName;
		}
	}

	@Override
	public void setApprovalName(String approvalName) {
		_approvalName = approvalName;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		_remarks = remarks;
	}

	@JSON
	@Override
	public int getIsCancel() {
		return _isCancel;
	}

	@Override
	public void setIsCancel(int isCancel) {
		_isCancel = isCancel;
	}

	@JSON
	@Override
	public Date getCancelDate() {
		return _cancelDate;
	}

	@Override
	public void setCancelDate(Date cancelDate) {
		_cancelDate = cancelDate;
	}

	@JSON
	@Override
	public String getCancelName() {
		if (_cancelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelName;
		}
	}

	@Override
	public void setCancelName(String cancelName) {
		_cancelName = cancelName;
	}

	@JSON
	@Override
	public String getCancelNote() {
		if (_cancelNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _cancelNote;
		}
	}

	@Override
	public void setCancelNote(String cancelNote) {
		_cancelNote = cancelNote;
	}

	@JSON
	@Override
	public String getRepresentative() {
		if (_representative == null) {
			return StringPool.BLANK;
		}
		else {
			return _representative;
		}
	}

	@Override
	public void setRepresentative(String representative) {
		_representative = representative;
	}

	@JSON
	@Override
	public Date getSignDate() {
		return _signDate;
	}

	@Override
	public void setSignDate(Date signDate) {
		_signDate = signDate;
	}

	@JSON
	@Override
	public String getSignName() {
		if (_signName == null) {
			return StringPool.BLANK;
		}
		else {
			return _signName;
		}
	}

	@Override
	public void setSignName(String signName) {
		_signName = signName;
	}

	@JSON
	@Override
	public String getSignTitle() {
		if (_signTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _signTitle;
		}
	}

	@Override
	public void setSignTitle(String signTitle) {
		_signTitle = signTitle;
	}

	@JSON
	@Override
	public String getSignPlace() {
		if (_signPlace == null) {
			return StringPool.BLANK;
		}
		else {
			return _signPlace;
		}
	}

	@Override
	public void setSignPlace(String signPlace) {
		_signPlace = signPlace;
	}

	@JSON
	@Override
	public long getStampStatus() {
		return _stampStatus;
	}

	@Override
	public void setStampStatus(long stampStatus) {
		_stampStatus = stampStatus;
	}

	@JSON
	@Override
	public long getAttachedFile() {
		return _attachedFile;
	}

	@Override
	public void setAttachedFile(long attachedFile) {
		_attachedFile = attachedFile;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			IssuePortClearance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IssuePortClearance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IssuePortClearance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IssuePortClearanceImpl issuePortClearanceImpl = new IssuePortClearanceImpl();

		issuePortClearanceImpl.setId(getId());
		issuePortClearanceImpl.setRequestCode(getRequestCode());
		issuePortClearanceImpl.setNumberPortClearance(getNumberPortClearance());
		issuePortClearanceImpl.setDocumentName(getDocumentName());
		issuePortClearanceImpl.setDocumentYear(getDocumentYear());
		issuePortClearanceImpl.setPortofAuthority(getPortofAuthority());
		issuePortClearanceImpl.setNameOfShip(getNameOfShip());
		issuePortClearanceImpl.setFlagStateOfShip(getFlagStateOfShip());
		issuePortClearanceImpl.setNumberOfCrews(getNumberOfCrews());
		issuePortClearanceImpl.setNumberOfPassengers(getNumberOfPassengers());
		issuePortClearanceImpl.setCallSign(getCallSign());
		issuePortClearanceImpl.setNameOfMaster(getNameOfMaster());
		issuePortClearanceImpl.setCargo(getCargo());
		issuePortClearanceImpl.setVolumeCargo(getVolumeCargo());
		issuePortClearanceImpl.setCargoUnit(getCargoUnit());
		issuePortClearanceImpl.setTransitCargo(getTransitCargo());
		issuePortClearanceImpl.setVolumeTransitCargo(getVolumeTransitCargo());
		issuePortClearanceImpl.setTransitCargoUnit(getTransitCargoUnit());
		issuePortClearanceImpl.setTimeOfDeparture(getTimeOfDeparture());
		issuePortClearanceImpl.setNextPortOfCallCode(getNextPortOfCallCode());
		issuePortClearanceImpl.setValidUntil(getValidUntil());
		issuePortClearanceImpl.setIssueDate(getIssueDate());
		issuePortClearanceImpl.setDirectorOfMaritime(getDirectorOfMaritime());
		issuePortClearanceImpl.setCertificateNo(getCertificateNo());
		issuePortClearanceImpl.setRequestState(getRequestState());
		issuePortClearanceImpl.setGt(getGt());
		issuePortClearanceImpl.setVersionNo(getVersionNo());
		issuePortClearanceImpl.setIsApproval(getIsApproval());
		issuePortClearanceImpl.setApprovalDate(getApprovalDate());
		issuePortClearanceImpl.setApprovalName(getApprovalName());
		issuePortClearanceImpl.setRemarks(getRemarks());
		issuePortClearanceImpl.setIsCancel(getIsCancel());
		issuePortClearanceImpl.setCancelDate(getCancelDate());
		issuePortClearanceImpl.setCancelName(getCancelName());
		issuePortClearanceImpl.setCancelNote(getCancelNote());
		issuePortClearanceImpl.setRepresentative(getRepresentative());
		issuePortClearanceImpl.setSignDate(getSignDate());
		issuePortClearanceImpl.setSignName(getSignName());
		issuePortClearanceImpl.setSignTitle(getSignTitle());
		issuePortClearanceImpl.setSignPlace(getSignPlace());
		issuePortClearanceImpl.setStampStatus(getStampStatus());
		issuePortClearanceImpl.setAttachedFile(getAttachedFile());

		issuePortClearanceImpl.resetOriginalValues();

		return issuePortClearanceImpl;
	}

	@Override
	public int compareTo(IssuePortClearance issuePortClearance) {
		int value = 0;

		if (getId() < issuePortClearance.getId()) {
			value = -1;
		}
		else if (getId() > issuePortClearance.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IssuePortClearance)) {
			return false;
		}

		IssuePortClearance issuePortClearance = (IssuePortClearance)obj;

		long primaryKey = issuePortClearance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IssuePortClearanceModelImpl issuePortClearanceModelImpl = this;

		issuePortClearanceModelImpl._originalRequestCode = issuePortClearanceModelImpl._requestCode;

		issuePortClearanceModelImpl._originalDocumentName = issuePortClearanceModelImpl._documentName;

		issuePortClearanceModelImpl._setOriginalDocumentName = false;

		issuePortClearanceModelImpl._originalDocumentYear = issuePortClearanceModelImpl._documentYear;

		issuePortClearanceModelImpl._setOriginalDocumentYear = false;

		issuePortClearanceModelImpl._originalRequestState = issuePortClearanceModelImpl._requestState;

		issuePortClearanceModelImpl._setOriginalRequestState = false;

		issuePortClearanceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IssuePortClearance> toCacheModel() {
		IssuePortClearanceCacheModel issuePortClearanceCacheModel = new IssuePortClearanceCacheModel();

		issuePortClearanceCacheModel.id = getId();

		issuePortClearanceCacheModel.requestCode = getRequestCode();

		String requestCode = issuePortClearanceCacheModel.requestCode;

		if ((requestCode != null) && (requestCode.length() == 0)) {
			issuePortClearanceCacheModel.requestCode = null;
		}

		issuePortClearanceCacheModel.numberPortClearance = getNumberPortClearance();

		String numberPortClearance = issuePortClearanceCacheModel.numberPortClearance;

		if ((numberPortClearance != null) &&
				(numberPortClearance.length() == 0)) {
			issuePortClearanceCacheModel.numberPortClearance = null;
		}

		issuePortClearanceCacheModel.documentName = getDocumentName();

		issuePortClearanceCacheModel.documentYear = getDocumentYear();

		issuePortClearanceCacheModel.portofAuthority = getPortofAuthority();

		String portofAuthority = issuePortClearanceCacheModel.portofAuthority;

		if ((portofAuthority != null) && (portofAuthority.length() == 0)) {
			issuePortClearanceCacheModel.portofAuthority = null;
		}

		issuePortClearanceCacheModel.nameOfShip = getNameOfShip();

		String nameOfShip = issuePortClearanceCacheModel.nameOfShip;

		if ((nameOfShip != null) && (nameOfShip.length() == 0)) {
			issuePortClearanceCacheModel.nameOfShip = null;
		}

		issuePortClearanceCacheModel.flagStateOfShip = getFlagStateOfShip();

		String flagStateOfShip = issuePortClearanceCacheModel.flagStateOfShip;

		if ((flagStateOfShip != null) && (flagStateOfShip.length() == 0)) {
			issuePortClearanceCacheModel.flagStateOfShip = null;
		}

		issuePortClearanceCacheModel.numberOfCrews = getNumberOfCrews();

		issuePortClearanceCacheModel.numberOfPassengers = getNumberOfPassengers();

		issuePortClearanceCacheModel.callSign = getCallSign();

		String callSign = issuePortClearanceCacheModel.callSign;

		if ((callSign != null) && (callSign.length() == 0)) {
			issuePortClearanceCacheModel.callSign = null;
		}

		issuePortClearanceCacheModel.nameOfMaster = getNameOfMaster();

		String nameOfMaster = issuePortClearanceCacheModel.nameOfMaster;

		if ((nameOfMaster != null) && (nameOfMaster.length() == 0)) {
			issuePortClearanceCacheModel.nameOfMaster = null;
		}

		issuePortClearanceCacheModel.cargo = getCargo();

		String cargo = issuePortClearanceCacheModel.cargo;

		if ((cargo != null) && (cargo.length() == 0)) {
			issuePortClearanceCacheModel.cargo = null;
		}

		issuePortClearanceCacheModel.volumeCargo = getVolumeCargo();

		issuePortClearanceCacheModel.cargoUnit = getCargoUnit();

		String cargoUnit = issuePortClearanceCacheModel.cargoUnit;

		if ((cargoUnit != null) && (cargoUnit.length() == 0)) {
			issuePortClearanceCacheModel.cargoUnit = null;
		}

		issuePortClearanceCacheModel.transitCargo = getTransitCargo();

		String transitCargo = issuePortClearanceCacheModel.transitCargo;

		if ((transitCargo != null) && (transitCargo.length() == 0)) {
			issuePortClearanceCacheModel.transitCargo = null;
		}

		issuePortClearanceCacheModel.volumeTransitCargo = getVolumeTransitCargo();

		issuePortClearanceCacheModel.transitCargoUnit = getTransitCargoUnit();

		String transitCargoUnit = issuePortClearanceCacheModel.transitCargoUnit;

		if ((transitCargoUnit != null) && (transitCargoUnit.length() == 0)) {
			issuePortClearanceCacheModel.transitCargoUnit = null;
		}

		Date timeOfDeparture = getTimeOfDeparture();

		if (timeOfDeparture != null) {
			issuePortClearanceCacheModel.timeOfDeparture = timeOfDeparture.getTime();
		}
		else {
			issuePortClearanceCacheModel.timeOfDeparture = Long.MIN_VALUE;
		}

		issuePortClearanceCacheModel.nextPortOfCallCode = getNextPortOfCallCode();

		String nextPortOfCallCode = issuePortClearanceCacheModel.nextPortOfCallCode;

		if ((nextPortOfCallCode != null) && (nextPortOfCallCode.length() == 0)) {
			issuePortClearanceCacheModel.nextPortOfCallCode = null;
		}

		Date validUntil = getValidUntil();

		if (validUntil != null) {
			issuePortClearanceCacheModel.validUntil = validUntil.getTime();
		}
		else {
			issuePortClearanceCacheModel.validUntil = Long.MIN_VALUE;
		}

		Date issueDate = getIssueDate();

		if (issueDate != null) {
			issuePortClearanceCacheModel.issueDate = issueDate.getTime();
		}
		else {
			issuePortClearanceCacheModel.issueDate = Long.MIN_VALUE;
		}

		issuePortClearanceCacheModel.directorOfMaritime = getDirectorOfMaritime();

		String directorOfMaritime = issuePortClearanceCacheModel.directorOfMaritime;

		if ((directorOfMaritime != null) && (directorOfMaritime.length() == 0)) {
			issuePortClearanceCacheModel.directorOfMaritime = null;
		}

		issuePortClearanceCacheModel.certificateNo = getCertificateNo();

		String certificateNo = issuePortClearanceCacheModel.certificateNo;

		if ((certificateNo != null) && (certificateNo.length() == 0)) {
			issuePortClearanceCacheModel.certificateNo = null;
		}

		issuePortClearanceCacheModel.requestState = getRequestState();

		issuePortClearanceCacheModel.gt = getGt();

		issuePortClearanceCacheModel.versionNo = getVersionNo();

		String versionNo = issuePortClearanceCacheModel.versionNo;

		if ((versionNo != null) && (versionNo.length() == 0)) {
			issuePortClearanceCacheModel.versionNo = null;
		}

		issuePortClearanceCacheModel.isApproval = getIsApproval();

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			issuePortClearanceCacheModel.approvalDate = approvalDate.getTime();
		}
		else {
			issuePortClearanceCacheModel.approvalDate = Long.MIN_VALUE;
		}

		issuePortClearanceCacheModel.approvalName = getApprovalName();

		String approvalName = issuePortClearanceCacheModel.approvalName;

		if ((approvalName != null) && (approvalName.length() == 0)) {
			issuePortClearanceCacheModel.approvalName = null;
		}

		issuePortClearanceCacheModel.remarks = getRemarks();

		String remarks = issuePortClearanceCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			issuePortClearanceCacheModel.remarks = null;
		}

		issuePortClearanceCacheModel.isCancel = getIsCancel();

		Date cancelDate = getCancelDate();

		if (cancelDate != null) {
			issuePortClearanceCacheModel.cancelDate = cancelDate.getTime();
		}
		else {
			issuePortClearanceCacheModel.cancelDate = Long.MIN_VALUE;
		}

		issuePortClearanceCacheModel.cancelName = getCancelName();

		String cancelName = issuePortClearanceCacheModel.cancelName;

		if ((cancelName != null) && (cancelName.length() == 0)) {
			issuePortClearanceCacheModel.cancelName = null;
		}

		issuePortClearanceCacheModel.cancelNote = getCancelNote();

		String cancelNote = issuePortClearanceCacheModel.cancelNote;

		if ((cancelNote != null) && (cancelNote.length() == 0)) {
			issuePortClearanceCacheModel.cancelNote = null;
		}

		issuePortClearanceCacheModel.representative = getRepresentative();

		String representative = issuePortClearanceCacheModel.representative;

		if ((representative != null) && (representative.length() == 0)) {
			issuePortClearanceCacheModel.representative = null;
		}

		Date signDate = getSignDate();

		if (signDate != null) {
			issuePortClearanceCacheModel.signDate = signDate.getTime();
		}
		else {
			issuePortClearanceCacheModel.signDate = Long.MIN_VALUE;
		}

		issuePortClearanceCacheModel.signName = getSignName();

		String signName = issuePortClearanceCacheModel.signName;

		if ((signName != null) && (signName.length() == 0)) {
			issuePortClearanceCacheModel.signName = null;
		}

		issuePortClearanceCacheModel.signTitle = getSignTitle();

		String signTitle = issuePortClearanceCacheModel.signTitle;

		if ((signTitle != null) && (signTitle.length() == 0)) {
			issuePortClearanceCacheModel.signTitle = null;
		}

		issuePortClearanceCacheModel.signPlace = getSignPlace();

		String signPlace = issuePortClearanceCacheModel.signPlace;

		if ((signPlace != null) && (signPlace.length() == 0)) {
			issuePortClearanceCacheModel.signPlace = null;
		}

		issuePortClearanceCacheModel.stampStatus = getStampStatus();

		issuePortClearanceCacheModel.attachedFile = getAttachedFile();

		return issuePortClearanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(85);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", requestCode=");
		sb.append(getRequestCode());
		sb.append(", numberPortClearance=");
		sb.append(getNumberPortClearance());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentYear=");
		sb.append(getDocumentYear());
		sb.append(", portofAuthority=");
		sb.append(getPortofAuthority());
		sb.append(", nameOfShip=");
		sb.append(getNameOfShip());
		sb.append(", flagStateOfShip=");
		sb.append(getFlagStateOfShip());
		sb.append(", numberOfCrews=");
		sb.append(getNumberOfCrews());
		sb.append(", numberOfPassengers=");
		sb.append(getNumberOfPassengers());
		sb.append(", callSign=");
		sb.append(getCallSign());
		sb.append(", nameOfMaster=");
		sb.append(getNameOfMaster());
		sb.append(", cargo=");
		sb.append(getCargo());
		sb.append(", volumeCargo=");
		sb.append(getVolumeCargo());
		sb.append(", cargoUnit=");
		sb.append(getCargoUnit());
		sb.append(", transitCargo=");
		sb.append(getTransitCargo());
		sb.append(", volumeTransitCargo=");
		sb.append(getVolumeTransitCargo());
		sb.append(", transitCargoUnit=");
		sb.append(getTransitCargoUnit());
		sb.append(", timeOfDeparture=");
		sb.append(getTimeOfDeparture());
		sb.append(", nextPortOfCallCode=");
		sb.append(getNextPortOfCallCode());
		sb.append(", validUntil=");
		sb.append(getValidUntil());
		sb.append(", issueDate=");
		sb.append(getIssueDate());
		sb.append(", directorOfMaritime=");
		sb.append(getDirectorOfMaritime());
		sb.append(", certificateNo=");
		sb.append(getCertificateNo());
		sb.append(", requestState=");
		sb.append(getRequestState());
		sb.append(", gt=");
		sb.append(getGt());
		sb.append(", versionNo=");
		sb.append(getVersionNo());
		sb.append(", isApproval=");
		sb.append(getIsApproval());
		sb.append(", approvalDate=");
		sb.append(getApprovalDate());
		sb.append(", approvalName=");
		sb.append(getApprovalName());
		sb.append(", remarks=");
		sb.append(getRemarks());
		sb.append(", isCancel=");
		sb.append(getIsCancel());
		sb.append(", cancelDate=");
		sb.append(getCancelDate());
		sb.append(", cancelName=");
		sb.append(getCancelName());
		sb.append(", cancelNote=");
		sb.append(getCancelNote());
		sb.append(", representative=");
		sb.append(getRepresentative());
		sb.append(", signDate=");
		sb.append(getSignDate());
		sb.append(", signName=");
		sb.append(getSignName());
		sb.append(", signTitle=");
		sb.append(getSignTitle());
		sb.append(", signPlace=");
		sb.append(getSignPlace());
		sb.append(", stampStatus=");
		sb.append(getStampStatus());
		sb.append(", attachedFile=");
		sb.append(getAttachedFile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(130);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.IssuePortClearance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestCode</column-name><column-value><![CDATA[");
		sb.append(getRequestCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberPortClearance</column-name><column-value><![CDATA[");
		sb.append(getNumberPortClearance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentYear</column-name><column-value><![CDATA[");
		sb.append(getDocumentYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portofAuthority</column-name><column-value><![CDATA[");
		sb.append(getPortofAuthority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfShip</column-name><column-value><![CDATA[");
		sb.append(getNameOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagStateOfShip</column-name><column-value><![CDATA[");
		sb.append(getFlagStateOfShip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfCrews</column-name><column-value><![CDATA[");
		sb.append(getNumberOfCrews());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPassengers</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPassengers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>callSign</column-name><column-value><![CDATA[");
		sb.append(getCallSign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameOfMaster</column-name><column-value><![CDATA[");
		sb.append(getNameOfMaster());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargo</column-name><column-value><![CDATA[");
		sb.append(getCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volumeCargo</column-name><column-value><![CDATA[");
		sb.append(getVolumeCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cargoUnit</column-name><column-value><![CDATA[");
		sb.append(getCargoUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transitCargo</column-name><column-value><![CDATA[");
		sb.append(getTransitCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volumeTransitCargo</column-name><column-value><![CDATA[");
		sb.append(getVolumeTransitCargo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transitCargoUnit</column-name><column-value><![CDATA[");
		sb.append(getTransitCargoUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOfDeparture</column-name><column-value><![CDATA[");
		sb.append(getTimeOfDeparture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextPortOfCallCode</column-name><column-value><![CDATA[");
		sb.append(getNextPortOfCallCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validUntil</column-name><column-value><![CDATA[");
		sb.append(getValidUntil());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>issueDate</column-name><column-value><![CDATA[");
		sb.append(getIssueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>directorOfMaritime</column-name><column-value><![CDATA[");
		sb.append(getDirectorOfMaritime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateNo</column-name><column-value><![CDATA[");
		sb.append(getCertificateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestState</column-name><column-value><![CDATA[");
		sb.append(getRequestState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gt</column-name><column-value><![CDATA[");
		sb.append(getGt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNo</column-name><column-value><![CDATA[");
		sb.append(getVersionNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproval</column-name><column-value><![CDATA[");
		sb.append(getIsApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalDate</column-name><column-value><![CDATA[");
		sb.append(getApprovalDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approvalName</column-name><column-value><![CDATA[");
		sb.append(getApprovalName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remarks</column-name><column-value><![CDATA[");
		sb.append(getRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCancel</column-name><column-value><![CDATA[");
		sb.append(getIsCancel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelDate</column-name><column-value><![CDATA[");
		sb.append(getCancelDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelName</column-name><column-value><![CDATA[");
		sb.append(getCancelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cancelNote</column-name><column-value><![CDATA[");
		sb.append(getCancelNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>representative</column-name><column-value><![CDATA[");
		sb.append(getRepresentative());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signDate</column-name><column-value><![CDATA[");
		sb.append(getSignDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signName</column-name><column-value><![CDATA[");
		sb.append(getSignName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signTitle</column-name><column-value><![CDATA[");
		sb.append(getSignTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signPlace</column-name><column-value><![CDATA[");
		sb.append(getSignPlace());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stampStatus</column-name><column-value><![CDATA[");
		sb.append(getStampStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachedFile</column-name><column-value><![CDATA[");
		sb.append(getAttachedFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IssuePortClearance.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			IssuePortClearance.class
		};
	private long _id;
	private String _requestCode;
	private String _originalRequestCode;
	private String _numberPortClearance;
	private long _documentName;
	private long _originalDocumentName;
	private boolean _setOriginalDocumentName;
	private int _documentYear;
	private int _originalDocumentYear;
	private boolean _setOriginalDocumentYear;
	private String _portofAuthority;
	private String _nameOfShip;
	private String _flagStateOfShip;
	private int _numberOfCrews;
	private int _numberOfPassengers;
	private String _callSign;
	private String _nameOfMaster;
	private String _cargo;
	private double _volumeCargo;
	private String _cargoUnit;
	private String _transitCargo;
	private double _volumeTransitCargo;
	private String _transitCargoUnit;
	private Date _timeOfDeparture;
	private String _nextPortOfCallCode;
	private Date _validUntil;
	private Date _issueDate;
	private String _directorOfMaritime;
	private String _certificateNo;
	private int _requestState;
	private int _originalRequestState;
	private boolean _setOriginalRequestState;
	private double _gt;
	private String _versionNo;
	private int _isApproval;
	private Date _approvalDate;
	private String _approvalName;
	private String _remarks;
	private int _isCancel;
	private Date _cancelDate;
	private String _cancelName;
	private String _cancelNote;
	private String _representative;
	private Date _signDate;
	private String _signName;
	private String _signTitle;
	private String _signPlace;
	private long _stampStatus;
	private long _attachedFile;
	private long _columnBitmask;
	private IssuePortClearance _escapedModel;
}