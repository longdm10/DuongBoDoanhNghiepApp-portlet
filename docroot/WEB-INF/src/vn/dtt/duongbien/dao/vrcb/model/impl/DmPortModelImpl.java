/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package vn.dtt.duongbien.dao.vrcb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import vn.dtt.duongbien.dao.vrcb.model.DmPort;
import vn.dtt.duongbien.dao.vrcb.model.DmPortModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DmPort service. Represents a row in the &quot;DM_PORT&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link vn.dtt.duongbien.dao.vrcb.model.DmPortModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DmPortImpl}.
 * </p>
 *
 * @author longdm
 * @see DmPortImpl
 * @see vn.dtt.duongbien.dao.vrcb.model.DmPort
 * @see vn.dtt.duongbien.dao.vrcb.model.DmPortModel
 * @generated
 */
public class DmPortModelImpl extends BaseModelImpl<DmPort>
	implements DmPortModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dm port model instance should use the {@link vn.dtt.duongbien.dao.vrcb.model.DmPort} interface instead.
	 */
	public static final String TABLE_NAME = "DM_PORT";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.INTEGER },
			{ "PortCode", Types.VARCHAR },
			{ "LoCode", Types.VARCHAR },
			{ "PortName", Types.VARCHAR },
			{ "FullName", Types.VARCHAR },
			{ "FullNameVN", Types.VARCHAR },
			{ "PortType", Types.VARCHAR },
			{ "PortOrder", Types.INTEGER },
			{ "Address", Types.VARCHAR },
			{ "AddressVN", Types.VARCHAR },
			{ "StateCode", Types.VARCHAR },
			{ "CityCode", Types.VARCHAR },
			{ "IsDelete", Types.INTEGER },
			{ "MarkedAsDelete", Types.INTEGER },
			{ "ModifiedDate", Types.TIMESTAMP },
			{ "RequestedDate", Types.TIMESTAMP },
			{ "SyncVersion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table DM_PORT (id INTEGER not null primary key,PortCode VARCHAR(75) null,LoCode VARCHAR(75) null,PortName VARCHAR(75) null,FullName VARCHAR(75) null,FullNameVN VARCHAR(75) null,PortType VARCHAR(75) null,PortOrder INTEGER,Address VARCHAR(75) null,AddressVN VARCHAR(75) null,StateCode VARCHAR(75) null,CityCode VARCHAR(75) null,IsDelete INTEGER,MarkedAsDelete INTEGER,ModifiedDate DATE null,RequestedDate DATE null,SyncVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table DM_PORT";
	public static final String ORDER_BY_JPQL = " ORDER BY dmPort.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DM_PORT.id ASC";
	public static final String DATA_SOURCE = "vaoracangbienDataSource";
	public static final String SESSION_FACTORY = "ravaocangbienSessionFactory";
	public static final String TX_MANAGER = "ravaocangbienTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPort"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPort"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.vn.dtt.duongbien.dao.vrcb.model.DmPort"),
			true);
	public static long LOCODE_COLUMN_BITMASK = 1L;
	public static long PORTCODE_COLUMN_BITMASK = 2L;
	public static long ID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.vn.dtt.duongbien.dao.vrcb.model.DmPort"));

	public DmPortModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DmPort.class;
	}

	@Override
	public String getModelClassName() {
		return DmPort.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("portCode", getPortCode());
		attributes.put("loCode", getLoCode());
		attributes.put("portName", getPortName());
		attributes.put("fullName", getFullName());
		attributes.put("fullNameVN", getFullNameVN());
		attributes.put("portType", getPortType());
		attributes.put("portOrder", getPortOrder());
		attributes.put("address", getAddress());
		attributes.put("addressVN", getAddressVN());
		attributes.put("stateCode", getStateCode());
		attributes.put("citycode", getCitycode());
		attributes.put("isDelete", getIsDelete());
		attributes.put("markedAsDelete", getMarkedAsDelete());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("requestedDate", getRequestedDate());
		attributes.put("syncVersion", getSyncVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer id = (Integer)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String portCode = (String)attributes.get("portCode");

		if (portCode != null) {
			setPortCode(portCode);
		}

		String loCode = (String)attributes.get("loCode");

		if (loCode != null) {
			setLoCode(loCode);
		}

		String portName = (String)attributes.get("portName");

		if (portName != null) {
			setPortName(portName);
		}

		String fullName = (String)attributes.get("fullName");

		if (fullName != null) {
			setFullName(fullName);
		}

		String fullNameVN = (String)attributes.get("fullNameVN");

		if (fullNameVN != null) {
			setFullNameVN(fullNameVN);
		}

		String portType = (String)attributes.get("portType");

		if (portType != null) {
			setPortType(portType);
		}

		Integer portOrder = (Integer)attributes.get("portOrder");

		if (portOrder != null) {
			setPortOrder(portOrder);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String addressVN = (String)attributes.get("addressVN");

		if (addressVN != null) {
			setAddressVN(addressVN);
		}

		String stateCode = (String)attributes.get("stateCode");

		if (stateCode != null) {
			setStateCode(stateCode);
		}

		String citycode = (String)attributes.get("citycode");

		if (citycode != null) {
			setCitycode(citycode);
		}

		Integer isDelete = (Integer)attributes.get("isDelete");

		if (isDelete != null) {
			setIsDelete(isDelete);
		}

		Integer markedAsDelete = (Integer)attributes.get("markedAsDelete");

		if (markedAsDelete != null) {
			setMarkedAsDelete(markedAsDelete);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date requestedDate = (Date)attributes.get("requestedDate");

		if (requestedDate != null) {
			setRequestedDate(requestedDate);
		}

		String syncVersion = (String)attributes.get("syncVersion");

		if (syncVersion != null) {
			setSyncVersion(syncVersion);
		}
	}

	@Override
	public int getId() {
		return _id;
	}

	@Override
	public void setId(int id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getPortCode() {
		if (_portCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _portCode;
		}
	}

	@Override
	public void setPortCode(String portCode) {
		_columnBitmask |= PORTCODE_COLUMN_BITMASK;

		if (_originalPortCode == null) {
			_originalPortCode = _portCode;
		}

		_portCode = portCode;
	}

	public String getOriginalPortCode() {
		return GetterUtil.getString(_originalPortCode);
	}

	@Override
	public String getLoCode() {
		if (_loCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _loCode;
		}
	}

	@Override
	public void setLoCode(String loCode) {
		_columnBitmask |= LOCODE_COLUMN_BITMASK;

		if (_originalLoCode == null) {
			_originalLoCode = _loCode;
		}

		_loCode = loCode;
	}

	public String getOriginalLoCode() {
		return GetterUtil.getString(_originalLoCode);
	}

	@Override
	public String getPortName() {
		if (_portName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portName;
		}
	}

	@Override
	public void setPortName(String portName) {
		_portName = portName;
	}

	@Override
	public String getFullName() {
		if (_fullName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_fullName = fullName;
	}

	@Override
	public String getFullNameVN() {
		if (_fullNameVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullNameVN;
		}
	}

	@Override
	public void setFullNameVN(String fullNameVN) {
		_fullNameVN = fullNameVN;
	}

	@Override
	public String getPortType() {
		if (_portType == null) {
			return StringPool.BLANK;
		}
		else {
			return _portType;
		}
	}

	@Override
	public void setPortType(String portType) {
		_portType = portType;
	}

	@Override
	public int getPortOrder() {
		return _portOrder;
	}

	@Override
	public void setPortOrder(int portOrder) {
		_portOrder = portOrder;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getAddressVN() {
		if (_addressVN == null) {
			return StringPool.BLANK;
		}
		else {
			return _addressVN;
		}
	}

	@Override
	public void setAddressVN(String addressVN) {
		_addressVN = addressVN;
	}

	@Override
	public String getStateCode() {
		if (_stateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _stateCode;
		}
	}

	@Override
	public void setStateCode(String stateCode) {
		_stateCode = stateCode;
	}

	@Override
	public String getCitycode() {
		if (_citycode == null) {
			return StringPool.BLANK;
		}
		else {
			return _citycode;
		}
	}

	@Override
	public void setCitycode(String citycode) {
		_citycode = citycode;
	}

	@Override
	public int getIsDelete() {
		return _isDelete;
	}

	@Override
	public void setIsDelete(int isDelete) {
		_isDelete = isDelete;
	}

	@Override
	public int getMarkedAsDelete() {
		return _markedAsDelete;
	}

	@Override
	public void setMarkedAsDelete(int markedAsDelete) {
		_markedAsDelete = markedAsDelete;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		_requestedDate = requestedDate;
	}

	@Override
	public String getSyncVersion() {
		if (_syncVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _syncVersion;
		}
	}

	@Override
	public void setSyncVersion(String syncVersion) {
		_syncVersion = syncVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DmPort toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DmPort)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DmPortImpl dmPortImpl = new DmPortImpl();

		dmPortImpl.setId(getId());
		dmPortImpl.setPortCode(getPortCode());
		dmPortImpl.setLoCode(getLoCode());
		dmPortImpl.setPortName(getPortName());
		dmPortImpl.setFullName(getFullName());
		dmPortImpl.setFullNameVN(getFullNameVN());
		dmPortImpl.setPortType(getPortType());
		dmPortImpl.setPortOrder(getPortOrder());
		dmPortImpl.setAddress(getAddress());
		dmPortImpl.setAddressVN(getAddressVN());
		dmPortImpl.setStateCode(getStateCode());
		dmPortImpl.setCitycode(getCitycode());
		dmPortImpl.setIsDelete(getIsDelete());
		dmPortImpl.setMarkedAsDelete(getMarkedAsDelete());
		dmPortImpl.setModifiedDate(getModifiedDate());
		dmPortImpl.setRequestedDate(getRequestedDate());
		dmPortImpl.setSyncVersion(getSyncVersion());

		dmPortImpl.resetOriginalValues();

		return dmPortImpl;
	}

	@Override
	public int compareTo(DmPort dmPort) {
		int value = 0;

		if (getId() < dmPort.getId()) {
			value = -1;
		}
		else if (getId() > dmPort.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DmPort)) {
			return false;
		}

		DmPort dmPort = (DmPort)obj;

		int primaryKey = dmPort.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DmPortModelImpl dmPortModelImpl = this;

		dmPortModelImpl._originalPortCode = dmPortModelImpl._portCode;

		dmPortModelImpl._originalLoCode = dmPortModelImpl._loCode;

		dmPortModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DmPort> toCacheModel() {
		DmPortCacheModel dmPortCacheModel = new DmPortCacheModel();

		dmPortCacheModel.id = getId();

		dmPortCacheModel.portCode = getPortCode();

		String portCode = dmPortCacheModel.portCode;

		if ((portCode != null) && (portCode.length() == 0)) {
			dmPortCacheModel.portCode = null;
		}

		dmPortCacheModel.loCode = getLoCode();

		String loCode = dmPortCacheModel.loCode;

		if ((loCode != null) && (loCode.length() == 0)) {
			dmPortCacheModel.loCode = null;
		}

		dmPortCacheModel.portName = getPortName();

		String portName = dmPortCacheModel.portName;

		if ((portName != null) && (portName.length() == 0)) {
			dmPortCacheModel.portName = null;
		}

		dmPortCacheModel.fullName = getFullName();

		String fullName = dmPortCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			dmPortCacheModel.fullName = null;
		}

		dmPortCacheModel.fullNameVN = getFullNameVN();

		String fullNameVN = dmPortCacheModel.fullNameVN;

		if ((fullNameVN != null) && (fullNameVN.length() == 0)) {
			dmPortCacheModel.fullNameVN = null;
		}

		dmPortCacheModel.portType = getPortType();

		String portType = dmPortCacheModel.portType;

		if ((portType != null) && (portType.length() == 0)) {
			dmPortCacheModel.portType = null;
		}

		dmPortCacheModel.portOrder = getPortOrder();

		dmPortCacheModel.address = getAddress();

		String address = dmPortCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			dmPortCacheModel.address = null;
		}

		dmPortCacheModel.addressVN = getAddressVN();

		String addressVN = dmPortCacheModel.addressVN;

		if ((addressVN != null) && (addressVN.length() == 0)) {
			dmPortCacheModel.addressVN = null;
		}

		dmPortCacheModel.stateCode = getStateCode();

		String stateCode = dmPortCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			dmPortCacheModel.stateCode = null;
		}

		dmPortCacheModel.citycode = getCitycode();

		String citycode = dmPortCacheModel.citycode;

		if ((citycode != null) && (citycode.length() == 0)) {
			dmPortCacheModel.citycode = null;
		}

		dmPortCacheModel.isDelete = getIsDelete();

		dmPortCacheModel.markedAsDelete = getMarkedAsDelete();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dmPortCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dmPortCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			dmPortCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			dmPortCacheModel.requestedDate = Long.MIN_VALUE;
		}

		dmPortCacheModel.syncVersion = getSyncVersion();

		String syncVersion = dmPortCacheModel.syncVersion;

		if ((syncVersion != null) && (syncVersion.length() == 0)) {
			dmPortCacheModel.syncVersion = null;
		}

		return dmPortCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", portCode=");
		sb.append(getPortCode());
		sb.append(", loCode=");
		sb.append(getLoCode());
		sb.append(", portName=");
		sb.append(getPortName());
		sb.append(", fullName=");
		sb.append(getFullName());
		sb.append(", fullNameVN=");
		sb.append(getFullNameVN());
		sb.append(", portType=");
		sb.append(getPortType());
		sb.append(", portOrder=");
		sb.append(getPortOrder());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", addressVN=");
		sb.append(getAddressVN());
		sb.append(", stateCode=");
		sb.append(getStateCode());
		sb.append(", citycode=");
		sb.append(getCitycode());
		sb.append(", isDelete=");
		sb.append(getIsDelete());
		sb.append(", markedAsDelete=");
		sb.append(getMarkedAsDelete());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", requestedDate=");
		sb.append(getRequestedDate());
		sb.append(", syncVersion=");
		sb.append(getSyncVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("vn.dtt.duongbien.dao.vrcb.model.DmPort");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portCode</column-name><column-value><![CDATA[");
		sb.append(getPortCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loCode</column-name><column-value><![CDATA[");
		sb.append(getLoCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portName</column-name><column-value><![CDATA[");
		sb.append(getPortName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullName</column-name><column-value><![CDATA[");
		sb.append(getFullName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullNameVN</column-name><column-value><![CDATA[");
		sb.append(getFullNameVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portType</column-name><column-value><![CDATA[");
		sb.append(getPortType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portOrder</column-name><column-value><![CDATA[");
		sb.append(getPortOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>addressVN</column-name><column-value><![CDATA[");
		sb.append(getAddressVN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stateCode</column-name><column-value><![CDATA[");
		sb.append(getStateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>citycode</column-name><column-value><![CDATA[");
		sb.append(getCitycode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDelete</column-name><column-value><![CDATA[");
		sb.append(getIsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAsDelete</column-name><column-value><![CDATA[");
		sb.append(getMarkedAsDelete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedDate</column-name><column-value><![CDATA[");
		sb.append(getRequestedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncVersion</column-name><column-value><![CDATA[");
		sb.append(getSyncVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DmPort.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { DmPort.class };
	private int _id;
	private String _portCode;
	private String _originalPortCode;
	private String _loCode;
	private String _originalLoCode;
	private String _portName;
	private String _fullName;
	private String _fullNameVN;
	private String _portType;
	private int _portOrder;
	private String _address;
	private String _addressVN;
	private String _stateCode;
	private String _citycode;
	private int _isDelete;
	private int _markedAsDelete;
	private Date _modifiedDate;
	private Date _requestedDate;
	private String _syncVersion;
	private long _columnBitmask;
	private DmPort _escapedModel;
}